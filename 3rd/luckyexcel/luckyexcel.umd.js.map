{"version":3,"sources":["node_modules/_browser-pack@6.1.0@browser-pack/_prelude.js","node_modules/_base64-js@1.5.1@base64-js/index.js","node_modules/_buffer@4.9.2@buffer/index.js","node_modules/_dayjs@1.11.7@dayjs/dayjs.min.js","node_modules/_ieee754@1.2.1@ieee754/index.js","node_modules/_isarray@1.0.0@isarray/index.js","node_modules/_jszip@3.10.1@jszip/dist/node_modules/jszip/dist/jszip.min.js","node_modules/_process@0.11.10@process/browser.js","node_modules/_timers-browserify@1.4.2@timers-browserify/main.js","src/HandleZip.ts","src/ToLuckySheet/LuckyBase.ts","src/ToLuckySheet/LuckyCell.ts","src/ToLuckySheet/LuckyFile.ts","src/ToLuckySheet/LuckyImage.ts","src/ToLuckySheet/LuckySheet.ts","src/ToLuckySheet/ReadXml.ts","src/common/constant.ts","src/common/emf.ts","src/common/method.ts","src/main.ts","src/main.umd.ts"],"names":[],"mappingstvDA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3EA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA;AAEA,IAAA,QAAA,GAAA,OAAA;AAGA,IAAA,SAAA;EAII,SAAA,UAAY,IAAU;IAClB;IACA;IACI,IAAI,CAAC,UAAU,GAAG,IAAI;IAC1B;EACJ;;EAEA,SAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,WAAwC,EAAE,SAA2B;IAC3E;IACA,OAAA,WAAK,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAmC;IAAA,CAClE,IAAI,CAAC,UAAS,GAAO;MAClB,IAAI,QAAQ,GAAoC,EAAE;QAAE,SAAS,GAAU,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,MAAM;QAAE,KAAK,GAAQ,CAAC;MACpH,GAAG,CAAC,OAAO,CAAC,UAAU,YAAgB,EAAE,QAAY;QAChD,IAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI;QAC5B,IAAI,WAAW,GAAG,QAAQ,CAAC,KAAK,CA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AAC,QAAQ,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,C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","file":"luckyexcel.umd.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",f=\"month\",h=\"quarter\",c=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(h){case c:return r?l(1,0):l(31,11);case f:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=h+\"Date\",n[d]=h+\"Date\",n[f]=h+\"Month\",n[c]=h+\"FullYear\",n[u]=h+\"Hours\",n[s]=h+\"Minutes\",n[i]=h+\"Seconds\",n[r]=h+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,l=this;r=Number(r);var $=O.p(h),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===f)return this.set(f,this.$M+r);if($===c)return this.set(c,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,\"0\")},d=n.meridiem||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r},$={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,\"0\"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,\"0\"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,\"0\"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,\"0\"),s:String(this.$s),ss:O.s(this.$s,2,\"0\"),SSS:O.s(this.$ms,3,\"0\"),Z:i};return r.replace(y,(function(t,e){return e||$[t]||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,v=this-M,g=O.m(this,M);return g=($={},$[c]=g/12,$[f]=g,$[h]=g/3,$[o]=(v-m)/6048e5,$[a]=(v-m)/864e5,$[u]=v/n,$[s]=v/e,$[i]=v/t,$)[y]||v,l?g:O.a(g)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",f],[\"$y\",c],[\"$D\",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w}));","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n\nJSZip v3.10.1 - A JavaScript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/main/LICENSE\n*/\n\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).JSZip=e()}}(function(){return function s(a,o,h){function u(r,e){if(!o[r]){if(!a[r]){var t=\"function\"==typeof require&&require;if(!e&&t)return t(r,!0);if(l)return l(r,!0);var n=new Error(\"Cannot find module '\"+r+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return u(t||e)},i,i.exports,s,a,o,h)}return o[r].exports}for(var l=\"function\"==typeof require&&require,e=0;e<h.length;e++)u(h[e]);return u}({1:[function(e,t,r){\"use strict\";var d=e(\"./utils\"),c=e(\"./support\"),p=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";r.encode=function(e){for(var t,r,n,i,s,a,o,h=[],u=0,l=e.length,f=l,c=\"string\"!==d.getTypeOf(e);u<e.length;)f=l-u,n=c?(t=e[u++],r=u<l?e[u++]:0,u<l?e[u++]:0):(t=e.charCodeAt(u++),r=u<l?e.charCodeAt(u++):0,u<l?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<f?(15&r)<<2|n>>6:64,o=2<f?63&n:64,h.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join(\"\")},r.decode=function(e){var t,r,n,i,s,a,o=0,h=0,u=\"data:\";if(e.substr(0,u.length)===u)throw new Error(\"Invalid base64 input, it looks like a data url.\");var l,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,\"\")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error(\"Invalid base64 input, bad content length.\");for(l=c.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),l[h++]=t,64!==s&&(l[h++]=r),64!==a&&(l[h++]=n);return l}},{\"./support\":30,\"./utils\":32}],2:[function(e,t,r){\"use strict\";var n=e(\"./external\"),i=e(\"./stream/DataWorker\"),s=e(\"./stream/Crc32Probe\"),a=e(\"./stream/DataLengthProbe\");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")),t=this;return e.on(\"end\",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error(\"Bug : uncompressed data size mismatch\")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\",this.compressedSize).withStreamInfo(\"uncompressedSize\",this.uncompressedSize).withStreamInfo(\"crc32\",this.crc32).withStreamInfo(\"compression\",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a(\"uncompressedSize\")).pipe(t.compressWorker(r)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\",t)},t.exports=o},{\"./external\":6,\"./stream/Crc32Probe\":25,\"./stream/DataLengthProbe\":26,\"./stream/DataWorker\":27}],3:[function(e,t,r){\"use strict\";var n=e(\"./stream/GenericWorker\");r.STORE={magic:\"\\0\\0\",compressWorker:function(){return new n(\"STORE compression\")},uncompressWorker:function(){return new n(\"STORE decompression\")}},r.DEFLATE=e(\"./flate\")},{\"./flate\":7,\"./stream/GenericWorker\":28}],4:[function(e,t,r){\"use strict\";var n=e(\"./utils\");var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?\"string\"!==n.getTypeOf(e)?function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}(0|t,e,e.length,0):function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length,0):0}},{\"./utils\":32}],5:[function(e,t,r){\"use strict\";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){\"use strict\";var n=null;n=\"undefined\"!=typeof Promise?Promise:e(\"lie\"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,i=e(\"pako\"),s=e(\"./utils\"),a=e(\"./stream/GenericWorker\"),o=n?\"uint8array\":\"array\";function h(e,t){a.call(this,\"FlateWorker/\"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic=\"\\b\\0\",s.inherits(h,a),h.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(e){return new h(\"Deflate\",e)},r.uncompressWorker=function(){return new h(\"Inflate\",{})}},{\"./stream/GenericWorker\":28,\"./utils\":32,pako:38}],8:[function(e,t,r){\"use strict\";function A(e,t){var r,n=\"\";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function n(e,t,r,n,i,s){var a,o,h=e.file,u=e.compression,l=s!==O.utf8encode,f=I.transformTo(\"string\",s(h.name)),c=I.transformTo(\"string\",O.utf8encode(h.name)),d=h.comment,p=I.transformTo(\"string\",s(d)),m=I.transformTo(\"string\",O.utf8encode(d)),_=c.length!==h.name.length,g=m.length!==d.length,b=\"\",v=\"\",y=\"\",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),\"UNIX\"===i?(C=798,z|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(e){return 63&(e||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+c,b+=\"up\"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+=\"uc\"+A(y.length,2)+y);var E=\"\";return E+=\"\\n\\0\",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+\"\\0\\0\\0\\0\"+A(z,4)+A(n,4)+f+b+p}}var I=e(\"../utils\"),i=e(\"../stream/GenericWorker\"),O=e(\"../utf8\"),B=e(\"../crc32\"),R=e(\"../signature\");function s(e,t,r,n){i.call(this,\"ZipFileWorker\"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,i),s.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=n(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=n(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return R.DATA_DESCRIPTOR+A(e.crc32,4)+A(e.compressedSize,4)+A(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,n=function(e,t,r,n,i){var s=I.transformTo(\"string\",i(n));return R.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+A(e,2)+A(e,2)+A(t,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on(\"error\",function(e){t.error(e)}),this},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},s.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=s},{\"../crc32\":4,\"../signature\":23,\"../stream/GenericWorker\":28,\"../utf8\":31,\"../utils\":32}],9:[function(e,t,r){\"use strict\";var u=e(\"../compressions\"),n=e(\"./ZipFileWorker\");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),h=0;try{e.forEach(function(e,t){h++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+\" is not a valid compression method !\");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo(\"file\",{name:e,dir:i,date:s,comment:t.comment||\"\",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(e){o.error(e)}return o}},{\"../compressions\":3,\"./ZipFileWorker\":8}],10:[function(e,t,r){\"use strict\";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");this.files=Object.create(null),this.comment=null,this.root=\"\",this.clone=function(){var e=new n;for(var t in this)\"function\"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e(\"./object\")).loadAsync=e(\"./load\"),n.support=e(\"./support\"),n.defaults=e(\"./defaults\"),n.version=\"3.10.1\",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e(\"./external\"),t.exports=n},{\"./defaults\":5,\"./external\":6,\"./load\":11,\"./object\":15,\"./support\":30}],11:[function(e,t,r){\"use strict\";var u=e(\"./utils\"),i=e(\"./external\"),n=e(\"./utf8\"),s=e(\"./zipEntries\"),a=e(\"./stream/Crc32Probe\"),l=e(\"./nodejsUtils\");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new a);r.on(\"error\",function(e){t(e)}).on(\"end\",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error(\"Corrupted zip : CRC32 mismatch\")):e()}).resume()})}t.exports=function(e,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")):u.prepareContent(\"the loaded zip file\",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(o.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n],s=i.fileNameStr,a=u.resolve(i.fileNameStr);h.file(a,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(h.file(a).unsafeOriginalName=s)}return t.zipComment.length&&(h.comment=t.zipComment),h})}},{\"./external\":6,\"./nodejsUtils\":14,\"./stream/Crc32Probe\":25,\"./utf8\":31,\"./utils\":32,\"./zipEntries\":33}],12:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../stream/GenericWorker\");function s(e,t){i.call(this,\"Nodejs stream input adapter for \"+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on(\"data\",function(e){t.push({data:e,meta:{percent:0}})}).on(\"error\",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on(\"end\",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{\"../stream/GenericWorker\":28,\"../utils\":32}],13:[function(e,t,r){\"use strict\";var i=e(\"readable-stream\").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on(\"data\",function(e,t){n.push(e)||n._helper.pause(),r&&r(t)}).on(\"error\",function(e){n.emit(\"error\",e)}).on(\"end\",function(){n.push(null)})}e(\"../utils\").inherits(n,i),n.prototype._read=function(){this._helper.resume()},t.exports=n},{\"../utils\":32,\"readable-stream\":16}],14:[function(e,t,r){\"use strict\";t.exports={isNode:\"undefined\"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if(\"number\"==typeof e)throw new Error('The \"data\" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&\"function\"==typeof e.on&&\"function\"==typeof e.pause&&\"function\"==typeof e.resume}}},{}],15:[function(e,t,r){\"use strict\";function s(e,t,r){var n,i=u.getTypeOf(t),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),\"string\"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(n=_(e))&&b.call(this,n,!0);var a=\"string\"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t=\"\",s.compression=\"STORE\",i=\"string\");var o=null;o=t instanceof c||t instanceof l?t:p.isNode&&p.isStream(t)?new m(e,t):u.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var h=new d(e,o,s);this.files[e]=h}var i=e(\"./utf8\"),u=e(\"./utils\"),l=e(\"./stream/GenericWorker\"),a=e(\"./stream/StreamHelper\"),f=e(\"./defaults\"),c=e(\"./compressedObject\"),d=e(\"./zipObject\"),o=e(\"./generate\"),p=e(\"./nodejsUtils\"),m=e(\"./nodejs/NodejsStreamInputAdapter\"),_=function(e){\"/\"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf(\"/\");return 0<t?e.substring(0,t):\"\"},g=function(e){return\"/\"!==e.slice(-1)&&(e+=\"/\"),e},b=function(e,t){return t=void 0!==t?t:f.createFolders,e=g(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function h(e){return\"[object RegExp]\"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t)}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(h(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=b.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||(\"/\"!==r.slice(-1)&&(r+=\"/\"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},generateInternalStream:function(e){var t,r={};try{if((r=u.extend(e||{},{streamFiles:!1,compression:\"STORE\",compressionOptions:null,type:\"\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),\"binarystring\"===r.type&&(r.type=\"string\"),!r.type)throw new Error(\"No output type specified.\");u.checkSupport(r.type),\"darwin\"!==r.platform&&\"freebsd\"!==r.platform&&\"linux\"!==r.platform&&\"sunos\"!==r.platform||(r.platform=\"UNIX\"),\"win32\"===r.platform&&(r.platform=\"DOS\");var n=r.comment||this.comment||\"\";t=o.generateWorker(this,r,n)}catch(e){(t=new l(\"error\")).error(e)}return new a(t,r.type||\"string\",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type=\"nodebuffer\"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n},{\"./compressedObject\":2,\"./defaults\":5,\"./generate\":9,\"./nodejs/NodejsStreamInputAdapter\":12,\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31,\"./utils\":32,\"./zipObject\":35}],16:[function(e,t,r){\"use strict\";t.exports=e(\"stream\")},{stream:void 0}],17:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],18:[function(e,t,r){\"use strict\";var n=e(\"../utils\");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+e+\"). Corrupted zip ?\")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo(\"string\",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{\"../utils\":32}],19:[function(e,t,r){\"use strict\";var n=e(\"./Uint8ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./Uint8ArrayReader\":21}],20:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],21:[function(e,t,r){\"use strict\";var n=e(\"./ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./ArrayReader\":17}],22:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../support\"),s=e(\"./ArrayReader\"),a=e(\"./StringReader\"),o=e(\"./NodeBufferReader\"),h=e(\"./Uint8ArrayReader\");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),\"string\"!==t||i.uint8array?\"nodebuffer\"===t?new o(e):i.uint8array?new h(n.transformTo(\"uint8array\",e)):new s(n.transformTo(\"array\",e)):new a(e)}},{\"../support\":30,\"../utils\":32,\"./ArrayReader\":17,\"./NodeBufferReader\":19,\"./StringReader\":20,\"./Uint8ArrayReader\":21}],23:[function(e,t,r){\"use strict\";r.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",r.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",r.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",r.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",r.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],24:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../utils\");function s(e){n.call(this,\"ConvertWorker to \"+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],25:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../crc32\");function s(){n.call(this,\"Crc32Probe\"),this.withStreamInfo(\"crc32\",0)}e(\"../utils\").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{\"../crc32\":4,\"../utils\":32,\"./GenericWorker\":28}],26:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataLengthProbe for \"+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],27:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataWorker\");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type=\"\",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case\"string\":e=this.data.substring(this.index,t);break;case\"uint8array\":e=this.data.subarray(this.index,t);break;case\"array\":case\"nodebuffer\":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],28:[function(e,t,r){\"use strict\";function n(e){this.name=e||\"default\",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit(\"data\",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit(\"end\"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit(\"error\",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit(\"error\",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.end()}),e.on(\"error\",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e=\"Worker \"+this.name;return this.previous?this.previous+\" -> \"+e:e}},t.exports=n},{}],29:[function(e,t,r){\"use strict\";var h=e(\"../utils\"),i=e(\"./ConvertWorker\"),s=e(\"./GenericWorker\"),u=e(\"../base64\"),n=e(\"../support\"),a=e(\"../external\"),o=null;if(n.nodestream)try{o=e(\"../nodejs/NodejsStreamOutputAdapter\")}catch(e){}function l(e,o){return new a.Promise(function(t,r){var n=[],i=e._internalType,s=e._outputType,a=e._mimeType;e.on(\"data\",function(e,t){n.push(e),o&&o(t)}).on(\"error\",function(e){n=[],r(e)}).on(\"end\",function(){try{var e=function(e,t,r){switch(e){case\"blob\":return h.newBlob(h.transformTo(\"arraybuffer\",t),r);case\"base64\":return u.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case\"string\":return t.join(\"\");case\"array\":return Array.prototype.concat.apply([],t);case\"uint8array\":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case\"nodebuffer\":return Buffer.concat(t);default:throw new Error(\"concat : unsupported type '\"+e+\"'\")}}(i,n),a);t(e)}catch(e){r(e)}n=[]}).resume()})}function f(e,t,r){var n=t;switch(t){case\"blob\":case\"arraybuffer\":n=\"uint8array\";break;case\"base64\":n=\"string\"}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock()}catch(e){this._worker=new s(\"error\"),this._worker.error(e)}}f.prototype={accumulate:function(e){return l(this,e)},on:function(e,t){var r=this;return\"data\"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta)}):this._worker.on(e,function(){h.delay(t,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport(\"nodestream\"),\"nodebuffer\"!==this._outputType)throw new Error(this._outputType+\" is not supported by this method\");return new o(this,{objectMode:\"nodebuffer\"!==this._outputType},e)}},t.exports=f},{\"../base64\":1,\"../external\":6,\"../nodejs/NodejsStreamOutputAdapter\":13,\"../support\":30,\"../utils\":32,\"./ConvertWorker\":24,\"./GenericWorker\":28}],30:[function(e,t,r){\"use strict\";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,r.nodebuffer=\"undefined\"!=typeof Buffer,r.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:\"application/zip\"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob(\"application/zip\").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e(\"readable-stream\").Readable}catch(e){r.nodestream=!1}},{\"readable-stream\":16}],31:[function(e,t,s){\"use strict\";for(var o=e(\"./utils\"),h=e(\"./support\"),r=e(\"./nodejsUtils\"),n=e(\"./stream/GenericWorker\"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;u[254]=u[254]=1;function a(){n.call(this,\"utf-8 decode\"),this.leftOver=null}function l(){n.call(this,\"utf-8 encode\")}s.utf8encode=function(e){return h.nodebuffer?r.newBufferFrom(e,\"utf-8\"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=h.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return h.nodebuffer?o.transformTo(\"nodebuffer\",e).toString(\"utf-8\"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=u[n]))a[r++]=65533,t+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(h.uint8array?\"uint8array\":\"array\",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(h.uint8array?\"uint8array\":\"array\",e.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(h.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,n),l.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta})},s.Utf8EncodeWorker=l},{\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./support\":30,\"./utils\":32}],32:[function(e,t,a){\"use strict\";var o=e(\"./support\"),h=e(\"./base64\"),r=e(\"./nodejsUtils\"),u=e(\"./external\");function n(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e(\"setimmediate\"),a.newBlob=function(t,r){a.checkSupport(\"blob\");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error(\"Bug : can't construct the Blob.\")}}};var i={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)\"array\"===t||\"nodebuffer\"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join(\"\")},stringifyByChar:function(e){for(var t=\"\",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return!1}}()}};function s(e){var t=65536,r=a.getTypeOf(e),n=!0;if(\"uint8array\"===r?n=i.applyCanBeUsed.uint8array:\"nodebuffer\"===r&&(n=i.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return i.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return i.stringifyByChar(e)}function f(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=s;var c={};c.string={string:n,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:s,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t=t||\"\",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.resolve=function(e){for(var t=e.split(\"/\"),r=[],n=0;n<t.length;n++){var i=t[n];\".\"===i||\"\"===i&&0!==n&&n!==t.length-1||(\"..\"===i?r.pop():r.push(i))}return r.join(\"/\")},a.getTypeOf=function(e){return\"string\"==typeof e?\"string\":\"[object Array]\"===Object.prototype.toString.call(e)?\"array\":o.nodebuffer&&r.isBuffer(e)?\"nodebuffer\":o.uint8array&&e instanceof Uint8Array?\"uint8array\":o.arraybuffer&&e instanceof ArrayBuffer?\"arraybuffer\":void 0},a.checkSupport=function(e){if(!o[e.toLowerCase()])throw new Error(e+\" is not supported by this platform\")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n=\"\";for(r=0;r<(e||\"\").length;r++)n+=\"\\\\x\"+((t=e.charCodeAt(r))<16?\"0\":\"\")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){setImmediate(function(){e.apply(r||null,t||[])})},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(r,e,n,i,s){return u.Promise.resolve(e).then(function(n){return o.blob&&(n instanceof Blob||-1!==[\"[object File]\",\"[object Blob]\"].indexOf(Object.prototype.toString.call(n)))&&\"undefined\"!=typeof FileReader?new u.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){r(e.target.error)},e.readAsArrayBuffer(n)}):n}).then(function(e){var t=a.getTypeOf(e);return t?(\"arraybuffer\"===t?e=a.transformTo(\"uint8array\",e):\"string\"===t&&(s?e=h.decode(e):n&&!0!==i&&(e=function(e){return l(e,o.uint8array?new Uint8Array(e.length):new Array(e.length))}(e))),e):u.Promise.reject(new Error(\"Can't read the data of '\"+r+\"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"))})}},{\"./base64\":1,\"./external\":6,\"./nodejsUtils\":14,\"./support\":30,setimmediate:54}],33:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),i=e(\"./utils\"),s=e(\"./signature\"),a=e(\"./zipEntry\"),o=e(\"./support\");function h(e){this.files=[],this.loadOptions=e}h.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error(\"Corrupted zip or bug: unexpected signature (\"+i.pretty(t)+\", expected \"+i.pretty(e)+\")\")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?\"uint8array\":\"array\",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip: can't find end of central directory\");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(n)+\" bytes.\")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=h},{\"./reader/readerFor\":22,\"./signature\":23,\"./support\":30,\"./utils\":32,\"./zipEntry\":34}],34:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),s=e(\"./utils\"),i=e(\"./compressedObject\"),a=e(\"./crc32\"),o=e(\"./utf8\"),h=e(\"./compressions\"),u=e(\"./support\");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");if(null===(t=function(e){for(var t in h)if(Object.prototype.hasOwnProperty.call(h,t)&&h[t].magic===e)return h[t];return null}(this.compressionMethod)))throw new Error(\"Corrupted zip : compression \"+s.pretty(this.compressionMethod)+\" unknown (inner file : \"+s.transformTo(\"string\",this.fileName)+\")\");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=u.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./reader/readerFor\":22,\"./support\":30,\"./utf8\":31,\"./utils\":32}],35:[function(e,t,r){\"use strict\";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e(\"./stream/StreamHelper\"),i=e(\"./stream/DataWorker\"),a=e(\"./utf8\"),o=e(\"./compressedObject\"),h=e(\"./stream/GenericWorker\");n.prototype={internalStream:function(e){var t=null,r=\"string\";try{if(!e)throw new Error(\"No output type specified.\");var n=\"string\"===(r=e.toLowerCase())||\"text\"===r;\"binarystring\"!==r&&\"text\"!==r||(r=\"string\"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new h(\"error\")).error(e)}return new s(t,r,\"\")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||\"nodebuffer\").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new i(this._data)}};for(var u=[\"asText\",\"asBinary\",\"asNodeBuffer\",\"asUint8Array\",\"asArrayBuffer\"],l=function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},f=0;f<u.length;f++)n.prototype[u[f]]=l;t.exports=n},{\"./compressedObject\":2,\"./stream/DataWorker\":27,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31}],36:[function(e,l,t){(function(t){\"use strict\";var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),a=t.document.createTextNode(\"\");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(t.setImmediate||void 0===t.MessageChannel)r=\"document\"in t&&\"onreadystatechange\"in t.document.createElement(\"script\")?function(){var e=t.document.createElement(\"script\");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(u,0)};else{var o=new t.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var e,t;n=!0;for(var r=h.length;r;){for(t=h,h=[],e=-1;++e<r;)t[e]();r=h.length}n=!1}l.exports=function(e){1!==h.push(e)||n||r()}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],37:[function(e,t,r){\"use strict\";var i=e(\"immediate\");function u(){}var l={},s=[\"REJECTED\"],a=[\"FULFILLED\"],n=[\"PENDING\"];function o(e){if(\"function\"!=typeof e)throw new TypeError(\"resolver must be a function\");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&d(this,e)}function h(e,t,r){this.promise=e,\"function\"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),\"function\"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(t,r,n){i(function(){var e;try{e=r(n)}catch(e){return l.reject(t,e)}e===t?l.reject(t,new TypeError(\"Cannot resolve promise with itself\")):l.resolve(t,e)})}function c(e){var t=e&&e.then;if(e&&(\"object\"==typeof e||\"function\"==typeof e)&&\"function\"==typeof t)return function(){t.apply(e,arguments)}}function d(t,e){var r=!1;function n(e){r||(r=!0,l.reject(t,e))}function i(e){r||(r=!0,l.resolve(t,e))}var s=p(function(){e(i,n)});\"error\"===s.status&&n(s.value)}function p(e,t){var r={};try{r.value=e(t),r.status=\"success\"}catch(e){r.status=\"error\",r.value=e}return r}(t.exports=o).prototype.finally=function(t){if(\"function\"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if(\"function\"!=typeof e&&this.state===a||\"function\"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);this.state!==n?f(r,this.state===a?e:t,this.outcome):this.queue.push(new h(r,e,t));return r},h.prototype.callFulfilled=function(e){l.resolve(this.promise,e)},h.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},h.prototype.callRejected=function(e){l.reject(this.promise,e)},h.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},l.resolve=function(e,t){var r=p(c,t);if(\"error\"===r.status)return l.reject(e,r.value);var n=r.value;if(n)d(e,n);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},l.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){if(e instanceof this)return e;return l.resolve(new this(u),e)},o.reject=function(e){var t=new this(u);return l.reject(t,e)},o.all=function(e){var r=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var n=e.length,i=!1;if(!n)return this.resolve([]);var s=new Array(n),a=0,t=-1,o=new this(u);for(;++t<n;)h(e[t],t);return o;function h(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,l.resolve(o,s))},function(e){i||(i=!0,l.reject(o,e))})}},o.race=function(e){var t=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var r=e.length,n=!1;if(!r)return this.resolve([]);var i=-1,s=new this(u);for(;++i<r;)a=e[i],t.resolve(a).then(function(e){n||(n=!0,l.resolve(s,e))},function(e){n||(n=!0,l.reject(s,e))});var a;return s}},{immediate:36}],38:[function(e,t,r){\"use strict\";var n={};(0,e(\"./lib/utils/common\").assign)(n,e(\"./lib/deflate\"),e(\"./lib/inflate\"),e(\"./lib/zlib/constants\")),t.exports=n},{\"./lib/deflate\":39,\"./lib/inflate\":40,\"./lib/utils/common\":41,\"./lib/zlib/constants\":44}],39:[function(e,t,r){\"use strict\";var a=e(\"./zlib/deflate\"),o=e(\"./utils/common\"),h=e(\"./utils/strings\"),i=e(\"./zlib/messages\"),s=e(\"./zlib/zstream\"),u=Object.prototype.toString,l=0,f=-1,c=0,d=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:f,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:\"\"},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n=\"string\"==typeof t.dictionary?h.string2buf(t.dictionary):\"[object ArrayBuffer]\"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==l)throw new Error(i[r]);this._dict_set=!0}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,\"string\"==typeof e?i.input=h.string2buf(e):\"[object ArrayBuffer]\"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||(\"string\"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)))}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==n||(this.onEnd(l),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===l&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,n(e,t)}},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/deflate\":46,\"./zlib/messages\":51,\"./zlib/zstream\":53}],40:[function(e,t,r){\"use strict\";var c=e(\"./zlib/inflate\"),d=e(\"./utils/common\"),p=e(\"./utils/strings\"),m=e(\"./zlib/constants\"),n=e(\"./zlib/messages\"),i=e(\"./zlib/zstream\"),s=e(\"./zlib/gzheader\"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:\"\"},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=c.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,c.inflateGetHeader(this.strm,this.header)}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,\"string\"==typeof e?h.input=p.binstring2buf(e):\"[object ArrayBuffer]\"===_.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new d.Buf8(u),h.next_out=0,h.avail_out=u),(r=c.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o=\"string\"==typeof l?p.string2buf(l):\"[object ArrayBuffer]\"===_.call(l)?new Uint8Array(l):l,r=c.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(i=p.utf8border(h.output,h.next_out),s=h.next_out-i,a=p.buf2string(h.output,i),h.next_out=s,h.avail_out=u-s,s&&d.arraySet(h.output,h.output,i,s,0),this.onData(a)):this.onData(d.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=c.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e)},a.prototype.onEnd=function(e){e===m.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,o(e,t)},r.ungzip=o},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/constants\":44,\"./zlib/gzheader\":47,\"./zlib/inflate\":49,\"./zlib/messages\":51,\"./zlib/zstream\":53}],41:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if(\"object\"!=typeof r)throw new TypeError(r+\"must be non-object\");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){\"use strict\";var h=e(\"./common\"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var u=new h.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,h.shrinkBuf(e,t));for(var r=\"\",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new h.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new h.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=u[i]))o[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return l(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}},{\"./common\":41}],43:[function(e,t,r){\"use strict\";t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(e,t,r){\"use strict\";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){\"use strict\";var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){\"use strict\";var h,c=e(\"../utils/common\"),u=e(\"./trees\"),d=e(\"./adler32\"),p=e(\"./crc32\"),n=e(\"./messages\"),l=0,f=4,m=0,_=-2,g=-1,b=4,i=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(e,t){return e.msg=n[t],t}function T(e){return(e<<1)-(4<e?9:0)}function D(e){for(var t=e.length;0<=--t;)e[t]=0}function F(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(c.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function N(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,F(e.strm)}function U(e,t){e.pending_buf[e.pending++]=t}function P(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function L(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,h=e.strstart>e.w_size-z?e.strstart-(e.w_size-z):0,u=e.window,l=e.w_mask,f=e.prev,c=e.strstart+S,d=u[s+a-1],p=u[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(u[(r=t)+a]===p&&u[r+a-1]===d&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<c);if(n=S-(c-s),s=c-S,a<n){if(e.match_start=t,o<=(a=n))break;d=u[s+a-1],p=u[s+a]}}}while((t=f[t&l])>h&&0!=--i);return a<=e.lookahead?a:e.lookahead}function j(e){var t,r,n,i,s,a,o,h,u,l,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-z)){for(c.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);i+=f}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,h=e.strstart+e.lookahead,u=i,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,c.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=d(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),e.lookahead+=r,e.lookahead+e.insert>=x)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+x-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<x)););}while(e.lookahead<z&&0!==e.strm.avail_in)}function Z(e,t){for(var r,n;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r)),e.match_length>=x)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-x),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=x){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function W(e,t){for(var r,n,i;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=x-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===x&&4096<e.strstart-e.match_start)&&(e.match_length=x-1)),e.prev_length>=x&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-x,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-x),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=x-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return A}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return A}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function M(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new c.Buf16(2*w),this.dyn_dtree=new c.Buf16(2*(2*a+1)),this.bl_tree=new c.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new c.Buf16(k+1),this.heap=new c.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new c.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?C:E,e.adler=2===t.wrap?0:1,t.last_flush=l,u._tr_init(t),m):R(e,_)}function K(e){var t=G(e);return t===m&&function(e){e.window_size=2*e.w_size,D(e.head),e.max_lazy_match=h[e.level].max_lazy,e.good_match=h[e.level].good_length,e.nice_match=h[e.level].nice_length,e.max_chain_length=h[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=x-1,e.match_available=0,e.ins_h=0}(e.state),t}function Y(e,t,r,n,i,s){if(!e)return _;var a=1;if(t===g&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||y<i||r!==v||n<8||15<n||t<0||9<t||s<0||b<s)return R(e,_);8===n&&(n=9);var o=new H;return(e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new c.Buf8(2*o.w_size),o.head=new c.Buf16(o.hash_size),o.prev=new c.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new c.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,K(e)}h=[new M(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(j(e),0===e.lookahead&&t===l)return A;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return A;if(e.strstart-e.block_start>=e.w_size-z&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(e,t){return Y(e,t,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?_:(e.state.gzhead=t,m):_},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?R(e,_):_;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&t!==f)return R(e,0===e.avail_out?-5:_);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===C)if(2===n.wrap)e.adler=0,U(n,31),U(n,139),U(n,8),n.gzhead?(U(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),U(n,255&n.gzhead.time),U(n,n.gzhead.time>>8&255),U(n,n.gzhead.time>>16&255),U(n,n.gzhead.time>>24&255),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(U(n,255&n.gzhead.extra.length),U(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(U(n,0),U(n,0),U(n,0),U(n,0),U(n,0),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,3),n.status=E);else{var a=v+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=E,P(n,a),0!==n.strstart&&(P(n,e.adler>>>16),P(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending!==n.pending_buf_size));)U(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103)}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&F(e),n.pending+2<=n.pending_buf_size&&(U(n,255&e.adler),U(n,e.adler>>8&255),e.adler=0,n.status=E)):n.status=E),0!==n.pending){if(F(e),0===e.avail_out)return n.last_flush=-1,m}else if(0===e.avail_in&&T(t)<=T(r)&&t!==f)return R(e,-5);if(666===n.status&&0!==e.avail_in)return R(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==l&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(j(e),0===e.lookahead)){if(t===l)return A;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=S){if(j(e),e.lookahead<=S&&t===l)return A;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=x&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+S;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=S-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=x?(r=u._tr_tally(e,1,e.match_length-x),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):h[n.level].func(n,t);if(o!==O&&o!==B||(n.status=666),o===A||o===O)return 0===e.avail_out&&(n.last_flush=-1),m;if(o===I&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(D(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),F(e),0===e.avail_out))return n.last_flush=-1,m}return t!==f?m:n.wrap<=0?1:(2===n.wrap?(U(n,255&e.adler),U(n,e.adler>>8&255),U(n,e.adler>>16&255),U(n,e.adler>>24&255),U(n,255&e.total_in),U(n,e.total_in>>8&255),U(n,e.total_in>>16&255),U(n,e.total_in>>24&255)):(P(n,e.adler>>>16),P(n,65535&e.adler)),F(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?m:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==C&&69!==t&&73!==t&&91!==t&&103!==t&&t!==E&&666!==t?R(e,_):(e.state=null,t===E?R(e,-3):m):_},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,h,u,l=t.length;if(!e||!e.state)return _;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(e.adler=d(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new c.Buf8(r.w_size),c.arraySet(u,t,l-r.w_size,r.w_size,0),t=u,l=r.w_size),a=e.avail_in,o=e.next_in,h=e.input,e.avail_in=l,e.next_in=0,e.input=t,j(r);r.lookahead>=x;){for(n=r.strstart,i=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+x-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,e.next_in=o,e.input=h,e.avail_in=a,r.wrap=s,m},r.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./messages\":51,\"./trees\":52}],47:[function(e,t,r){\"use strict\";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){\"use strict\";t.exports=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,C=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,c=r.window,d=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=m[d&g];t:for(;;){if(d>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg=\"invalid literal/length code\",r.mode=30;break e}w=65535&v,(y&=15)&&(p<y&&(d+=z[n++]<<p,p+=8),w+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=_[d&b];r:for(;;){if(d>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue r}e.msg=\"invalid distance code\",r.mode=30;break e}if(k=65535&v,p<(y&=15)&&(d+=z[n++]<<p,(p+=8)<y&&(d+=z[n++]<<p,p+=8)),h<(k+=d&(1<<y)-1)){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(d>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(S=c,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=c[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=c[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(n<i&&s<o);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=d,r.bits=p}},{}],49:[function(e,t,r){\"use strict\";var I=e(\"../utils/common\"),O=e(\"./adler32\"),B=e(\"./crc32\"),R=e(\"./inffast\"),T=e(\"./inftrees\"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg=\"\",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function h(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=h(e,t))!==N&&(e.state=null),r):U}var l,f,c=!0;function j(e){if(c){var t;for(l=new I.Buf32(512),f=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(D,e.lens,0,288,l,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,f,0,e.work,{bits:5}),c=!1}e.lencode=l,e.lenbits=9,e.distcode=f,e.distbits=5}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,f=o,c=h,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg=\"incorrect header check\",r.mode=30;break}if(8!=(15&u)){e.msg=\"unknown compression method\",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg=\"invalid window size\",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){e.msg=\"unknown compression method\",r.mode=30;break}if(57344&r.flags){e.msg=\"unknown header flags set\",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(d=r.length)&&(d=o),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,d,k)),512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(65535&r.check)){e.msg=\"header crc mismatch\",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}e.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,l-=2;break e;case 2:r.mode=17;break;case 3:e.msg=\"invalid block type\",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){e.msg=\"invalid stored block lengths\",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(o<d&&(d=o),h<d&&(d=h),0===d)break e;I.arraySet(i,n,s,d,a),o-=d,s+=d,h-=d,a+=d,r.length-=d;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){e.msg=\"too many length or distance symbols\",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid code lengths set\",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){e.msg=\"invalid bit length repeat\",r.mode=30;break}k=r.lens[r.have-1],d=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+d>r.nlen+r.ndist){e.msg=\"invalid bit length repeat\",r.mode=30;break}for(;d--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg=\"invalid code -- missing end-of-block\",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid literal/lengths set\",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg=\"invalid distances set\",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=h){e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,R(e,c),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg=\"invalid literal/length code\",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){e.msg=\"invalid distance code\",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg=\"invalid distance too far back\",r.mode=30;break}r.mode=25;case 25:if(0===h)break e;if(d=c-h,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break}p=d>r.wnext?(d-=r.wnext,r.wsize-d):r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=i,p=a-r.offset,d=r.length;for(h<d&&(d=h),h-=d,r.length-=d;i[a++]=m[p++],--d;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break e;i[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break e;o--,u|=n[s++]<<l,l+=8}if(c-=h,e.total_out+=c,r.total+=c,c&&(e.adler=r.check=r.flags?B(r.check,i,c,a-c):O(r.check,i,c,a-c)),c=h,(r.flags?u:L(u))!==r.check){e.msg=\"incorrect data check\",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(4294967295&r.total)){e.msg=\"incorrect length check\",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return-4;case 32:default:return U}return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,(r.wsize||c!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,c-e.avail_out)?(r.mode=31,-4):(f-=e.avail_in,c-=e.avail_out,e.total_in+=f,e.total_out+=c,r.total+=c,r.wrap&&c&&(e.adler=r.check=r.flags?B(r.check,i,c,e.next_out-c):O(r.check,i,c,e.next_out-c)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===c||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./inffast\":48,\"./inftrees\":50}],50:[function(e,t,r){\"use strict\";var D=e(\"../utils/common\"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var h,u,l,f,c,d,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<n;v++)O[t[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===e||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<n;v++)0!==t[r+v]&&(a[B[t[r+v]]++]=v);if(d=0===e?(A=R=a,19):1===e?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,c=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===e&&852<C||2===e&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<d?(m=0,a[v]):a[v]>d?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;i[c+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=t[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),c+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===e&&852<C||2===e&&592<C)return 1;i[l=E&f]=k<<24|x<<16|c-s|0}}return 0!==E&&(i[c+E]=b-S<<24|64<<16|0),o.bits=k,0}},{\"../utils/common\":41}],51:[function(e,t,r){\"use strict\";t.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],52:[function(e,t,r){\"use strict\";var i=e(\"../utils/common\"),o=0,h=1;function n(e){for(var t=e.length;0<=--t;)e[t]=0}var s=0,a=29,u=256,l=u+1+a,f=30,c=19,_=2*l+1,g=15,d=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));n(z);var C=new Array(2*f);n(C);var E=new Array(512);n(E);var A=new Array(256);n(A);var I=new Array(a);n(I);var O,B,R,T=new Array(f);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function N(e){return e<256?E[e]:E[256+(e>>>7)]}function U(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function P(e,t,r){e.bi_valid>d-r?(e.bi_buf|=t<<e.bi_valid&65535,U(e,e.bi_buf),e.bi_buf=t>>d-e.bi_valid,e.bi_valid+=r-d):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function L(e,t,r){P(e,r[2*t],r[2*t+1])}function j(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function Z(e,t,r){var n,i,s=new Array(g+1),a=0;for(n=1;n<=g;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=j(s[o]++,o))}}function W(e){var t;for(t=0;t<l;t++)e.dyn_ltree[2*t]=0;for(t=0;t<f;t++)e.dyn_dtree[2*t]=0;for(t=0;t<c;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*m]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function M(e){8<e.bi_valid?U(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function H(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function G(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&H(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!H(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function K(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?L(e,i,t):(L(e,(s=A[i])+u+1,t),0!==(a=w[s])&&P(e,i-=I[s],a),L(e,s=N(--n),r),0!==(a=k[s])&&P(e,n-=T[s],a)),o<e.last_lit;);L(e,m,t)}function Y(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,h=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)G(e,s,r);for(i=h;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],G(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,G(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,h=t.dyn_tree,u=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,c=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=g;s++)e.bl_count[s]=0;for(h[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)p<(s=h[2*h[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),h[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,d<=n&&(a=c[n-d]),o=h[2*n],e.opt_len+=o*(s+a),f&&(e.static_len+=o*(l[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(h[2*i+1]!==s&&(e.opt_len+=(s-h[2*i+1])*h[2*i],h[2*i+1]=s),n--)}}(e,t),Z(s,u,e.bl_count)}function X(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<h&&i===a||(o<u?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*b]++):o<=10?e.bl_tree[2*v]++:e.bl_tree[2*y]++,s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4))}function V(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<h&&i===a)){if(o<u)for(;L(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(L(e,i,e.bl_tree),o--),L(e,b,e.bl_tree),P(e,o-3,2)):o<=10?(L(e,v,e.bl_tree),P(e,o-3,3)):(L(e,y,e.bl_tree),P(e,o-11,7));s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4)}}n(T);var q=!1;function J(e,t,r,n){P(e,(s<<1)+(n?1:0),3),function(e,t,r,n){M(e),n&&(U(e,r),U(e,~r)),i.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}r._tr_init=function(e){q||(function(){var e,t,r,n,i,s=new Array(g+1);for(n=r=0;n<a-1;n++)for(I[n]=r,e=0;e<1<<w[n];e++)A[r++]=n;for(A[r-1]=n,n=i=0;n<16;n++)for(T[n]=i,e=0;e<1<<k[n];e++)E[i++]=n;for(i>>=7;n<f;n++)for(T[n]=i<<7,e=0;e<1<<k[n]-7;e++)E[256+i++]=n;for(t=0;t<=g;t++)s[t]=0;for(e=0;e<=143;)z[2*e+1]=8,e++,s[8]++;for(;e<=255;)z[2*e+1]=9,e++,s[9]++;for(;e<=279;)z[2*e+1]=7,e++,s[7]++;for(;e<=287;)z[2*e+1]=8,e++,s[8]++;for(Z(z,l+1,s),e=0;e<f;e++)C[2*e+1]=5,C[2*e]=j(e,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,c,p)}(),q=!0),e.l_desc=new F(e.dyn_ltree,O),e.d_desc=new F(e.dyn_dtree,B),e.bl_desc=new F(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,W(e)},r._tr_stored_block=J,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return o;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return h;for(t=32;t<u;t++)if(0!==e.dyn_ltree[2*t])return h;return o}(e)),Y(e,e.l_desc),Y(e,e.d_desc),a=function(e){var t;for(X(e,e.dyn_ltree,e.l_desc.max_code),X(e,e.dyn_dtree,e.d_desc.max_code),Y(e,e.bl_desc),t=c-1;3<=t&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?J(e,t,r,n):4===e.strategy||s===i?(P(e,2+(n?1:0),3),K(e,z,C)):(P(e,4+(n?1:0),3),function(e,t,r,n){var i;for(P(e,t-257,5),P(e,r-1,5),P(e,n-4,4),i=0;i<n;i++)P(e,e.bl_tree[2*S[i]+1],3);V(e,e.dyn_ltree,t-1),V(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),K(e,e.dyn_ltree,e.dyn_dtree)),W(e),n&&M(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(A[r]+u+1)]++,e.dyn_dtree[2*N(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){P(e,2,3),L(e,m,z),function(e){16===e.bi_valid?(U(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{\"../utils/common\":41}],53:[function(e,t,r){\"use strict\";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(e){!function(r,n){\"use strict\";if(!r.setImmediate){var i,s,t,a,o=1,h={},u=!1,l=r.document,e=Object.getPrototypeOf&&Object.getPrototypeOf(r);e=e&&e.setTimeout?e:r,i=\"[object process]\"==={}.toString.call(r.process)?function(e){process.nextTick(function(){c(e)})}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1},r.postMessage(\"\",\"*\"),r.onmessage=t,e}}()?(a=\"setImmediate$\"+Math.random()+\"$\",r.addEventListener?r.addEventListener(\"message\",d,!1):r.attachEvent(\"onmessage\",d),function(e){r.postMessage(a+e,\"*\")}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){c(e.data)},function(e){t.port2.postMessage(e)}):l&&\"onreadystatechange\"in l.createElement(\"script\")?(s=l.documentElement,function(e){var t=l.createElement(\"script\");t.onreadystatechange=function(){c(e),t.onreadystatechange=null,s.removeChild(t),t=null},s.appendChild(t)}):function(e){setTimeout(c,0,e)},e.setImmediate=function(e){\"function\"!=typeof e&&(e=new Function(\"\"+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return h[o]=n,i(o),o++},e.clearImmediate=f}function f(e){delete h[e]}function c(e){if(u)setTimeout(c,0,e);else{var t=h[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),u=!1}}}}function d(e){e.source===r&&\"string\"==typeof e.data&&0===e.data.indexOf(a)&&c(+e.data.slice(a.length))}}(\"undefined\"==typeof self?void 0===e?this:e:self)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[10])(10)});","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","import JSZip from \"jszip\";\nimport {IuploadfileList} from \"./ICommon\";\nimport {getBinaryContent} from \"./common/method\"\n\n\nexport class HandleZip{\n    uploadFile:File; \n    workBook:JSZip; \n    \n    constructor(file?:File){\n        // Support nodejs fs to read files\n        // if(file instanceof File){\n            this.uploadFile = file;\n        // }\n    }\n\n    unzipFile(successFunc:(file:IuploadfileList)=>void, errorFunc:(err:Error)=>void):void { \n        // var new_zip:JSZip = new JSZip();\n        JSZip.loadAsync(this.uploadFile)                                   // 1) read the Blob\n        .then(function(zip:any) {\n            let fileList:IuploadfileList = <IuploadfileList>{}, lastIndex:number = Object.keys(zip.files).length, index:number=0;\n            zip.forEach(function (relativePath:any, zipEntry:any) {  // 2) print entries\n                let fileName = zipEntry.name;\n                let fileNameArr = fileName.split(\".\");\n                let suffix = fileNameArr[fileNameArr.length-1].toLowerCase();\n                let fileType = \"string\";\n                if(suffix in {\"png\":1, \"jpeg\":1, \"jpg\":1, \"gif\":1,\"bmp\":1,\"tif\":1,\"webp\":1,}){\n                    fileType = \"base64\";\n                }\n                else if(suffix==\"emf\"){\n                    fileType = \"arraybuffer\";\n                }\n                zipEntry.async(fileType).then(function (data:string) {\n                    if(fileType==\"base64\"){\n                        data = \"data:image/\"+ suffix +\";base64,\" + data;\n                    }\n                    fileList[zipEntry.name] = data;\n                    // console.log(lastIndex, index);\n                    if(lastIndex==index+1){\n                        successFunc(fileList);\n                    }\n                    index++;\n                });\n            });\n            \n        }, function (e:Error) {\n            errorFunc(e);\n        });\n    }\n\n    unzipFileByUrl(url:string,successFunc:(file:IuploadfileList)=>void, errorFunc:(err:Error)=>void):void { \n        var new_zip:JSZip = new JSZip();\n        getBinaryContent(url, function(err:any, data:any) {\n            if(err) {\n                throw err; // or handle err\n            }\n        \n            JSZip.loadAsync(data).then(function(zip:any) {\n                let fileList:IuploadfileList = <IuploadfileList>{}, lastIndex:number = Object.keys(zip.files).length, index:number=0;\n                zip.forEach(function (relativePath:any, zipEntry:any) {  // 2) print entries\n                    let fileName = zipEntry.name;\n                    let fileNameArr = fileName.split(\".\");\n                    let suffix = fileNameArr[fileNameArr.length-1].toLowerCase();\n                    let fileType = \"string\";\n                    if(suffix in {\"png\":1, \"jpeg\":1, \"jpg\":1, \"gif\":1,\"bmp\":1,\"tif\":1,\"webp\":1,}){\n                        fileType = \"base64\";\n                    }\n                    else if(suffix==\"emf\"){\n                        fileType = \"arraybuffer\";\n                    }\n                    zipEntry.async(fileType).then(function (data:any) {\n                        if(fileType==\"base64\"){\n                            data = \"data:image/\"+ suffix +\";base64,\" + data;\n                        }\n                        fileList[zipEntry.name] = data;\n                        // console.log(lastIndex, index);\n                        if(lastIndex==index+1){\n                            successFunc(fileList);\n                        }\n                        index++;\n                    });\n                });\n                \n            }, function (e:Error) {\n                errorFunc(e);\n            });\n        });\n        \n    }\n\n    newZipFile():void { \n        var zip = new JSZip();\n        this.workBook =  zip;\n    }\n\n    //title:\"nested/hello.txt\", content:\"Hello Worldasdfasfasdfasfasfasfasfasdfas\"\n    addToZipFile(title:string,content:string):void { \n        if(this.workBook==null){\n            var zip = new JSZip();\n            this.workBook =  zip;\n        }\n        this.workBook.file(title, content);\n    }\n}","import { ILuckyFile, ILuckyFileInfo,IluckySheet,IluckySheetCelldata,IluckySheetConfig,IluckySheetCelldataValue,IluckySheetCelldataValueMerge,ILuckySheetCellFormat,IluckySheetConfigMerges,IluckySheetConfigMerge,IMapluckySheetborderInfoCellForImp,IluckySheetborderInfoCellValue,IluckySheetborderInfoCellValueStyle,IluckySheetborderInfoCellForImp,IluckySheetRowAndColumnLen,IluckySheetRowAndColumnHidden,IluckySheetSelection,IluckysheetFrozen,IluckySheetChart,IluckySheetPivotTable,IluckysheetConditionFormat,IluckysheetCalcChain,ILuckyInlineString,IluckyImage,IluckyImageBorder,IluckyImageCrop,IluckyImageDefault,IluckyImages, IluckysheetHyperlink, IluckysheetDataVerification} from \"./ILuck\";\n\n\n\nexport class LuckyFileBase implements ILuckyFile {\n    info:ILuckyFileInfo\n    sheets:IluckySheet[]\n}\n\nexport class LuckySheetBase implements IluckySheet{\n    name:string\n    color:string\n    config:IluckySheetConfig\n    index:string\n    status:string\n    order:string\n    row:number\n    column:number\n    luckysheet_select_save:IluckySheetSelection[]\n    scrollLeft:number\n    scrollTop:number\n    zoomRatio:number\n    showGridLines:string\n    defaultColWidth:number\n    defaultRowHeight:number\n\n    celldata:IluckySheetCelldata[]\n    chart:IluckySheetChart[]\n\n    isPivotTable:boolean\n    pivotTable:IluckySheetPivotTable\n\n    luckysheet_conditionformat_save:IluckysheetConditionFormat[]\n    freezen:IluckysheetFrozen\n\n    calcChain:IluckysheetCalcChain[]\n\n    images:IluckyImages\n    \n    dataVerification: IluckysheetDataVerification;\n    hyperlink: IluckysheetHyperlink\n    hide: number;\n    \n}\n\nexport class LuckyFileInfo implements ILuckyFileInfo{\n    name:string\n    creator:string\n    lastmodifiedby:string\n    createdTime:string\n    modifiedTime:string\n    company:string\n    appversion:string\n}\n\nexport class LuckySheetCelldataBase implements IluckySheetCelldata{\n    r:number\n    c:number\n    v:IluckySheetCelldataValue | string | null\n}\n\nexport class LuckySheetCelldataValue implements IluckySheetCelldataValue{\n    ct: LuckySheetCellFormat | undefined //celltype,Cell value format: text, time, etc. numfmts\n    bg: string | undefined//background,#fff000,\tfill\n    ff: string | undefined//fontfamily, fonts\n    fc: string | undefined//fontcolor fonts\n    bl: number | undefined//Bold, fonts\n    it: number | undefined//italic, fonts\n    fs: number | undefined//font size, fonts\n    cl: number | undefined//strike, 0 Regular, 1 strikes, fonts\n    un: number | undefined//underline, 0 Regular, 1 underlines, fonts\n    vt: number | undefined//Vertical alignment, 0 middle, 1 up, 2 down, alignment\n    ht: number | undefined//Horizontal alignment,0 center, 1 left, 2 right, alignment\n    mc: IluckySheetCelldataValueMerge | undefined //Merge Cells, mergeCells\n    tr: number | undefined //Text rotation,0: 0、3 Vertical text alignment\n    tb: number | undefined //Text wrap,0 truncation, 1 overflow, 2 word wrap, alignment\n    v: string | undefined //Original value, v\n    m: string | undefined //Display value, v\n    f: string | undefined //formula, f\n    rt:number | undefined //text rotation angle 0-180 alignment\n    qp:number | undefined //quotePrefix, show number as string\n}\n\n\nexport class LuckySheetCellFormat implements ILuckySheetCellFormat {\n    fa:string\n    t:string\n    s:LuckyInlineString[] | undefined\n}\n\nexport class LuckyInlineString implements ILuckyInlineString {\n    ff:string | undefined //font family\n    fc:string | undefined//font color\n    fs:number | undefined//font size\n    cl:number | undefined//strike\n    un:number | undefined//underline\n    bl:number | undefined//blod\n    it:number | undefined//italic\n    va:number | undefined//1sub and 2super and 0none\n    v:string | undefined\n}\n\nexport class LuckyConfig implements IluckySheetConfig{\n    merge:IluckySheetConfigMerges\n    borderInfo:IluckySheetborderInfoCellForImp[]\n    // _borderInfo: IMapluckySheetborderInfoCellForImp\n    rowlen:IluckySheetRowAndColumnLen\n    columnlen:IluckySheetRowAndColumnLen\n    rowhidden:IluckySheetRowAndColumnHidden\n    colhidden:IluckySheetRowAndColumnHidden\n\n    customHeight:IluckySheetRowAndColumnHidden\n    customWidth:IluckySheetRowAndColumnHidden\n}\n\nexport class LuckySheetborderInfoCellForImp implements IluckySheetborderInfoCellForImp{\n    rangeType:string\n    // cells:string[]\n    value:IluckySheetborderInfoCellValue\n}\n\nexport class LuckySheetborderInfoCellValue implements IluckySheetborderInfoCellValue{\n    row_index: number\n    col_index: number\n    l: IluckySheetborderInfoCellValueStyle\n    r: IluckySheetborderInfoCellValueStyle\n    t: IluckySheetborderInfoCellValueStyle\n    b: IluckySheetborderInfoCellValueStyle\n}\n\nexport class LuckySheetborderInfoCellValueStyle implements IluckySheetborderInfoCellValueStyle{\n    \"style\": number\n    \"color\": string\n}\n\nexport class LuckySheetConfigMerge implements IluckySheetConfigMerge{\n    r: number\n    c: number\n    rs: number\n    cs: number\n}\n\nexport class LuckysheetCalcChain implements IluckysheetCalcChain{\n    r:number\n    c:number\n    index:string | undefined\n}\n\n\nexport class LuckyImageBase implements IluckyImage{\n    border: IluckyImageBorder\n    crop: IluckyImageCrop\n    default: IluckyImageDefault\n\n    fixedLeft: number\n    fixedTop: number\n    isFixedPos: Boolean\n    originHeight: number\n    originWidth: number\n    src: string\n    type: string\n}","import { IluckySheetborderInfoCellForImp,IluckySheetCelldataValue,IluckySheetCelldataValueMerge,ILuckySheetCellFormat } from \"./ILuck\";\nimport { ReadXml, Element, IStyleCollections,getColor,getlineStringAttr } from \"./ReadXml\";\nimport {getXmlAttibute, getColumnWidthPixel, getRowHeightPixel,getcellrange, escapeCharacter, isChinese, isJapanese, isKoera,isContainMultiType} from \"../common/method\";\nimport { ST_CellType, indexedColors, OEM_CHARSET,borderTypes,fontFamilys } from \"../common/constant\"\nimport { IattributeList, stringToNum } from \"../ICommon\";\nimport { LuckySheetborderInfoCellValueStyle,LuckySheetborderInfoCellForImp,LuckySheetborderInfoCellValue,LuckySheetCelldataBase,LuckySheetCelldataValue,LuckySheetCellFormat,LuckyInlineString } from \"./LuckyBase\";\n\nexport class LuckySheetCelldata extends LuckySheetCelldataBase{\n    _borderObject:IluckySheetborderInfoCellForImp\n    _fomulaRef:string\n    _formulaSi:string\n    _formulaType:string\n\n    private sheetFile:string\n    private readXml:ReadXml\n    private cell:Element\n    private styles:IStyleCollections\n    private sharedStrings:Element[]\n    private mergeCells:Element[]\n\n    constructor(cell:Element, styles:IStyleCollections, sharedStrings:Element[], mergeCells:Element[], sheetFile:string, ReadXml:ReadXml){\n        //Private\n        super();\n        this.cell = cell;\n        this.sheetFile = sheetFile;\n        this.styles = styles;\n        this.sharedStrings = sharedStrings;\n        this.readXml = ReadXml;\n        this.mergeCells = mergeCells;\n\n        let attrList = cell.attributeList;\n        let r = attrList.r, s = attrList.s, t = attrList.t;\n        let range = getcellrange(r);\n\n        this.r = range.row[0];\n        this.c = range.column[0];\n        this.v = this.generateValue(s, t);\n\n    }\n\n    /**\n    * @param s Style index ,start 1\n    * @param t Cell type, Optional value is ST_CellType, it's found at constat.ts\n    */\n    private generateValue(s:string, t:string){\n        let v = this.cell.getInnerElements(\"v\");\n        let f = this.cell.getInnerElements(\"f\");\n\n        if(v==null){\n            v = this.cell.getInnerElements(\"t\");\n        }\n\n        let cellXfs = this.styles[\"cellXfs\"] as Element[];\n        let cellStyleXfs = this.styles[\"cellStyleXfs\"] as Element[];\n        let cellStyles = this.styles[\"cellStyles\"] as Element[];\n        let fonts = this.styles[\"fonts\"] as Element[];\n        let fills = this.styles[\"fills\"] as Element[];\n        let borders = this.styles[\"borders\"] as Element[];\n        let numfmts = this.styles[\"numfmts\"] as IattributeList;\n        let clrScheme = this.styles[\"clrScheme\"] as Element[];\n\n        let sharedStrings = this.sharedStrings;\n        let cellValue = new LuckySheetCelldataValue();\n\n        if(f!=null){\n            let formula = f[0], attrList = formula.attributeList;\n            let t = attrList.t, ref = attrList.ref, si = attrList.si;\n            let formulaValue =f[0].value;\n            if(t==\"shared\"){\n                this._fomulaRef = ref;\n                this._formulaType = t;\n                this._formulaSi = si;\n            }\n            // console.log(ref, t, si);\n            if(ref!=null || (formulaValue!=null && formulaValue.length>0)){\n                formulaValue = escapeCharacter(formulaValue);\n                cellValue.f = \"=\" + formulaValue;\n            }\n\n        }\n\n        let familyFont = null;\n        let quotePrefix;\n        if(s!=null){\n            let sNum = parseInt(s);\n            let cellXf = cellXfs[sNum];\n            let xfId = cellXf.attributeList.xfId;\n\n            let numFmtId,fontId,fillId,borderId;\n            let horizontal,vertical, wrapText, textRotation, shrinkToFit, indent,applyProtection;\n\n            if(xfId!=null){\n                let cellStyleXf = cellStyleXfs[parseInt(xfId)];\n                let attrList = cellStyleXf.attributeList;\n\n                let applyNumberFormat = attrList.applyNumberFormat;\n                let applyFont = attrList.applyFont;\n                let applyFill = attrList.applyFill;\n                let applyBorder = attrList.applyBorder;\n                let applyAlignment = attrList.applyAlignment;\n                // let applyProtection = attrList.applyProtection;\n\n                applyProtection = attrList.applyProtection;\n                quotePrefix = attrList.quotePrefix;\n\n                if(applyNumberFormat!=\"0\" && attrList.numFmtId!=null){\n                    // if(attrList.numFmtId!=\"0\"){\n                        numFmtId = attrList.numFmtId;\n                    // }\n                }\n                if(applyFont!=\"0\" && attrList.fontId!=null){\n                    fontId = attrList.fontId;\n                }\n                if(applyFill!=\"0\" && attrList.fillId!=null){\n                    fillId = attrList.fillId;\n                }\n                if(applyBorder!=\"0\" && attrList.borderId!=null){\n                    borderId = attrList.borderId;\n                }\n                if(applyAlignment!=null && applyAlignment!=\"0\"){\n                    let alignment = cellStyleXf.getInnerElements(\"alignment\");\n                    if(alignment!=null){\n                        let attrList = alignment[0].attributeList;\n                        if(attrList.horizontal!=null){\n                            horizontal = attrList.horizontal;\n                        }\n                        if(attrList.vertical!=null){\n                            vertical = attrList.vertical;\n                        }\n                        if(attrList.wrapText!=null){\n                            wrapText = attrList.wrapText;\n                        }\n                        if(attrList.textRotation!=null){\n                            textRotation = attrList.textRotation;\n                        }\n                        if(attrList.shrinkToFit!=null){\n                            shrinkToFit = attrList.shrinkToFit;\n                        }\n                        if(attrList.indent!=null){\n                            indent = attrList.indent;\n                        }\n                    }\n                }\n            }\n\n            let applyNumberFormat = cellXf.attributeList.applyNumberFormat;\n            let applyFont = cellXf.attributeList.applyFont;\n            let applyFill = cellXf.attributeList.applyFill;\n            let applyBorder = cellXf.attributeList.applyBorder;\n            let applyAlignment = cellXf.attributeList.applyAlignment;\n\n            if(cellXf.attributeList.applyProtection!=null){\n                applyProtection = cellXf.attributeList.applyProtection;\n            }\n\n            if(cellXf.attributeList.quotePrefix!=null){\n                quotePrefix = cellXf.attributeList.quotePrefix;\n            }\n\n            if(applyNumberFormat!=\"0\" && cellXf.attributeList.numFmtId!=null){\n                numFmtId = cellXf.attributeList.numFmtId;\n            }\n            if(applyFont!=\"0\"){\n                fontId = cellXf.attributeList.fontId;\n            }\n            if(applyFill!=\"0\"){\n                fillId = cellXf.attributeList.fillId;\n            }\n            if(applyBorder!=\"0\"){\n                borderId =cellXf.attributeList.borderId;\n            }\n            if(applyAlignment!=\"0\"){\n                let alignment = cellXf.getInnerElements(\"alignment\");\n                if(alignment!=null && alignment.length>0){\n                    let attrList = alignment[0].attributeList;\n                    if(attrList.horizontal!=null){\n                        horizontal = attrList.horizontal;\n                    }\n                    if(attrList.vertical!=null){\n                        vertical = attrList.vertical;\n                    }\n                    if(attrList.wrapText!=null){\n                        wrapText = attrList.wrapText;\n                    }\n                    if(attrList.textRotation!=null){\n                        textRotation = attrList.textRotation;\n                    }\n                    if(attrList.shrinkToFit!=null){\n                        shrinkToFit = attrList.shrinkToFit;\n                    }\n                    if(attrList.indent!=null){\n                        indent = attrList.indent;\n                    }\n                }\n            }\n\n\n\n            if(numFmtId!=undefined){\n                let numf = numfmts[parseInt(numFmtId)];\n                let cellFormat = new LuckySheetCellFormat();\n                cellFormat.fa = escapeCharacter(numf);\n                // console.log(numf, numFmtId, this.v);\n                cellFormat.t = t || 'd';\n                cellValue.ct = cellFormat;\n            }\n\n            if(fillId!=undefined){\n                let fillIdNum = parseInt(fillId);\n                let fill  = fills[fillIdNum];\n                // console.log(cellValue.v);\n                let bg = this.getBackgroundByFill(fill, clrScheme);\n                if(bg!=null){\n                    cellValue.bg = bg;\n                }\n            }\n\n\n            if(fontId!=undefined){\n                let fontIdNum = parseInt(fontId);\n                let font = fonts[fontIdNum];\n                if(font!=null){\n                    let sz = font.getInnerElements(\"sz\");//font size\n                    let colors = font.getInnerElements(\"color\");//font color\n                    let family = font.getInnerElements(\"name\");//font family\n                    let familyOverrides = font.getInnerElements(\"family\");//font family will be overrided by name\n                    let charset = font.getInnerElements(\"charset\");//font charset\n                    let bolds = font.getInnerElements(\"b\");//font bold\n                    let italics = font.getInnerElements(\"i\");//font italic\n                    let strikes = font.getInnerElements(\"strike\");//font italic\n                    let underlines = font.getInnerElements(\"u\");//font italic\n\n                    if(sz!=null && sz.length>0){\n                        let fs = sz[0].attributeList.val;\n                        if(fs!=null){\n                            cellValue.fs = parseInt(fs);\n                        }\n\n                    }\n\n                    if(colors!=null && colors.length>0){\n                        let color = colors[0];\n                        let fc = getColor(color, this.styles, \"t\");\n                        if(fc!=null){\n                            cellValue.fc = fc;\n                        }\n                    }\n\n\n                    if(familyOverrides!=null && familyOverrides.length>0){\n                        let val = familyOverrides[0].attributeList.val;\n                        if(val!=null){\n                            familyFont = fontFamilys[val];\n                        }\n                    }\n\n                    if(family!=null && family.length>0){\n                        let val = family[0].attributeList.val;\n                        if(val!=null){\n                            cellValue.ff = val;\n                        }\n                    }\n\n\n                    if(bolds!=null && bolds.length>0){\n                        let bold = bolds[0].attributeList.val;\n                        if(bold==\"0\"){\n                            cellValue.bl =  0;\n                        }\n                        else{\n                            cellValue.bl =  1;\n                        }\n                    }\n\n                    if(italics!=null && italics.length>0){\n                        let italic = italics[0].attributeList.val;\n                        if(italic==\"0\"){\n                            cellValue.it =  0;\n                        }\n                        else{\n                            cellValue.it =  1;\n                        }\n                    }\n\n                    if(strikes!=null && strikes.length>0){\n                        let strike = strikes[0].attributeList.val;\n                        if(strike==\"0\"){\n                            cellValue.cl =  0;\n                        }\n                        else{\n                            cellValue.cl =  1;\n                        }\n                    }\n\n                    if(underlines!=null && underlines.length>0){\n                        let underline = underlines[0].attributeList.val;\n                        if(underline==\"single\"){\n                            cellValue.un =  1;\n                        }\n                        else if(underline==\"double\"){\n                            cellValue.un =  2;\n                        }\n                        else if(underline==\"singleAccounting\"){\n                            cellValue.un =  3;\n                        }\n                        else if(underline==\"doubleAccounting\"){\n                            cellValue.un =  4;\n                        }\n                        else{\n                            cellValue.un =  0;\n                        }\n                    }\n                }\n            }\n\n            // vt: number | undefined//Vertical alignment, 0 middle, 1 up, 2 down, alignment\n            // ht: number | undefined//Horizontal alignment,0 center, 1 left, 2 right, alignment\n            // tr: number | undefined //Text rotation,0: 0、1: 45 、2: -45、3 Vertical text、4: 90 、5: -90, alignment\n            // tb: number | undefined //Text wrap,0 truncation, 1 overflow, 2 word wrap, alignment\n\n            if(horizontal!=undefined){//Horizontal alignment\n                if(horizontal==\"center\"){\n                    cellValue.ht = 0;\n                }\n                else if(horizontal==\"centerContinuous\"){\n                    cellValue.ht = 0;//luckysheet unsupport\n                }\n                else if(horizontal==\"left\"){\n                    cellValue.ht = 1;\n                }\n                else if(horizontal==\"right\"){\n                    cellValue.ht = 2;\n                }\n                else if(horizontal==\"distributed\"){\n                    cellValue.ht = 0;//luckysheet unsupport\n                }\n                else if(horizontal==\"fill\"){\n                    cellValue.ht = 1;//luckysheet unsupport\n                }\n                else if(horizontal==\"general\"){\n                    cellValue.ht = 1;//luckysheet unsupport\n                }\n                else if(horizontal==\"justify\"){\n                    cellValue.ht = 0;//luckysheet unsupport\n                }\n                else{\n                    cellValue.ht = 1;\n                }\n            }\n\n            if(vertical!=undefined){//Vertical alignment\n                if(vertical==\"bottom\"){\n                    cellValue.vt = 2;\n                }\n                else if(vertical==\"center\"){\n                    cellValue.vt = 0;\n                }\n                else if(vertical==\"distributed\"){\n                    cellValue.vt = 0;//luckysheet unsupport\n                }\n                else if(vertical==\"justify\"){\n                    cellValue.vt = 0;//luckysheet unsupport\n                }\n                else if(vertical==\"top\"){\n                    cellValue.vt = 1;\n                }\n                else{\n                    cellValue.vt = 1;\n                }\n            }\n            else {\n                //sometimes bottom style is lost after setting it in excel\n                //when vertical is undefined set it to 2.\n                cellValue.vt = 2;\n            }\n\n            if(wrapText!=undefined){\n                if(wrapText==\"1\"){\n                    cellValue.tb = 2;\n                }\n                else{\n                    cellValue.tb = 1;\n                }\n            }\n            else{\n                cellValue.tb = 1;\n            }\n\n            if(textRotation!=undefined){\n                // tr: number | undefined //Text rotation,0: 0、1: 45 、2: -45、3 Vertical text、4: 90 、5: -90, alignment\n                if(textRotation==\"255\"){\n                    cellValue.tr = 3;\n                }\n                // else if(textRotation==\"45\"){\n                //     cellValue.tr = 1;\n                // }\n                // else if(textRotation==\"90\"){\n                //     cellValue.tr = 4;\n                // }\n                // else if(textRotation==\"135\"){\n                //     cellValue.tr = 2;\n                // }\n                // else if(textRotation==\"180\"){\n                //     cellValue.tr = 5;\n                // }\n                else{\n                    cellValue.tr = 0;\n                    cellValue.rt =  parseInt(textRotation);\n                }\n\n\n            }\n\n            if(shrinkToFit!=undefined){//luckysheet unsupport\n\n            }\n\n            if(indent!=undefined){//luckysheet unsupport\n\n            }\n\n            if(borderId!=undefined){\n                let borderIdNum = parseInt(borderId);\n                let border = borders[borderIdNum];\n                // this._borderId = borderIdNum;\n\n                let borderObject = new LuckySheetborderInfoCellForImp();\n                borderObject.rangeType = \"cell\";\n                // borderObject.cells = [];\n                let borderCellValue = new LuckySheetborderInfoCellValue();\n\n                borderCellValue.row_index = this.r;\n                borderCellValue.col_index = this.c;\n\n                let lefts = border.getInnerElements(\"left\");\n                let rights = border.getInnerElements(\"right\");\n                let tops = border.getInnerElements(\"top\");\n                let bottoms = border.getInnerElements(\"bottom\");\n                let diagonals = border.getInnerElements(\"diagonal\");\n\n                let starts = border.getInnerElements(\"start\");\n                let ends = border.getInnerElements(\"end\");\n\n                let left = this.getBorderInfo(lefts);\n                let right = this.getBorderInfo(rights);\n                let top = this.getBorderInfo(tops);\n                let bottom = this.getBorderInfo(bottoms);\n                let diagonal = this.getBorderInfo(diagonals);\n\n                let start = this.getBorderInfo(starts);\n                let end = this.getBorderInfo(ends);\n\n                let isAdd = false;\n\n                if(start!=null && start.color!=null){\n                    borderCellValue.l = start;\n                    isAdd = true;\n                }\n\n                if(end!=null && end.color!=null){\n                    borderCellValue.r = end;\n                    isAdd = true;\n                }\n\n                if(left!=null && left.color!=null){\n                    borderCellValue.l = left;\n                    isAdd = true;\n                }\n\n                if(right!=null && right.color!=null){\n                    borderCellValue.r = right;\n                    isAdd = true;\n                }\n\n                if(top!=null && top.color!=null){\n                    borderCellValue.t = top;\n                    isAdd = true;\n                }\n\n                if(bottom!=null && bottom.color!=null){\n                    borderCellValue.b = bottom;\n                    isAdd = true;\n                }\n\n                if(isAdd){\n                    borderObject.value = borderCellValue;\n                    // this.config._borderInfo[borderId] = borderObject;\n                    this._borderObject = borderObject;\n                }\n            }\n\n        }\n        else{\n            cellValue.tb = 1;\n        }\n\n        if(v!=null){\n            let value =v[0].value;\n\n            if(/&#\\d+;/.test(value)){\n                value = this.htmlDecode(value);\n            }\n\n            if(t==ST_CellType[\"SharedString\"]){\n                let siIndex = parseInt(v[0].value);\n                let sharedSI = sharedStrings[siIndex];\n\n                let rFlag = sharedSI.getInnerElements(\"r\");\n                if(rFlag==null){\n                    let tFlag = sharedSI.getInnerElements(\"t\");\n                    if(tFlag!=null){\n                        let text = \"\";\n                        tFlag.forEach((t)=>{\n                            text += t.value;\n                        });\n\n                        text = escapeCharacter(text);\n\n                        //isContainMultiType(text) &&\n                        if(familyFont==\"Roman\" && text.length>0){\n                            let textArray = text.split(\"\");\n                            let preWordType:string = null, wordText=\"\", preWholef:string=null;\n                            let wholef = \"Times New Roman\";\n                            if(cellValue.ff!=null){\n                                wholef = cellValue.ff;\n                            }\n\n                            let cellFormat = cellValue.ct;\n                            if(cellFormat==null){\n                                cellFormat = new LuckySheetCellFormat();\n                            }\n\n                            if(cellFormat.s==null){\n                                cellFormat.s = [];\n                            }\n\n                            for(let i=0;i<textArray.length;i++){\n                                let w = textArray[i];\n                                let type:string = null, ff=wholef;\n\n                                if(isChinese(w)){\n                                    type = \"c\";\n                                    ff=\"宋体\";\n                                }\n                                else if(isJapanese(w)){\n                                    type = \"j\";\n                                    ff=\"Yu Gothic\";\n                                }\n                                else if(isKoera(w)){\n                                    type = \"k\";\n                                    ff=\"Malgun Gothic\";\n                                }\n                                else{\n                                    type = \"e\";\n                                }\n\n                                if((type!=preWordType && preWordType!=null) || i==textArray.length-1){\n                                    let InlineString = new LuckyInlineString();\n\n                                    InlineString.ff = preWholef;\n\n                                    if(cellValue.fc!=null){\n                                        InlineString.fc = cellValue.fc;\n                                    }\n\n                                    if(cellValue.fs!=null){\n                                        InlineString.fs = cellValue.fs;\n                                    }\n\n                                    if(cellValue.cl!=null){\n                                        InlineString.cl = cellValue.cl;\n                                    }\n\n                                    if(cellValue.un!=null){\n                                        InlineString.un = cellValue.un;\n                                    }\n\n                                    if(cellValue.bl!=null){\n                                        InlineString.bl = cellValue.bl;\n                                    }\n\n                                    if(cellValue.it!=null){\n                                        InlineString.it = cellValue.it;\n                                    }\n\n                                    if(i==textArray.length-1){\n                                        if(type==preWordType){\n                                            InlineString.ff = ff;\n                                            InlineString.v = wordText + w;\n                                        }\n                                        else{\n                                            InlineString.ff = preWholef;\n                                            InlineString.v = wordText;\n                                            cellFormat.s.push(InlineString);\n\n                                            let InlineStringLast = new LuckyInlineString();\n                                            InlineStringLast.ff = ff;\n                                            InlineStringLast.v = w;\n                                            if(cellValue.fc!=null){\n                                                InlineStringLast.fc = cellValue.fc;\n                                            }\n\n                                            if(cellValue.fs!=null){\n                                                InlineStringLast.fs = cellValue.fs;\n                                            }\n\n                                            if(cellValue.cl!=null){\n                                                InlineStringLast.cl = cellValue.cl;\n                                            }\n\n                                            if(cellValue.un!=null){\n                                                InlineStringLast.un = cellValue.un;\n                                            }\n\n                                            if(cellValue.bl!=null){\n                                                InlineStringLast.bl = cellValue.bl;\n                                            }\n\n                                            if(cellValue.it!=null){\n                                                InlineStringLast.it = cellValue.it;\n                                            }\n                                            cellFormat.s.push(InlineStringLast);\n\n                                            break;\n                                        }\n                                    }\n                                    else{\n                                        InlineString.v = wordText;\n                                    }\n\n\n                                    cellFormat.s.push(InlineString);\n\n                                    wordText = w;\n                                }\n                                else{\n                                    wordText += w;\n                                }\n\n\n                                preWordType = type;\n                                preWholef = ff;\n                            }\n\n                            cellFormat.t = \"inlineStr\";\n                            // cellFormat.s = [InlineString];\n                            cellValue.ct = cellFormat;\n                            // console.log(cellValue);\n                        }\n                        else{\n\n\n                            text = this.replaceSpecialWrap(text);\n\n                            if(text.indexOf(\"\\r\\n\")>-1 || text.indexOf(\"\\n\")>-1){\n                                let InlineString = new LuckyInlineString();\n                                InlineString.v = text;\n                                let cellFormat = cellValue.ct;\n                                if(cellFormat==null){\n                                    cellFormat = new LuckySheetCellFormat();\n                                }\n\n                                if(cellValue.ff!=null){\n                                    InlineString.ff = cellValue.ff;\n                                }\n\n                                if(cellValue.fc!=null){\n                                    InlineString.fc = cellValue.fc;\n                                }\n\n                                if(cellValue.fs!=null){\n                                    InlineString.fs = cellValue.fs;\n                                }\n\n                                if(cellValue.cl!=null){\n                                    InlineString.cl = cellValue.cl;\n                                }\n\n                                if(cellValue.un!=null){\n                                    InlineString.un = cellValue.un;\n                                }\n\n                                if(cellValue.bl!=null){\n                                    InlineString.bl = cellValue.bl;\n                                }\n\n                                if(cellValue.it!=null){\n                                    InlineString.it = cellValue.it;\n                                }\n\n                                cellFormat.t = \"inlineStr\";\n                                cellFormat.s = [InlineString];\n                                cellValue.ct = cellFormat;\n                            }\n                            else{\n                                cellValue.v = text;\n                                quotePrefix = \"1\";\n                            }\n                        }\n\n                    }\n                }\n                else{\n                    let styles:LuckyInlineString[] = [];\n                    rFlag.forEach((r)=>{\n                        let tFlag = r.getInnerElements(\"t\");\n                        let rPr = r.getInnerElements(\"rPr\");\n\n                        let InlineString = new LuckyInlineString();\n\n                        if(tFlag!=null && tFlag.length>0){\n                            let text = tFlag[0].value;\n                            text = this.replaceSpecialWrap(text);\n                            text = escapeCharacter(text);\n                            InlineString.v = text;\n                        }\n\n                        if(rPr!=null && rPr.length>0){\n                            let frpr = rPr[0];\n                            let sz = getlineStringAttr(frpr,\"sz\"), rFont=getlineStringAttr(frpr,\"rFont\"), family=getlineStringAttr(frpr,\"family\"), charset=getlineStringAttr(frpr,\"charset\"), scheme=getlineStringAttr(frpr,\"scheme\"), b=getlineStringAttr(frpr,\"b\"), i=getlineStringAttr(frpr,\"i\"), u=getlineStringAttr(frpr,\"u\"), strike=getlineStringAttr(frpr,\"strike\"), vertAlign=getlineStringAttr(frpr,\"vertAlign\"), color;\n\n\n                            let cEle = frpr.getInnerElements(\"color\");\n                            if(cEle!=null && cEle.length>0){\n                                color = getColor(cEle[0],this.styles, \"t\");\n                            }\n\n\n                            let ff;\n                            // if(family!=null){\n                            //     ff = fontFamilys[family];\n                            // }\n                            if(rFont!=null){\n                                ff = rFont;\n                            }\n                            if(ff!=null){\n                                InlineString.ff = ff;\n                            }\n                            else if(cellValue.ff!=null){\n                                InlineString.ff = cellValue.ff;\n                            }\n\n                            if(color!=null){\n                                InlineString.fc = color;\n                            }\n                            else if(cellValue.fc!=null){\n                                InlineString.fc = cellValue.fc;\n                            }\n\n                            if(sz!=null){\n                                InlineString.fs = parseInt(sz);\n                            }\n                            else if(cellValue.fs!=null){\n                                InlineString.fs = cellValue.fs;\n                            }\n\n                            if(strike!=null){\n                                InlineString.cl = parseInt(strike);\n                            }\n                            else if(cellValue.cl!=null){\n                                InlineString.cl = cellValue.cl;\n                            }\n\n                            if(u!=null){\n                                InlineString.un = parseInt(u);\n                            }\n                            else if(cellValue.un!=null){\n                                InlineString.un = cellValue.un;\n                            }\n\n                            if(b!=null){\n                                InlineString.bl = parseInt(b);\n                            }\n                            else if(cellValue.bl!=null){\n                                InlineString.bl = cellValue.bl;\n                            }\n\n                            if(i!=null){\n                                InlineString.it = parseInt(i);\n                            }\n                            else if(cellValue.it!=null){\n                                InlineString.it = cellValue.it;\n                            }\n\n                            if(vertAlign!=null){\n                                InlineString.va = parseInt(vertAlign);\n                            }\n\n\n                            // ff:string | undefined //font family\n                            // fc:string | undefined//font color\n                            // fs:number | undefined//font size\n                            // cl:number | undefined//strike\n                            // un:number | undefined//underline\n                            // bl:number | undefined//blod\n                            // it:number | undefined//italic\n                            // v:string | undefined\n                        }\n                        else{\n                            if(InlineString.ff==null && cellValue.ff!=null){\n                                InlineString.ff = cellValue.ff;\n                            }\n\n                            if(InlineString.fc==null && cellValue.fc!=null){\n                                InlineString.fc = cellValue.fc;\n                            }\n\n                            if(InlineString.fs==null && cellValue.fs!=null){\n                                InlineString.fs = cellValue.fs;\n                            }\n\n                            if(InlineString.cl==null && cellValue.cl!=null){\n                                InlineString.cl = cellValue.cl;\n                            }\n\n                            if(InlineString.un==null && cellValue.un!=null){\n                                InlineString.un = cellValue.un;\n                            }\n\n                            if(InlineString.bl==null && cellValue.bl!=null){\n                                InlineString.bl = cellValue.bl;\n                            }\n\n                            if(InlineString.it==null && cellValue.it!=null){\n                                InlineString.it = cellValue.it;\n                            }\n                        }\n\n\n                        styles.push(InlineString);\n                    });\n\n                    let cellFormat = cellValue.ct;\n                    if(cellFormat==null){\n                        cellFormat = new LuckySheetCellFormat();\n                    }\n                    cellFormat.t = \"inlineStr\";\n                    cellFormat.s = styles;\n                    cellValue.ct = cellFormat;\n                }\n            }\n            // to be confirmed\n            else if(t==ST_CellType[\"InlineString\"] && v!=null){\n                cellValue.v = \"'\"+ value;\n            }\n            else {\n                value = escapeCharacter(value);\n                cellValue.v = value;\n            }\n        }\n\n        if(quotePrefix!=null){\n            cellValue.qp = parseInt(quotePrefix);\n        }\n\n        return cellValue;\n\n    }\n\n    private replaceSpecialWrap(text:string):string{\n        text = text.replace(/_x000D_/g, \"\").replace(/&#13;&#10;/g, \"\\r\\n\").replace(/&#13;/g, \"\\r\").replace(/&#10;/g, \"\\n\");\n        return text;\n    }\n\n\n    private getBackgroundByFill(fill:Element, clrScheme:Element[]):string|null{\n        let patternFills = fill.getInnerElements(\"patternFill\");\n        if(patternFills!=null){\n            let patternFill = patternFills[0];\n            let fgColors = patternFill.getInnerElements(\"fgColor\");\n            let bgColors = patternFill.getInnerElements(\"bgColor\");\n            let fg, bg;\n            if(fgColors!=null){\n                let fgColor = fgColors[0];\n                fg = getColor(fgColor, this.styles);\n            }\n\n            if(bgColors!=null){\n                let bgColor = bgColors[0];\n                bg = getColor(bgColor, this.styles);\n            }\n            // console.log(fgColors,bgColors,clrScheme);\n            if(fg!=null){\n                return fg;\n            }\n            else if(bg!=null){\n                return bg;\n            }\n        }\n        else{\n            let gradientfills = fill.getInnerElements(\"gradientFill\");\n            if(gradientfills!=null){\n                //graient color fill handler\n\n                return null;\n            }\n        }\n    }\n\n    private getBorderInfo(borders:Element[]):LuckySheetborderInfoCellValueStyle{\n        if(borders==null){\n            return null;\n        }\n\n        let border = borders[0], attrList = border.attributeList;\n        let clrScheme = this.styles[\"clrScheme\"] as Element[];\n        let style:string = attrList.style;\n        if(style==null || style==\"none\"){\n            return null;\n        }\n\n        let colors = border.getInnerElements(\"color\");\n        let colorRet = \"#000000\";\n        if(colors!=null){\n            let color = colors[0];\n            colorRet = getColor(color, this.styles, \"b\");\n            if(colorRet==null){\n                colorRet = \"#000000\";\n            }\n        }\n\n        let ret = new LuckySheetborderInfoCellValueStyle();\n        ret.style = borderTypes[style];\n        ret.color = colorRet;\n\n        return ret;\n    }\n\n    private htmlDecode (str:string):string {\n        return str.replace(/&#(x)?([^&]{1,5});/g,function($,$1,$2) {\n            return String.fromCharCode(parseInt($2 , $1 ? 16:10));\n        });\n    };\n\n}\n\n","﻿import { ILuckyFile,IluckySheetRowAndColumnHidden,IluckySheetRowAndColumnLen} from \"./ILuck\";\nimport { LuckySheet} from \"./LuckySheet\";\nimport {IuploadfileList, IattributeList} from \"../ICommon\";\nimport {workBookFile, coreFile, appFile, stylesFile, sharedStringsFile,numFmtDefault,theme1File,calcChainFile,workbookRels, numFmtDefaultMap} from \"../common/constant\";\nimport { ReadXml,IStyleCollections,Element } from \"./ReadXml\";\nimport {getXmlAttibute} from \"../common/method\";\nimport { LuckyFileBase,LuckyFileInfo,LuckySheetBase,LuckySheetCelldataBase,LuckySheetCelldataValue,LuckySheetCellFormat } from \"./LuckyBase\";\nimport {ImageList} from \"./LuckyImage\";\n\nexport class LuckyFile extends LuckyFileBase {\n\n    private files:IuploadfileList\n    private sheetNameList:IattributeList\n    private readXml:ReadXml\n    private fileName:string\n    private styles:IStyleCollections\n    private sharedStrings:Element[]\n    private calcChain:Element[]\n    private imageList:ImageList\n\n    constructor(files:IuploadfileList, fileName:string) {\n        super();\n        this.files = files;\n        this.fileName = fileName;\n        this.readXml = new ReadXml(files);\n        this.getSheetNameList();\n\n        this.sharedStrings = this.readXml.getElementsByTagName(\"sst/si\", sharedStringsFile);\n        this.calcChain = this.readXml.getElementsByTagName(\"calcChain/c\", calcChainFile);\n        this.styles = {};\n        this.styles[\"cellXfs\"] =  this.readXml.getElementsByTagName(\"cellXfs/xf\", stylesFile);\n        this.styles[\"cellStyleXfs\"] =  this.readXml.getElementsByTagName(\"cellStyleXfs/xf\", stylesFile);\n        this.styles[\"cellStyles\"] =  this.readXml.getElementsByTagName(\"cellStyles/cellStyle\", stylesFile);\n        this.styles[\"fonts\"] =  this.readXml.getElementsByTagName(\"fonts/font\", stylesFile);\n        this.styles[\"fills\"] =  this.readXml.getElementsByTagName(\"fills/fill\", stylesFile);\n        this.styles[\"borders\"] =  this.readXml.getElementsByTagName(\"borders/border\", stylesFile);\n        this.styles[\"clrScheme\"] =  this.readXml.getElementsByTagName(\"a:clrScheme/a:dk1|a:lt1|a:dk2|a:lt2|a:accent1|a:accent2|a:accent3|a:accent4|a:accent5|a:accent6|a:hlink|a:folHlink\", theme1File);\n        this.styles[\"indexedColors\"] =  this.readXml.getElementsByTagName(\"colors/indexedColors/rgbColor\", stylesFile);\n        this.styles[\"mruColors\"] =  this.readXml.getElementsByTagName(\"colors/mruColors/color\", stylesFile);\n\n        this.imageList = new ImageList(files);\n\n        let numfmts =  this.readXml.getElementsByTagName(\"numFmt/numFmt\", stylesFile);\n        let numFmtDefaultC = JSON.parse(JSON.stringify(numFmtDefault));\n        for(let i=0;i<numfmts.length;i++){\n            let attrList = numfmts[i].attributeList;\n            let numfmtid = getXmlAttibute(attrList, \"numFmtId\", \"49\");\n            let formatcode = getXmlAttibute(attrList, \"formatCode\", \"@\");\n            // console.log(numfmtid, formatcode);\n            if(!(numfmtid in numFmtDefault)){\n                numFmtDefaultC[numfmtid] = numFmtDefaultMap[formatcode] || formatcode;\n            }\n        }\n\n        // console.log(JSON.stringify(numFmtDefaultC), numfmts);\n        this.styles[\"numfmts\"] =  numFmtDefaultC;\n    }\n\n    /**\n    * @return All sheet name of workbook\n    */\n    private getSheetNameList(){\n        let workbookRelList = this.readXml.getElementsByTagName(\"Relationships/Relationship\", workbookRels);\n        if(workbookRelList==null){\n            return;\n        }\n\n        let regex = new RegExp(\"worksheets/[^/]*?.xml\");\n        let sheetNames:IattributeList = {};\n        for(let i=0;i<workbookRelList.length;i++){\n            let rel = workbookRelList[i], attrList = rel.attributeList;\n            let id = attrList[\"Id\"], target = attrList[\"Target\"];\n            if(regex.test(target)){\n                if(target.indexOf('/xl') === 0){\n                    sheetNames[id] =   target.substr(1);\n                }else{\n                    sheetNames[id] =   \"xl/\" + target;\n                }\n            }\n\n        }\n\n        this.sheetNameList = sheetNames;\n    }\n\n    /**\n    * @param sheetName WorkSheet'name\n    * @return sheet file name and path in zip\n    */\n   private getSheetFileBysheetId(sheetId:string){\n        // for(let i=0;i<this.sheetNameList.length;i++){\n        //     let sheetFileName = this.sheetNameList[i];\n        //     if(sheetFileName.indexOf(\"sheet\"+sheetId)>-1){\n        //         return sheetFileName;\n        //     }\n        // }\n        return this.sheetNameList[sheetId];\n    }\n\n    /**\n    * @return workBook information\n    */\n    getWorkBookInfo(){\n        let Company = this.readXml.getElementsByTagName(\"Company\", appFile);\n        let AppVersion = this.readXml.getElementsByTagName(\"AppVersion\", appFile);\n        let creator = this.readXml.getElementsByTagName(\"dc:creator\", coreFile);\n        let lastModifiedBy = this.readXml.getElementsByTagName(\"cp:lastModifiedBy\", coreFile);\n        let created = this.readXml.getElementsByTagName(\"dcterms:created\", coreFile);\n        let modified = this.readXml.getElementsByTagName(\"dcterms:modified\", coreFile);\n        this.info = new LuckyFileInfo();\n        this.info.name = this.fileName;\n        this.info.creator = creator.length>0?creator[0].value:\"\";\n        this.info.lastmodifiedby = lastModifiedBy.length>0?lastModifiedBy[0].value:\"\";\n        this.info.createdTime = created.length>0?created[0].value:\"\";\n        this.info.modifiedTime = modified.length>0?modified[0].value:\"\";\n        this.info.company = Company.length>0?Company[0].value:\"\";\n        this.info.appversion = AppVersion.length>0?AppVersion[0].value:\"\";\n    }\n\n    /**\n    * @return All sheet , include whole information\n    */\n    getSheetsFull(isInitialCell:boolean=true){\n        let sheets = this.readXml.getElementsByTagName(\"sheets/sheet\", workBookFile);\n        let sheetList:IattributeList = {};\n        for(let key in sheets){\n            let sheet = sheets[key];\n            sheetList[sheet.attributeList.name] = sheet.attributeList[\"sheetId\"];\n        }\n        this.sheets = [];\n        let order = 0;\n        for(let key in sheets){\n            let sheet = sheets[key];\n            let sheetName = sheet.attributeList.name;\n            let sheetId = sheet.attributeList[\"sheetId\"];\n            let rid = sheet.attributeList[\"r:id\"];\n            let sheetFile = this.getSheetFileBysheetId(rid);\n            let hide = sheet.attributeList.state === \"hidden\" ? 1 : 0;\n\n            let drawing = this.readXml.getElementsByTagName(\"worksheet/drawing\", sheetFile), drawingFile, drawingRelsFile;\n            if(drawing!=null && drawing.length>0){\n                let attrList = drawing[0].attributeList;\n                let rid = getXmlAttibute(attrList, \"r:id\", null);\n                if(rid!=null){\n                    drawingFile = this.getDrawingFile(rid, sheetFile);\n                    drawingRelsFile = this.getDrawingRelsFile(drawingFile);\n                }\n            }\n\n            if(sheetFile!=null){\n                let sheet = new LuckySheet(sheetName, sheetId, order, isInitialCell,\n                    {\n                        sheetFile:sheetFile,\n                        readXml:this.readXml,\n                        sheetList:sheetList,\n                        styles:this.styles,\n                        sharedStrings:this.sharedStrings,\n                        calcChain:this.calcChain,\n                        imageList:this.imageList,\n                        drawingFile:drawingFile,\n                        drawingRelsFile: drawingRelsFile,\n                        hide: hide,\n                    }\n                )\n                this.columnWidthSet = [];\n                this.rowHeightSet = [];\n\n                this.imagePositionCaculation(sheet);\n\n                this.sheets.push(sheet);\n                order++;\n            }\n        }\n    }\n\n    private columnWidthSet:number[] = [];\n    private rowHeightSet:number[] = [];\n\n    private extendArray(index:number, sets:number[],def:number, hidden:IluckySheetRowAndColumnHidden, lens:IluckySheetRowAndColumnLen){\n        if(index<sets.length){\n            return;\n        }\n\n        let startIndex = sets.length, endIndex = index;\n        let allGap = 0;\n        if(startIndex>0){\n            allGap = sets[startIndex-1];\n        }\n        // else{\n        //     sets.push(0);\n        // }\n        for(let i=startIndex;i<=endIndex;i++){\n            let gap = def, istring  = i.toString();\n            if(istring in hidden){\n                gap = 0;\n            }\n            else if(istring in lens){\n                gap = lens[istring];\n            }\n\n            allGap += Math.round(gap + 1);\n\n            sets.push(allGap);\n        }\n    }\n\n    private imagePositionCaculation(sheet:LuckySheet){\n        let images = sheet.images, defaultColWidth = sheet.defaultColWidth, defaultRowHeight = sheet.defaultRowHeight;\n        let colhidden = {};\n        if(sheet.config.colhidden){\n            colhidden = sheet.config.colhidden;\n        }\n\n        let columnlen = {};\n        if(sheet.config.columnlen){\n            columnlen = sheet.config.columnlen;\n        }\n\n        let rowhidden = {};\n        if(sheet.config.rowhidden){\n            rowhidden = sheet.config.rowhidden;\n        }\n\n        let rowlen = {};\n        if(sheet.config.rowlen){\n            rowlen = sheet.config.rowlen;\n        }\n\n        for(let key in images){\n            let imageObject:any = images[key];//Image, luckyImage\n            let fromCol = imageObject.fromCol;\n            let fromColOff = imageObject.fromColOff;\n            let fromRow = imageObject.fromRow;\n            let fromRowOff = imageObject.fromRowOff;\n\n            let toCol = imageObject.toCol;\n            let toColOff = imageObject.toColOff;\n            let toRow = imageObject.toRow;\n            let toRowOff = imageObject.toRowOff;\n\n            let x_n =0,y_n = 0;\n            let cx_n = 0, cy_n = 0;\n\n            if(fromCol>=this.columnWidthSet.length){\n                this.extendArray(fromCol, this.columnWidthSet, defaultColWidth, colhidden, columnlen);\n            }\n            if(fromCol==0){\n                x_n = 0;\n            }\n            else{\n                x_n = this.columnWidthSet[fromCol-1];\n            }\n            x_n = x_n + fromColOff;\n\n            if(fromRow>=this.rowHeightSet.length){\n                this.extendArray(fromRow, this.rowHeightSet, defaultRowHeight, rowhidden, rowlen);\n            }\n            if(fromRow==0){\n                y_n = 0;\n            }\n            else{\n                y_n = this.rowHeightSet[fromRow-1];\n            }\n            y_n = y_n + fromRowOff;\n\n\n            if(toCol>=this.columnWidthSet.length){\n                this.extendArray(toCol, this.columnWidthSet, defaultColWidth, colhidden, columnlen);\n            }\n            if(toCol==0){\n                cx_n = 0;\n            }\n            else{\n                cx_n = this.columnWidthSet[toCol-1];\n            }\n            cx_n = cx_n + toColOff- x_n;\n\n            if(toRow>=this.rowHeightSet.length){\n                this.extendArray(toRow, this.rowHeightSet, defaultRowHeight, rowhidden, rowlen);\n            }\n            if(toRow==0){\n                cy_n = 0;\n            }\n            else{\n                cy_n = this.rowHeightSet[toRow-1];\n            }\n\n            cy_n = cy_n + toRowOff - y_n;\n\n            console.log(defaultColWidth, colhidden , columnlen);\n            console.log(fromCol, this.columnWidthSet[fromCol] , fromColOff);\n            console.log(toCol, this.columnWidthSet[toCol] , toColOff, JSON.stringify(this.columnWidthSet));\n\n            imageObject.originWidth = cx_n;\n            imageObject.originHeight = cy_n;\n\n            imageObject.crop.height = cy_n;\n            imageObject.crop.width = cx_n;\n\n            imageObject.default.height = cy_n;\n            imageObject.default.left = x_n;\n            imageObject.default.top = y_n;\n            imageObject.default.width = cx_n;\n        }\n\n        //console.log(this.columnWidthSet, this.rowHeightSet);\n    }\n\n    /**\n    * @return drawing file string\n    */\n   private getDrawingFile(rid:string, sheetFile:string):string{\n        let sheetRelsPath = \"xl/worksheets/_rels/\";\n        let sheetFileArr = sheetFile.split(\"/\");\n        let sheetRelsName = sheetFileArr[sheetFileArr.length-1];\n\n        let sheetRelsFile = sheetRelsPath + sheetRelsName + \".rels\";\n\n        let drawing = this.readXml.getElementsByTagName(\"Relationships/Relationship\", sheetRelsFile);\n        if(drawing.length>0){\n            for(let i=0;i<drawing.length;i++){\n                let relationship = drawing[i];\n                let attrList = relationship.attributeList;\n                let relationshipId = getXmlAttibute(attrList, \"Id\", null);\n                if(relationshipId==rid){\n                    let target = getXmlAttibute(attrList, \"Target\", null);\n                    if(target!=null){\n                        return target.replace(/\\.\\.\\//g, \"\");\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n    private getDrawingRelsFile(drawingFile:string):string{\n        let drawingRelsPath = \"xl/drawings/_rels/\";\n        let drawingFileArr = drawingFile.split(\"/\");\n        let drawingRelsName = drawingFileArr[drawingFileArr.length-1];\n\n        let drawingRelsFile = drawingRelsPath + drawingRelsName + \".rels\";\n\n        return drawingRelsFile;\n    }\n\n    /**\n    * @return All sheet base information widthout cell and config\n    */\n    getSheetsWithoutCell(){\n        this.getSheetsFull(false);\n    }\n\n    /**\n    * @return LuckySheet file json\n    */\n    Parse():string{\n        // let xml = this.readXml;\n        // for(let key in this.sheetNameList){\n        //     let sheetName=this.sheetNameList[key];\n        //     let sheetColumns = xml.getElementsByTagName(\"row/c/f\", sheetName);\n        //     console.log(sheetColumns);\n        // }\n        // return \"\";\n\n        this.getWorkBookInfo();\n        this.getSheetsFull();\n\n        // for(let i=0;i<this.sheets.length;i++){\n        //     let sheet = this.sheets[i];\n        //     let _borderInfo = sheet.config._borderInfo;\n        //     if(_borderInfo==null){\n        //         continue;\n        //     }\n        //     let _borderInfoKeys = Object.keys(_borderInfo);\n        //     _borderInfoKeys.sort();\n        //     for(let a=0;a<_borderInfoKeys.length;a++){\n        //         let key = parseInt(_borderInfoKeys[a]);\n        //         let b = _borderInfo[key];\n        //         if(b.cells.length==0){\n        //             continue;\n        //         }\n        //         if(sheet.config.borderInfo==null){\n        //             sheet.config.borderInfo = [];\n        //         }\n        //         sheet.config.borderInfo.push(b);\n        //     }\n        // }\n\n        return this.toJsonString(this);\n    }\n\n    private toJsonString(file:ILuckyFile):string{\n        let LuckyOutPutFile = new LuckyFileBase();\n        LuckyOutPutFile.info = file.info;\n        LuckyOutPutFile.sheets = [];\n\n        file.sheets.forEach((sheet)=>{\n            let sheetout = new LuckySheetBase();\n            //let attrName = [\"name\",\"color\",\"config\",\"index\",\"status\",\"order\",\"row\",\"column\",\"luckysheet_select_save\",\"scrollLeft\",\"scrollTop\",\"zoomRatio\",\"showGridLines\",\"defaultColWidth\",\"defaultRowHeight\",\"celldata\",\"chart\",\"isPivotTable\",\"pivotTable\",\"luckysheet_conditionformat_save\",\"freezen\",\"calcChain\"];\n\n            if(sheet.name!=null){\n                sheetout.name = sheet.name;\n            }\n\n            if(sheet.color!=null){\n                sheetout.color = sheet.color;\n            }\n\n            if(sheet.config!=null){\n                sheetout.config = sheet.config;\n                // if(sheetout.config._borderInfo!=null){\n                //     delete sheetout.config._borderInfo;\n                // }\n            }\n\n            if(sheet.index!=null){\n                sheetout.index = sheet.index;\n            }\n\n            if(sheet.status!=null){\n                sheetout.status = sheet.status;\n            }\n\n            if(sheet.order!=null){\n                sheetout.order = sheet.order;\n            }\n\n            if(sheet.row!=null){\n                sheetout.row = sheet.row;\n            }\n\n            if(sheet.column!=null){\n                sheetout.column = sheet.column;\n            }\n\n            if(sheet.luckysheet_select_save!=null){\n                sheetout.luckysheet_select_save = sheet.luckysheet_select_save;\n            }\n\n            if(sheet.scrollLeft!=null){\n                sheetout.scrollLeft = sheet.scrollLeft;\n            }\n\n            if(sheet.scrollTop!=null){\n                sheetout.scrollTop = sheet.scrollTop;\n            }\n\n            if(sheet.zoomRatio!=null){\n                sheetout.zoomRatio = sheet.zoomRatio;\n            }\n\n            if(sheet.showGridLines!=null){\n                sheetout.showGridLines = sheet.showGridLines;\n            }\n\n            if(sheet.defaultColWidth!=null){\n                sheetout.defaultColWidth = sheet.defaultColWidth;\n            }\n\n            if(sheet.defaultRowHeight!=null){\n                sheetout.defaultRowHeight = sheet.defaultRowHeight;\n            }\n\n            if(sheet.celldata!=null){\n                // sheetout.celldata = sheet.celldata;\n                sheetout.celldata = [];\n                sheet.celldata.forEach((cell)=>{\n                    let cellout = new LuckySheetCelldataBase();\n                    cellout.r = cell.r;\n                    cellout.c = cell.c;\n                    cellout.v = cell.v;\n                    sheetout.celldata.push(cellout);\n                });\n            }\n\n            if(sheet.chart!=null){\n                sheetout.chart = sheet.chart;\n            }\n\n            if(sheet.isPivotTable!=null){\n                sheetout.isPivotTable = sheet.isPivotTable;\n            }\n\n            if(sheet.pivotTable!=null){\n                sheetout.pivotTable = sheet.pivotTable;\n            }\n\n            if(sheet.luckysheet_conditionformat_save!=null){\n                sheetout.luckysheet_conditionformat_save = sheet.luckysheet_conditionformat_save;\n            }\n\n            if(sheet.freezen!=null){\n                sheetout.freezen = sheet.freezen;\n            }\n\n            if(sheet.calcChain!=null){\n                sheetout.calcChain = sheet.calcChain;\n            }\n\n            if(sheet.images!=null){\n                sheetout.images = sheet.images;\n            }\n          \n            if (sheet.dataVerification != null){\n              sheetout.dataVerification = sheet.dataVerification;\n            }\n          \n            if (sheet.hyperlink != null){\n                sheetout.hyperlink = sheet.hyperlink;\n            }\n          \n            if (sheet.hide != null) {\n              sheetout.hide = sheet.hide;\n            }\n            \n            LuckyOutPutFile.sheets.push(sheetout);\n        });\n\n        return JSON.stringify(LuckyOutPutFile);\n    }\n\n\n}\n","import { IluckyImage } from \"./ILuck\";\nimport {LuckySheetCelldata} from \"./LuckyCell\";\nimport { IuploadfileList, IattributeList } from \"../ICommon\";\nimport {getXmlAttibute, getColumnWidthPixel, fromulaRef,getRowHeightPixel,getcellrange} from \"../common/method\";\nimport {borderTypes} from \"../common/constant\";\nimport { ReadXml, IStyleCollections, Element,getColor } from \"./ReadXml\";\nimport { LuckyImageBase } from \"./LuckyBase\";\nimport { UDOC,FromEMF,ToContext2D  } from \"../common/emf\";\n\n\nexport class ImageList {\n    private images:IattributeList\n    constructor(files:IuploadfileList) {\n        if(files==null){\n            return;\n        }\n        this.images = {};\n        for(let fileKey in files){\n            // let reg = new RegExp(\"xl/media/image1.png\", \"g\");\n            if(fileKey.indexOf(\"xl/media/\")>-1){\n                let fileNameArr = fileKey.split(\".\");\n                let suffix = fileNameArr[fileNameArr.length-1].toLowerCase();\n                if(suffix in {\"png\":1, \"jpeg\":1, \"jpg\":1, \"gif\":1,\"bmp\":1,\"tif\":1,\"webp\":1,\"emf\":1}){\n                    if(suffix==\"emf\"){\n                        var pNum  = 0;  // number of the page, that you want to render\n                        var scale = 1;  // the scale of the document\n                        var wrt = new ToContext2D(pNum, scale);\n                        var inp, out, stt;\n                        FromEMF.K = [];\n                        inp = FromEMF.C;   out = FromEMF.K;   stt=4;\n                        for(var p in inp) out[inp[p]] = p.slice(stt);\n                        FromEMF.Parse(files[fileKey], wrt);\n                        this.images[fileKey] = wrt.canvas.toDataURL(\"image/png\");\n                    }\n                    else{\n                        this.images[fileKey] = files[fileKey];\n                    }\n                    \n                }\n            }\n        }\n    }\n\n    getImageByName(pathName:string):Image{\n        if(pathName in this.images){\n            let base64 = this.images[pathName];\n            return new Image(pathName, base64);\n        }\n        return null;\n    }\n}\n\n\nclass Image extends LuckyImageBase {\n\n    fromCol:number\n    fromColOff:number\n    fromRow:number\n    fromRowOff:number\n\n    toCol:number\n    toColOff:number\n    toRow:number\n    toRowOff:number\n\n    constructor(pathName:string, base64:string) {\n        super();\n        this.src = base64;\n    }\n\n    setDefault(){\n\n    }\n}","﻿import { IluckyImageBorder,IluckyImageCrop,IluckyImageDefault,IluckyImages,IluckySheetCelldata,IluckySheetCelldataValue,IMapluckySheetborderInfoCellForImp,IluckySheetborderInfoCellValue,IluckySheetborderInfoCellValueStyle,IFormulaSI,IluckySheetRowAndColumnLen,IluckySheetRowAndColumnHidden,IluckySheetSelection,IcellOtherInfo,IformulaList,IformulaListItem, IluckysheetHyperlink, IluckysheetHyperlinkType, IluckysheetDataVerification} from \"./ILuck\";\nimport {LuckySheetCelldata} from \"./LuckyCell\";\nimport { IattributeList } from \"../ICommon\";\nimport {getXmlAttibute, getColumnWidthPixel, fromulaRef,getRowHeightPixel,getcellrange,generateRandomIndex,getPxByEMUs, getMultiSequenceToNum, getTransR1C1ToSequence, getPeelOffX14, getMultiFormulaValue} from \"../common/method\";\nimport {borderTypes, COMMON_TYPE2, DATA_VERIFICATION_MAP, DATA_VERIFICATION_TYPE2_MAP, worksheetFilePath} from \"../common/constant\";\nimport { ReadXml, IStyleCollections, Element,getColor } from \"./ReadXml\";\nimport { LuckyFileBase,LuckySheetBase,LuckyConfig,LuckySheetborderInfoCellForImp,LuckySheetborderInfoCellValue,LuckysheetCalcChain,LuckySheetConfigMerge } from \"./LuckyBase\";\nimport {ImageList} from \"./LuckyImage\";\nimport dayjs from \"dayjs\";\n\nexport class LuckySheet extends LuckySheetBase {\n\n    private readXml:ReadXml\n    private sheetFile:string\n    private isInitialCell:boolean\n    private styles:IStyleCollections\n    private sharedStrings:Element[]\n    private mergeCells:Element[]\n    private calcChainEles:Element[]\n    private sheetList:IattributeList\n\n    private imageList:ImageList\n\n    private formulaRefList:IFormulaSI\n\n    constructor(sheetName:string, sheetId:string, sheetOrder:number,isInitialCell:boolean=false, allFileOption:any){\n        //Private\n        super();\n        this.isInitialCell = isInitialCell;\n\n        this.readXml = allFileOption.readXml;\n        this.sheetFile = allFileOption.sheetFile;\n        this.styles = allFileOption.styles;\n        this.sharedStrings = allFileOption.sharedStrings;\n        this.calcChainEles = allFileOption.calcChain;\n        this.sheetList = allFileOption.sheetList;\n        this.imageList = allFileOption.imageList;\n        this.hide = allFileOption.hide;\n\n        //Output\n        this.name = sheetName;\n        this.index = sheetId;\n        this.order = sheetOrder.toString();\n        this.config = new LuckyConfig();\n        this.celldata = [];\n        this.mergeCells = this.readXml.getElementsByTagName(\"mergeCells/mergeCell\", this.sheetFile);\n        let clrScheme = this.styles[\"clrScheme\"] as Element[];\n        let sheetView = this.readXml.getElementsByTagName(\"sheetViews/sheetView\", this.sheetFile);\n        let showGridLines = \"1\", tabSelected=\"0\", zoomScale = \"100\", activeCell = \"A1\";\n        if(sheetView.length>0){\n            let attrList = sheetView[0].attributeList;\n            showGridLines = getXmlAttibute(attrList, \"showGridLines\", \"1\");\n            tabSelected = getXmlAttibute(attrList, \"tabSelected\", \"0\");\n            zoomScale = getXmlAttibute(attrList, \"zoomScale\", \"100\");\n            // let colorId = getXmlAttibute(attrList, \"colorId\", \"0\");\n            let selections = sheetView[0].getInnerElements(\"selection\");\n            if(selections!=null && selections.length>0){\n                activeCell = getXmlAttibute(selections[0].attributeList, \"activeCell\", \"A1\");\n                let range:IluckySheetSelection = getcellrange(activeCell, this.sheetList, sheetId);\n                this.luckysheet_select_save = [];\n                this.luckysheet_select_save.push(range);\n            }\n        }\n        this.showGridLines = showGridLines;\n        this.status = tabSelected;\n        this.zoomRatio = parseInt(zoomScale)/100;\n\n        let tabColors = this.readXml.getElementsByTagName(\"sheetPr/tabColor\", this.sheetFile);\n        if(tabColors!=null && tabColors.length>0){\n            let tabColor = tabColors[0], attrList = tabColor.attributeList;\n            // if(attrList.rgb!=null){\n                let tc = getColor(tabColor, this.styles, \"b\");\n                this.color = tc;\n            // }\n        }\n\n        let sheetFormatPr = this.readXml.getElementsByTagName(\"sheetFormatPr\", this.sheetFile);\n        let defaultColWidth, defaultRowHeight;\n        if(sheetFormatPr.length>0){\n            let attrList = sheetFormatPr[0].attributeList;\n            defaultColWidth = getXmlAttibute(attrList, \"defaultColWidth\", \"9.21\");\n            defaultRowHeight = getXmlAttibute(attrList, \"defaultRowHeight\", \"19\");\n        }\n\n        this.defaultColWidth = getColumnWidthPixel(parseFloat(defaultColWidth));\n        this.defaultRowHeight = getRowHeightPixel(parseFloat(defaultRowHeight));\n\n\n        this.generateConfigColumnLenAndHidden();\n        let cellOtherInfo:IcellOtherInfo =  this.generateConfigRowLenAndHiddenAddCell();\n        \n        if(this.calcChain==null){\n            this.calcChain = [];\n        }\n\n        let formulaListExist:IformulaList={};\n        for(let c=0;c<this.calcChainEles.length;c++){\n            let calcChainEle = this.calcChainEles[c], attrList = calcChainEle.attributeList;\n            if(attrList.i!=sheetId){\n                continue;\n            }\n\n            let r = attrList.r , i = attrList.i, l = attrList.l, s = attrList.s, a = attrList.a, t = attrList.t;\n\n            let range = getcellrange(r);\n            let chain = new LuckysheetCalcChain();\n            chain.r = range.row[0];\n            chain.c = range.column[0];\n            chain.index = this.index;\n            this.calcChain.push(chain);\n            formulaListExist[\"r\"+r+\"c\"+c] = null;\n        }\n        \n\n        if(this.formulaRefList!=null){\n            for(let key in this.formulaRefList){\n                let funclist = this.formulaRefList[key];\n                let mainFunc = funclist[\"mainRef\"], mainCellValue = mainFunc.cellValue;\n                let formulaTxt = mainFunc.fv;\n                let mainR = mainCellValue.r, mainC = mainCellValue.c;\n                // let refRange = getcellrange(ref);\n                for(let name in funclist){\n                    if(name == \"mainRef\"){\n                        continue;\n                    }\n\n                    let funcValue = funclist[name], cellValue = funcValue.cellValue;\n                    if(cellValue==null){\n                        continue;\n                    }\n                    let r = cellValue.r, c = cellValue.c;\n\n                    let func = formulaTxt;\n                    let offsetRow = r - mainR, offsetCol = c - mainC;\n\n                    \n                    if(offsetRow > 0){\n                        func = \"=\" + fromulaRef.functionCopy(func, \"down\", offsetRow);\n                    }\n                    else if(offsetRow < 0){\n                        func = \"=\" + fromulaRef.functionCopy(func, \"up\", Math.abs(offsetRow));\n                    }\n\n                    if(offsetCol > 0){\n                        func = \"=\" + fromulaRef.functionCopy(func, \"right\", offsetCol);\n                    }\n                    else if(offsetCol < 0){\n                        func = \"=\" + fromulaRef.functionCopy(func, \"left\", Math.abs(offsetCol));\n                    }\n\n                    // console.log(offsetRow, offsetCol, func);\n\n                    (cellValue.v as IluckySheetCelldataValue ).f = func;\n                    \n                    //添加共享公式链\n                    let chain = new LuckysheetCalcChain();\n                    chain.r = cellValue.r;\n                    chain.c = cellValue.c;\n                    chain.index = this.index;\n                    this.calcChain.push(chain);\n                }\n            }\n        }\n\n\n        //There may be formulas that do not appear in calcChain\n        for(let key in cellOtherInfo.formulaList){\n            if(!(key in formulaListExist)){\n                let formulaListItem = cellOtherInfo.formulaList[key];\n                let chain = new LuckysheetCalcChain();\n                chain.r = formulaListItem.r;\n                chain.c = formulaListItem.c;\n                chain.index = this.index;\n                this.calcChain.push(chain);\n            }\n        }\n      \n        // dataVerification config\n        this.dataVerification = this.generateConfigDataValidations();\n\n        // hyperlink config\n        this.hyperlink = this.generateConfigHyperlinks();\n      \n        // sheet hide\n        this.hide = this.hide;\n\n        if(this.mergeCells!=null){\n            for(let i=0;i<this.mergeCells.length;i++){\n                let merge = this.mergeCells[i], attrList = merge.attributeList;\n                let ref = attrList.ref;\n                if(ref==null){\n                    continue;\n                }\n                let range = getcellrange(ref, this.sheetList, sheetId);\n                let mergeValue = new LuckySheetConfigMerge();\n                mergeValue.r = range.row[0];\n                mergeValue.c = range.column[0];\n                mergeValue.rs = range.row[1]-range.row[0]+1;\n                mergeValue.cs = range.column[1]-range.column[0]+1;\n                if(this.config.merge==null){\n                    this.config.merge = {};\n                }\n                this.config.merge[range.row[0] + \"_\" + range.column[0]] = mergeValue;\n            }\n        }\n\n        let drawingFile = allFileOption.drawingFile, drawingRelsFile = allFileOption.drawingRelsFile;\n        if(drawingFile!=null && drawingRelsFile!=null){\n            let twoCellAnchors = this.readXml.getElementsByTagName(\"xdr:twoCellAnchor\", drawingFile);\n\n            if(twoCellAnchors!=null && twoCellAnchors.length>0){\n                for(let i=0;i<twoCellAnchors.length;i++){\n                    let twoCellAnchor = twoCellAnchors[i];\n                    let editAs = getXmlAttibute(twoCellAnchor.attributeList, \"editAs\", \"twoCell\");\n\n                    let xdrFroms = twoCellAnchor.getInnerElements(\"xdr:from\"), xdrTos = twoCellAnchor.getInnerElements(\"xdr:to\");\n\n                    let xdr_blipfills = twoCellAnchor.getInnerElements(\"a:blip\");\n                    if(xdrFroms!=null && xdr_blipfills!=null && xdrFroms.length>0 && xdr_blipfills.length>0){\n                        let xdrFrom = xdrFroms[0], xdrTo = xdrTos[0],xdr_blipfill = xdr_blipfills[0];\n                        \n                        let rembed = getXmlAttibute(xdr_blipfill.attributeList, \"r:embed\", null);\n\n                        let imageObject = this.getBase64ByRid(rembed, drawingRelsFile);\n\n\n\n                        // let aoff = xdr_xfrm.getInnerElements(\"a:off\"), aext = xdr_xfrm.getInnerElements(\"a:ext\");\n\n                        \n\n                        // if(aoff!=null && aext!=null && aoff.length>0 && aext.length>0){\n                        //     let aoffAttribute = aoff[0].attributeList, aextAttribute = aext[0].attributeList;\n                        //     let x = getXmlAttibute(aoffAttribute, \"x\", null);\n                        //     let y = getXmlAttibute(aoffAttribute, \"y\", null);\n\n                        //     let cx = getXmlAttibute(aextAttribute, \"cx\", null);\n                        //     let cy = getXmlAttibute(aextAttribute, \"cy\", null);\n\n                        //     if(x!=null && y!=null && cx!=null && cy!=null && imageObject !=null){\n                        // let x_n = getPxByEMUs(parseInt(x), \"c\"),y_n = getPxByEMUs(parseInt(y));\n                        // let cx_n = getPxByEMUs(parseInt(cx), \"c\"),cy_n = getPxByEMUs(parseInt(cy));\n\n                        let x_n =0,y_n = 0;\n                        let cx_n = 0, cy_n = 0;\n\n                        imageObject.fromCol = this.getXdrValue(xdrFrom.getInnerElements(\"xdr:col\"));\n                        imageObject.fromColOff = getPxByEMUs(this.getXdrValue(xdrFrom.getInnerElements(\"xdr:colOff\")));\n                        imageObject.fromRow= this.getXdrValue(xdrFrom.getInnerElements(\"xdr:row\"));\n                        imageObject.fromRowOff = getPxByEMUs(this.getXdrValue(xdrFrom.getInnerElements(\"xdr:rowOff\")));\n\n                        imageObject.toCol = this.getXdrValue(xdrTo.getInnerElements(\"xdr:col\"));\n                        imageObject.toColOff = getPxByEMUs(this.getXdrValue(xdrTo.getInnerElements(\"xdr:colOff\")));\n                        imageObject.toRow = this.getXdrValue(xdrTo.getInnerElements(\"xdr:row\"));\n                        imageObject.toRowOff = getPxByEMUs(this.getXdrValue(xdrTo.getInnerElements(\"xdr:rowOff\")));\n\n                        imageObject.originWidth = cx_n;\n                        imageObject.originHeight = cy_n;\n                        \n                        if(editAs==\"absolute\"){\n                            imageObject.type = \"3\";\n                        }\n                        else if(editAs==\"oneCell\"){\n                            imageObject.type = \"2\";\n                        }\n                        else{\n                            imageObject.type = \"1\";\n                        }\n\n                        imageObject.isFixedPos = false;\n                        imageObject.fixedLeft = 0;\n                        imageObject.fixedTop = 0;\n\n                        let imageBorder:IluckyImageBorder = {\n                            color: \"#000\",\n                            radius: 0,\n                            style: \"solid\",\n                            width: 0\n                        }\n                        imageObject.border = imageBorder;\n\n                        let imageCrop:IluckyImageCrop = {\n                            height: cy_n,\n                            offsetLeft: 0,\n                            offsetTop: 0,\n                            width: cx_n\n                        }\n                        imageObject.crop = imageCrop;\n\n                        let imageDefault:IluckyImageDefault = {\n                            height: cy_n,\n                            left: x_n,\n                            top: y_n,\n                            width: cx_n\n                        }\n                        imageObject.default = imageDefault;\n\n                        if(this.images==null){\n                            this.images = {};\n                        }\n                        this.images[generateRandomIndex(\"image\")] = imageObject;\n                        //     }\n                        // }\n                    }\n                }\n            }\n            \n        } \n    }\n\n    private getXdrValue(ele:Element[]):number{\n        if(ele==null || ele.length==0){\n            return null;\n        }\n\n        return parseInt(ele[0].value);\n    }\n\n    private getBase64ByRid(rid:string, drawingRelsFile:string){\n        let Relationships = this.readXml.getElementsByTagName(\"Relationships/Relationship\", drawingRelsFile);\n\n        if(Relationships!=null && Relationships.length>0){\n            for(let i=0;i<Relationships.length;i++){\n                let Relationship = Relationships[i];\n                let attrList = Relationship.attributeList;\n                let Id = getXmlAttibute(attrList, \"Id\", null);\n                let src = getXmlAttibute(attrList, \"Target\", null);\n                if(Id == rid){\n                    src = src.replace(/\\.\\.\\//g, \"\");\n                    src = \"xl/\" + src;\n                    let imgage = this.imageList.getImageByName(src);\n                    return imgage;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n    * @desc This will convert cols/col to luckysheet config of column'width\n    */\n    private generateConfigColumnLenAndHidden(){\n        let cols = this.readXml.getElementsByTagName(\"cols/col\", this.sheetFile);\n        for(let i=0;i<cols.length;i++){\n            let col = cols[i], attrList = col.attributeList;\n            let min = getXmlAttibute(attrList, \"min\", null);\n            let max = getXmlAttibute(attrList, \"max\", null);\n            let width = getXmlAttibute(attrList, \"width\", null);\n            let hidden = getXmlAttibute(attrList, \"hidden\", null);\n            let customWidth = getXmlAttibute(attrList, \"customWidth\", null);\n\n\n            if(min==null || max==null){\n                continue;\n            }\n\n            let minNum = parseInt(min)-1, maxNum=parseInt(max)-1, widthNum=parseFloat(width);\n            \n            for(let m=minNum;m<=maxNum;m++){\n                if(width!=null){\n                    if(this.config.columnlen==null){\n                        this.config.columnlen = {};\n                    }\n                    this.config.columnlen[m] = getColumnWidthPixel(widthNum);\n                }\n\n                if(hidden==\"1\"){\n                    if(this.config.colhidden==null){\n                        this.config.colhidden = {};\n                    }\n                    this.config.colhidden[m] = 0;\n\n                    if(this.config.columnlen){\n                        delete this.config.columnlen[m];\n                    }\n                    \n                }\n\n                if(customWidth!=null){\n                    if(this.config.customWidth==null){\n                        this.config.customWidth = {};\n                    }\n                    this.config.customWidth[m] = 1;\n                }\n            } \n        }\n    }\n\n    /**\n    * @desc This will convert cols/col to luckysheet config of column'width\n    */\n    private generateConfigRowLenAndHiddenAddCell():IcellOtherInfo{\n        let rows = this.readXml.getElementsByTagName(\"sheetData/row\", this.sheetFile);\n        let cellOtherInfo:IcellOtherInfo = {};\n        let formulaList:IformulaList = {};\n        cellOtherInfo.formulaList = formulaList;\n        for(let i=0;i<rows.length;i++){\n            let row = rows[i], attrList = row.attributeList;\n            let rowNo = getXmlAttibute(attrList, \"r\", null);\n            let height = getXmlAttibute(attrList, \"ht\", null);\n            let hidden = getXmlAttibute(attrList, \"hidden\", null);\n            let customHeight = getXmlAttibute(attrList, \"customHeight\", null);\n\n            if(rowNo==null){\n                continue;\n            }\n\n            let rowNoNum = parseInt(rowNo) - 1;\n            if(height!=null){\n                let heightNum = parseFloat(height);\n                if(this.config.rowlen==null){\n                    this.config.rowlen = {};\n                }\n                this.config.rowlen[rowNoNum] = getRowHeightPixel(heightNum);\n            }\n\n            if(hidden==\"1\"){\n                if(this.config.rowhidden==null){\n                    this.config.rowhidden = {};\n                }\n                this.config.rowhidden[rowNoNum] = 0;\n                \n                if(this.config.rowlen){\n                    delete this.config.rowlen[rowNoNum];\n                }\n                \n            }\n\n            if(customHeight!=null){\n                if(this.config.customHeight==null){\n                    this.config.customHeight = {};\n                }\n                this.config.customHeight[rowNoNum] = 1;\n            }\n\n\n            if(this.isInitialCell){\n                let cells = row.getInnerElements(\"c\");\n                for(let key in cells){\n                    let cell = cells[key];\n                    let cellValue = new LuckySheetCelldata(cell, this.styles, this.sharedStrings, this.mergeCells,this.sheetFile, this.readXml);\n                    if(cellValue._borderObject!=null){\n                        if(this.config.borderInfo==null){\n                            this.config.borderInfo = [];\n                        }\n                        this.config.borderInfo.push(cellValue._borderObject);\n                        delete cellValue._borderObject;\n                    }\n                    \n                    // let borderId = cellValue._borderId;\n                    // if(borderId!=null){\n                    //     let borders = this.styles[\"borders\"] as Element[];\n                    //     if(this.config._borderInfo==null){\n                    //         this.config._borderInfo = {};\n                    //     }\n                    //     if( borderId in this.config._borderInfo){\n                    //         this.config._borderInfo[borderId].cells.push(cellValue.r + \"_\" + cellValue.c);\n                    //     }\n                    //     else{\n                    //         let border = borders[borderId];\n                    //         let borderObject = new LuckySheetborderInfoCellForImp();\n                    //         borderObject.rangeType = \"cellGroup\";\n                    //         borderObject.cells = [];\n                    //         let borderCellValue = new LuckySheetborderInfoCellValue();\n                            \n                    //         let lefts = border.getInnerElements(\"left\");\n                    //         let rights = border.getInnerElements(\"right\");\n                    //         let tops = border.getInnerElements(\"top\");\n                    //         let bottoms = border.getInnerElements(\"bottom\");\n                    //         let diagonals = border.getInnerElements(\"diagonal\");\n\n                    //         let left = this.getBorderInfo(lefts);\n                    //         let right = this.getBorderInfo(rights);\n                    //         let top = this.getBorderInfo(tops);\n                    //         let bottom = this.getBorderInfo(bottoms);\n                    //         let diagonal = this.getBorderInfo(diagonals);\n\n                    //         let isAdd = false;\n                    //         if(left!=null && left.color!=null){\n                    //             borderCellValue.l = left;\n                    //             isAdd = true;\n                    //         }\n\n                    //         if(right!=null && right.color!=null){\n                    //             borderCellValue.r = right;\n                    //             isAdd = true;\n                    //         }\n\n                    //         if(top!=null && top.color!=null){\n                    //             borderCellValue.t = top;\n                    //             isAdd = true;\n                    //         }\n\n                    //         if(bottom!=null && bottom.color!=null){\n                    //             borderCellValue.b = bottom;\n                    //             isAdd = true;\n                    //         }\n\n                    //         if(isAdd){\n                    //             borderObject.value = borderCellValue;\n                    //             this.config._borderInfo[borderId] = borderObject;\n                    //         }\n\n                    //     }\n                    // }\n                    if(cellValue._formulaType==\"shared\"){\n                        if(this.formulaRefList==null){\n                            this.formulaRefList = {};\n                        }\n\n                        if(this.formulaRefList[cellValue._formulaSi]==null){\n                            this.formulaRefList[cellValue._formulaSi] = {}\n                        }\n\n                        let fv;\n                        if(cellValue.v!=null){\n                            fv = (cellValue.v as IluckySheetCelldataValue).f;\n                        }\n\n                        let refValue = {\n                            t:cellValue._formulaType,\n                            ref:cellValue._fomulaRef,\n                            si:cellValue._formulaSi,\n                            fv:fv,\n                            cellValue:cellValue\n                        }\n\n                        if(cellValue._fomulaRef!=null){\n                            this.formulaRefList[cellValue._formulaSi][\"mainRef\"] = refValue;\n                        }\n                        else{\n                            this.formulaRefList[cellValue._formulaSi][cellValue.r+\"_\"+cellValue.c] = refValue;\n                        }\n\n                        // console.log(refValue, this.formulaRefList);\n                    }\n\n                    //There may be formulas that do not appear in calcChain\n                    if(cellValue.v!=null && (cellValue.v as IluckySheetCelldataValue).f!=null){\n                        let formulaCell:IformulaListItem = {\n                            r:cellValue.r,\n                            c:cellValue.c\n                        }\n                        cellOtherInfo.formulaList[\"r\"+cellValue.r+\"c\"+cellValue.c] = formulaCell;\n                    }\n\n                    this.celldata.push(cellValue);\n                }\n                \n            }\n        }\n\n        return cellOtherInfo;\n    }\n  \n    /**\n     * luckysheet config of dataValidations\n     * \n     * @returns {IluckysheetDataVerification} - dataValidations config\n     */\n    private generateConfigDataValidations(): IluckysheetDataVerification {\n      \n      let rows = this.readXml.getElementsByTagName(\n        \"dataValidations/dataValidation\",\n        this.sheetFile\n      );\n      let extLst =\n        this.readXml.getElementsByTagName(\n          \"extLst/ext/x14:dataValidations/x14:dataValidation\",\n          this.sheetFile\n        ) || [];\n      \n      rows = rows.concat(extLst);\n  \n      let dataVerification: IluckysheetDataVerification = {};\n  \n      for (let i = 0; i < rows.length; i++) {\n        let row = rows[i];\n        let attrList = row.attributeList;\n        let formulaValue = row.value;\n  \n        let type = getXmlAttibute(attrList, \"type\", null);\n        if(!type) {\n            continue;\n        }\n        let operator = \"\",\n            sqref = \"\",\n            sqrefIndexArr: string[] = [],\n            valueArr: string[] = [];\n        let _prohibitInput =\n          getXmlAttibute(attrList, \"allowBlank\", null) !== \"1\" ? false : true;\n        \n        // x14 processing\n        const formulaReg = new RegExp(/<x14:formula1>|<xm:sqref>/g)\n        if (formulaReg.test(formulaValue) && extLst?.length >= 0) {\n          operator = getXmlAttibute(attrList, \"operator\", null);\n          const peelOffData = getPeelOffX14(formulaValue);\n          sqref = peelOffData?.sqref;\n          sqrefIndexArr = getMultiSequenceToNum(sqref);\n          valueArr = getMultiFormulaValue(peelOffData?.formula);\n        } else {\n          operator = getXmlAttibute(attrList, \"operator\", null);\n          sqref = getXmlAttibute(attrList, \"sqref\", null);\n          sqrefIndexArr = getMultiSequenceToNum(sqref);\n          valueArr = getMultiFormulaValue(formulaValue);\n        }\n\n        let _type = DATA_VERIFICATION_MAP[type];\n        let _type2 = null;\n        let _value1: string | number = valueArr?.length >= 1 ? valueArr[0] : \"\";\n        let _value2: string | number = valueArr?.length === 2 ? valueArr[1] : \"\";\n        let _hint = getXmlAttibute(attrList, \"prompt\", null);\n        let _hintShow = _hint ? true : false\n  \n        const matchType = COMMON_TYPE2.includes(_type) ? \"common\" : _type;\n        _type2 = operator\n          ? DATA_VERIFICATION_TYPE2_MAP[matchType][operator]\n          : \"bw\";\n        \n        // mobile phone number processing\n        if (\n          _type === \"text_content\" &&\n          (_value1?.includes(\"LEN\") || _value1?.includes(\"len\")) &&\n          _value1?.includes(\"=11\")\n        ) {\n          _type = \"validity\";\n          _type2 = \"phone\";\n        }\n\n        // date processing\n        if (_type === \"date\") {\n          const D1900 = new Date(1899, 11, 30, 0, 0, 0);\n          _value1 = dayjs(D1900)\n            .clone()\n            .add(Number(_value1), \"day\")\n            .format(\"YYYY-MM-DD\");\n          _value2 = dayjs(D1900)\n            .clone()\n            .add(Number(_value2), \"day\")\n            .format(\"YYYY-MM-DD\");\n        }\n        \n        // checkbox and dropdown processing\n        if (_type === \"checkbox\" || _type === \"dropdown\") {\n          _type2 = null;\n        }\n        \n        // dynamically add dataVerifications\n        for (const ref of sqrefIndexArr) {\n          dataVerification[ref] = {\n            type: _type,\n            type2: _type2,\n            value1: _value1,\n            value2: _value2,\n            checked: false,\n            remote: false,\n            prohibitInput: _prohibitInput,\n            hintShow: _hintShow,\n            hintText: _hint\n          };\n        }\n      }\n  \n      return dataVerification;\n    }\n  \n    /**\n     * luckysheet config of hyperlink\n     * \n     * @returns {IluckysheetHyperlink} - hyperlink config\n     */\n    private generateConfigHyperlinks(): IluckysheetHyperlink {\n      let rows = this.readXml.getElementsByTagName(\n        \"hyperlinks/hyperlink\",\n        this.sheetFile\n      );\n      let hyperlink: IluckysheetHyperlink = {};\n      for (let i = 0; i < rows.length; i++) {\n        let row = rows[i];\n        let attrList = row.attributeList;\n        let ref = getXmlAttibute(attrList, \"ref\", null),\n            refArr = getMultiSequenceToNum(ref),\n            _display = getXmlAttibute(attrList, \"display\", null),\n            _address = getXmlAttibute(attrList, \"location\", null),\n            _tooltip = getXmlAttibute(attrList, \"tooltip\", null);\n        let _type: IluckysheetHyperlinkType = _address ? \"internal\" : \"external\";\n  \n        // external hyperlink\n        if (!_address) {\n          let rid = attrList[\"r:id\"];\n          let sheetFile = this.sheetFile;\n          let relationshipList = this.readXml.getElementsByTagName(\n            \"Relationships/Relationship\",\n            `xl/worksheets/_rels/${sheetFile.replace(worksheetFilePath, \"\")}.rels`\n          );\n  \n          const findRid = relationshipList?.find(\n            (e) => e.attributeList[\"Id\"] === rid\n          );\n\n          if (findRid) {\n            _address = findRid.attributeList[\"Target\"];\n            _type = findRid.attributeList[\n              \"TargetMode\"\n            ]?.toLocaleLowerCase() as IluckysheetHyperlinkType;\n          }\n        }\n\n        // match R1C1\n        const addressReg = new RegExp(/^.*!R([\\d$])+C([\\d$])*$/g)\n        if (addressReg.test(_address)) {\n          _address = getTransR1C1ToSequence(_address);\n        }\n        \n        // dynamically add hyperlinks\n        for (const ref of refArr) {\n          hyperlink[ref] = {\n            linkAddress: _address,\n            linkTooltip: _tooltip || \"\",\n            linkType: _type,\n            display: _display || \"\",\n          };\n        }\n      }\n      \n      return hyperlink;\n    }\n\n    // private getBorderInfo(borders:Element[]):LuckySheetborderInfoCellValueStyle{\n    //     if(borders==null){\n    //         return null;\n    //     }\n\n    //     let border = borders[0], attrList = border.attributeList;\n    //     let clrScheme = this.styles[\"clrScheme\"] as Element[];\n    //     let style:string = attrList.style;\n    //     if(style==null || style==\"none\"){\n    //         return null;\n    //     }\n\n    //     let colors = border.getInnerElements(\"color\");\n    //     let colorRet = \"#000000\";\n    //     if(colors!=null){\n    //         let color = colors[0];\n    //         colorRet = getColor(color, clrScheme);\n    //     }\n\n    //     let ret = new LuckySheetborderInfoCellValueStyle();\n    //     ret.style = borderTypes[style];\n    //     ret.color = colorRet;\n\n    //     return ret;\n    // }\n}\n","import {IuploadfileList, IattributeList, stringToNum} from \"../ICommon\";\nimport {indexedColors}  from \"../common/constant\";\nimport {LightenDarkenColor}  from \"../common/method\";\n\n\nclass xmloperation {\n    /**\n    * @param tag Search xml tag name , div,title etc.\n    * @param file Xml string\n    * @return Xml element string \n    */\n    protected getElementsByOneTag(tag:string, file:string):string[]{\n        //<a:[^/>: ]+?>.*?</a:[^/>: ]+?>\n        let readTagReg;\n        if(tag.indexOf(\"|\")>-1){\n            let tags = tag.split(\"|\"), tagsRegTxt=\"\";\n            for(let i=0;i<tags.length;i++){\n                let t = tags[i];\n                tagsRegTxt += \"|<\"+ t +\" [^>]+?[^/]>[\\\\s\\\\S]*?</\"+ t +\">|<\"+ t +\" [^>]+?/>|<\"+ t +\">[\\\\s\\\\S]*?</\"+ t +\">|<\"+ t +\"/>\";\n            }\n            tagsRegTxt = tagsRegTxt.substr(1, tagsRegTxt.length);\n            readTagReg = new RegExp(tagsRegTxt, \"g\");\n        }\n        else{\n            readTagReg = new RegExp(\"<\"+ tag +\" [^>]+?[^/]>[\\\\s\\\\S]*?</\"+ tag +\">|<\"+ tag +\" [^>]+?/>|<\"+ tag +\">[\\\\s\\\\S]*?</\"+ tag +\">|<\"+ tag +\"/>\", \"g\");\n        }\n        \n        let ret = file.match(readTagReg);\n        if(ret==null){\n            return [];\n        }\n        else{\n            return ret;\n        }\n    }\n}\n\nexport class ReadXml extends xmloperation{\n    originFile:IuploadfileList\n    constructor(files:IuploadfileList){\n        super();\n        this.originFile = files;\n    }\n    /**\n    * @param path Search xml tag group , div,title etc.\n    * @param fileName One of uploadfileList, uploadfileList is file group, {key:value}\n    * @return Xml element calss\n    */\n    getElementsByTagName(path:string, fileName:string): Element[]{\n        \n        let file = this.getFileByName(fileName);\n        let pathArr = path.split(\"/\"), ret:string[] | string;\n        for(let key in pathArr){\n            let path = pathArr[key];\n            if(ret==undefined){\n                ret = this.getElementsByOneTag(path,file);\n            }\n            else{\n                if(ret instanceof Array){\n                    let items:string[]=[];\n                    for(let key in ret){\n                        let item = ret[key];\n                        items = items.concat(this.getElementsByOneTag(path,item));\n                    }\n                    ret = items;\n                }\n                else{\n                    ret = this.getElementsByOneTag(path,ret);\n                }\n            }\n        }\n\n        let elements:Element[] = [];\n\n        for(let i=0;i<ret.length;i++){\n            let ele = new Element(ret[i]);\n            elements.push(ele);\n        }\n\n        return elements;\n    }\n\n    /**\n    * @param name One of uploadfileList's name, search for file by this parameter\n    * @retrun Select a file from uploadfileList\n    */\n    private getFileByName(name:string):string{\n        for(let fileKey in this.originFile){\n            if(fileKey.indexOf(name)>-1){\n                return this.originFile[fileKey];\n            }\n        }\n        return \"\";\n    }\n\n    \n}\n\nexport class Element extends xmloperation {\n    elementString:string\n    attributeList:IattributeList\n    value:string\n    container:string\n    constructor(str:string){\n        super();\n        this.elementString = str;\n        this.setValue();\n        const readAttrReg = new RegExp('[a-zA-Z0-9_:]*?=\".*?\"', \"g\");\n        let attrList = this.container.match(readAttrReg);\n        this.attributeList = {};\n        if(attrList!=null){\n            for(let key in attrList){\n                let attrFull = attrList[key];\n                // let al= attrFull.split(\"=\");\n                if(attrFull.length==0){\n                    continue;\n                }\n                let attrKey = attrFull.substr(0, attrFull.indexOf('='));\n                let attrValue = attrFull.substr(attrFull.indexOf('=') + 1);\n                if(attrKey==null || attrValue==null ||attrKey.length==0 || attrValue.length==0){\n                    continue;\n                }\n                this.attributeList[attrKey] = attrValue.substr(1, attrValue.length-2);\n            }\n        }\n    }\n\n    /**\n    * @param name Get attribute by key in element\n    * @return Single attribute\n    */\n    get(name:string):string|number|boolean{\n        return this.attributeList[name];\n    }\n\n    /**\n    * @param tag Get elements by tag in elementString\n    * @return Element group\n    */\n    getInnerElements(tag:string):Element[]{\n        let ret = this.getElementsByOneTag(tag,this.elementString);\n        let elements:Element[] = [];\n\n        for(let i=0;i<ret.length;i++){\n            let ele = new Element(ret[i]);\n            elements.push(ele);\n        }\n\n        if(elements.length==0){\n            return null;\n        }\n        return elements;\n    }\n\n    /**\n    * @desc get xml dom value and container, <container>value</container>\n    */\n    private setValue(){\n        let str = this.elementString;\n        if(str.substr(str.length-2, 2)==\"/>\"){\n            this.value = \"\";\n            this.container = str;\n        }\n        else{\n            let firstTag = this.getFirstTag();\n            const firstTagReg = new RegExp(\"(<\"+ firstTag +\" [^>]+?[^/]>)([\\\\s\\\\S]*?)</\"+ firstTag +\">|(<\"+ firstTag +\">)([\\\\s\\\\S]*?)</\"+ firstTag +\">\", \"g\");\n            let result = firstTagReg.exec(str);\n            if (result != null) {\n                if(result[1]!=null){\n                    this.container = result[1];\n                    this.value = result[2];\n                }\n                else{\n                    this.container = result[3];\n                    this.value = result[4];\n                }\n            }\n        }\n    }\n\n    /**\n    * @desc get xml dom first tag, <a><b></b></a>, get a\n    */\n    private getFirstTag(){\n        let str = this.elementString;\n        let firstTag = str.substr(0, str.indexOf(' '));\n        if(firstTag==\"\" || firstTag.indexOf(\">\")>-1){\n            firstTag = str.substr(0, str.indexOf('>'));\n        }\n        firstTag = firstTag.substr(1,firstTag.length);\n        return firstTag;\n    }\n}\n\n\nexport interface IStyleCollections {\n    [index:string]:Element[] | IattributeList\n}\n\nfunction combineIndexedColor(indexedColorsInner:Element[], indexedColors:IattributeList):IattributeList{\n    let ret:IattributeList = {};\n    if(indexedColorsInner==null || indexedColorsInner.length==0){\n        return indexedColors;\n    }\n    for(let key in indexedColors){\n        let value = indexedColors[key], kn = parseInt(key);\n        let inner = indexedColorsInner[kn];\n        if(inner==null){\n            ret[key] = value;\n        }\n        else{\n            let rgb = inner.attributeList.rgb;\n            ret[key] = rgb;\n        }\n    }\n\n    return ret;\n}\n\n//clrScheme:Element[]\nexport function getColor(color:Element, styles:IStyleCollections , type:string=\"g\"){\n    let attrList = color.attributeList;\n    let clrScheme = styles[\"clrScheme\"] as Element[];\n    let indexedColorsInner = styles[\"indexedColors\"] as Element[];\n    let mruColorsInner = styles[\"mruColors\"];\n    let indexedColorsList = combineIndexedColor(indexedColorsInner, indexedColors);\n    let indexed = attrList.indexed, rgb = attrList.rgb, theme = attrList.theme, tint = attrList.tint;\n    let bg;\n    if(indexed!=null){\n        let indexedNum = parseInt(indexed);\n        bg = indexedColorsList[indexedNum];\n        if(bg!=null){\n            bg = bg.substring(bg.length-6, bg.length);\n            bg = \"#\"+bg;\n        }\n    }\n    else if(rgb!=null){\n        rgb = rgb.substring(rgb.length-6, rgb.length);\n        bg = \"#\"+rgb;\n    }\n    else if(theme!=null){\n        let themeNum = parseInt(theme);\n        if(themeNum==0){\n            themeNum = 1;\n        }\n        else if(themeNum==1){\n            themeNum = 0;\n        }\n        else if(themeNum==2){\n            themeNum = 3;\n        }\n        else if(themeNum==3){\n            themeNum = 2;\n        }\n        let clrSchemeElement = clrScheme[themeNum];\n        if(clrSchemeElement!=null){\n            let clrs = clrSchemeElement.getInnerElements(\"a:sysClr|a:srgbClr\");\n            if(clrs!=null){\n                let clr = clrs[0];\n                let clrAttrList = clr.attributeList;\n                // console.log(clr.container, );\n                if(clr.container.indexOf(\"sysClr\")>-1){\n                    // if(type==\"g\" && clrAttrList.val==\"windowText\"){\n                    //     bg = null;\n                    // }\n                    // else if((type==\"t\" || type==\"b\") && clrAttrList.val==\"window\"){\n                    //     bg = null;\n                    // }                    \n                    // else \n                    if(clrAttrList.lastClr!=null){\n                        bg = \"#\" + clrAttrList.lastClr;\n                    }\n                    else if(clrAttrList.val!=null){\n                        bg = \"#\" + clrAttrList.val;\n                    }\n\n                }\n                else if(clr.container.indexOf(\"srgbClr\")>-1){\n                    // console.log(clrAttrList.val);\n                    bg = \"#\" + clrAttrList.val;\n                }\n            }\n        }\n        \n    }\n    \n    if(tint!=null){\n        let tintNum = parseFloat(tint);\n        if(bg!=null){\n            bg = LightenDarkenColor(bg, tintNum);\n        }\n    }\n\n    return bg;\n}\n\n\n/** \n * @dom xml attribute object\n * @attr attribute name\n * @d if attribute is null, return default value \n * @return attribute value\n*/\nexport function getlineStringAttr(frpr:Element, attr:string):string{\n    let attrEle = frpr.getInnerElements(attr), value;\n\n    if(attrEle!=null && attrEle.length>0){\n        if(attr==\"b\" || attr==\"i\" || attr==\"strike\"){\n            value = \"1\";\n        }\n        else if(attr==\"u\"){\n            let v = attrEle[0].attributeList.val;\n            if(v==\"double\"){\n                value =  \"2\";\n            }\n            else if(v==\"singleAccounting\"){\n                value =  \"3\";\n            }\n            else if(v==\"doubleAccounting\"){\n                value =  \"4\";\n            }\n            else{\n                value = \"1\";\n            }\n        }\n        else if(attr==\"vertAlign\"){\n            let v = attrEle[0].attributeList.val;\n            if(v==\"subscript\"){\n                value = \"1\";\n            }\n            else if(v==\"superscript\"){\n                value = \"2\";\n            }\n        }\n        else{\n            value = attrEle[0].attributeList.val;\n        }\n        \n    }\n\n    return value;\n}","import {stringToNum, IattributeList, numTostring, IDataVerificationMap, IDataVerificationType2Map} from \"../ICommon\";\n\nexport const columeHeader_word:string[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\nexport const columeHeader_word_index:stringToNum = { 'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16, 'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24, 'Z': 25 };\n\nexport const coreFile = \"docProps/core.xml\";\nexport const appFile = \"docProps/app.xml\";\nexport const contentTypesFile = \"[Content_Types].xml\";\nexport const workBookFile = \"xl/workbook.xml\";\nexport const calcChainFile = \"xl/calcChain.xml\";\nexport const stylesFile = \"xl/styles.xml\";\nexport const sharedStringsFile = \"xl/sharedStrings.xml\";\nexport const worksheetFilePath = \"xl/worksheets/\";\nexport const theme1File = \"xl/theme/theme1.xml\";\nexport const workbookRels= \"xl/_rels/workbook.xml.rels\";\n\n\n\n\n//Excel Built-In cell type\nexport const ST_CellType:IattributeList ={\n    \"Boolean\":\"b\",\n    \"Date\":\"d\",\n    \"Error\":\"e\",\n    \"InlineString\":\"inlineStr\",\n    \"Number\":\"n\",\n    \"SharedString\":\"s\",\n    \"String\":\"str\",\n}\n\n//Excel Built-In cell style\nexport const BuiltInCellStyles:IattributeList = {\n    \"0\":\"Normal\",\n\n}\n\n\nexport let numFmtDefault:IattributeList = {\n    \"0\":'General',\n    \"1\": '0',\n    \"2\": '0.00',\n    \"3\": '#,##0',\n    \"4\": '#,##0.00',\n    \"9\":'0%',\n    \"10\": '0.00%',\n    \"11\": '0.00E+00',\n    \"12\": '# ?/?',\n    \"13\": '# ??/??',\n    \"14\": 'm/d/yy',\n    \"15\": 'd-mmm-yy',\n    \"16\": 'd-mmm',\n    \"17\": 'mmm-yy',\n    \"18\": 'h:mm AM/PM',\n    \"19\": 'h:mm:ss AM/PM',\n    \"20\": 'h:mm',\n    \"21\": 'h:mm:ss',\n    \"22\": 'm/d/yy h:mm',\n    \"37\": '#,##0 ;(#,##0)',\n    \"38\": '#,##0 ;[Red](#,##0)',\n    \"39\": '#,##0.00;(#,##0.00)',\n    \"40\": '#,##0.00;[Red](#,##0.00)',\n    \"45\": 'mm:ss',\n    \"46\": '[h]:mm:ss',\n    \"47\": 'mmss.0',\n    \"48\": '##0.0E+0',\n    \"49\": '@'\n}\n\nexport const indexedColors:IattributeList = {\n    \"0\":'00000000',\n    \"1\":'00FFFFFF',\n    \"2\":'00FF0000',\n    \"3\":'0000FF00',\n    \"4\":'000000FF',\n    \"5\":'00FFFF00',\n    \"6\":'00FF00FF',\n    \"7\":'0000FFFF',\n    \"8\":'00000000',\n    \"9\":'00FFFFFF',\n    \"10\":'00FF0000',\n    \"11\":'0000FF00',\n    \"12\":'000000FF',\n    \"13\":'00FFFF00',\n    \"14\":'00FF00FF',\n    \"15\":'0000FFFF',\n    \"16\":'00800000',\n    \"17\":'00008000',\n    \"18\":'00000080',\n    \"19\":'00808000',\n    \"20\":'00800080',\n    \"21\":'00008080',\n    \"22\":'00C0C0C0',\n    \"23\":'00808080',\n    \"24\":'009999FF',\n    \"25\":'00993366',\n    \"26\":'00FFFFCC',\n    \"27\":'00CCFFFF',\n    \"28\":'00660066',\n    \"29\":'00FF8080',\n    \"30\":'000066CC',\n    \"31\":'00CCCCFF',\n    \"32\":'00000080',\n    \"33\":'00FF00FF',\n    \"34\":'00FFFF00',\n    \"35\":'0000FFFF',\n    \"36\":'00800080',\n    \"37\":'00800000',\n    \"38\":'00008080',\n    \"39\":'000000FF',\n    \"40\":'0000CCFF',\n    \"41\":'00CCFFFF',\n    \"42\":'00CCFFCC',\n    \"43\":'00FFFF99',\n    \"44\":'0099CCFF',\n    \"45\":'00FF99CC',\n    \"46\":'00CC99FF',\n    \"47\":'00FFCC99',\n    \"48\":'003366FF',\n    \"49\":'0033CCCC',\n    \"50\":'0099CC00',\n    \"51\":'00FFCC00',\n    \"52\":'00FF9900',\n    \"53\":'00FF6600',\n    \"54\":'00666699',\n    \"55\":'00969696',\n    \"56\":'00003366',\n    \"57\":'00339966',\n    \"58\":'00003300',\n    \"59\":'00333300',\n    \"60\":'00993300',\n    \"61\":'00993366',\n    \"62\":'00333399',\n    \"63\":'00333333',\n    \"64\":null,//system Foreground n/a\n    \"65\":null,//system Background n/a\n}\n\nexport const OEM_CHARSET:IattributeList = {\n    \"0\": \"ANSI_CHARSET\",\n    \"1\": \"DEFAULT_CHARSET\",\n    \"2\": \"SYMBOL_CHARSET\",\n    \"77\": \"MAC_CHARSET\",\n    \"128\": \"SHIFTJIS_CHARSET\",\n    \"129\": \"HANGUL_CHARSET\",\n    \"130\": \"JOHAB_CHARSET\",\n    \"134\": \"GB2312_CHARSET\",\n    \"136\": \"CHINESEBIG5_CHARSET\",\n    \"161\": \"GREEK_CHARSET\",\n    \"162\": \"TURKISH_CHARSET\",\n    \"163\": \"VIETNAMESE_CHARSET\",\n    \"177\": \"HEBREW_CHARSET\",\n    \"178\": \"ARABIC_CHARSET\",\n    \"186\": \"BALTIC_CHARSET\",\n    \"204\": \"RUSSIAN_CHARSET\",\n    \"222\": \"THAI_CHARSET\",\n    \"238\": \"EASTEUROPE_CHARSET\",\n    \"255\": \"OEM_CHARSET\",\n}\n\n\nexport const borderTypes:stringToNum = {\n    \"none\":0,\n    \"thin\":1, \n    \"hair\":2, \n    \"dotted\":3, \n    \"dashed\":4, \n    \"dashDot\":5, \n    \"dashDotDot\":6, \n    \"double\":7, \n    \"medium\":8, \n    \"mediumDashed\":9, \n    \"mediumDashDot\":10, \n    \"mediumDashDotDot\":11, \n    \"slantDashDot\":12, \n    \"thick\":13\n}\n\n\nexport let numFmtDefaultMap: IattributeList = {\n    \"yyyy/m/d;@\": \"yyyy/MM/dd\",\n    \"yyyy&quot;年&quot;m&quot;月&quot;d&quot;日&quot;;@\":\n      \"yyyy&quot;年&quot;MM&quot;月&quot;dd&quot;日&quot;\",\n    \"[$-409]yyyy/m/d\\\\ h:mm\\\\ AM/PM;@\": \"yyyy/MM/dd hh:mm AM/PM\",\n};\n\nexport const fontFamilys:IattributeList = {\n    \"0\":\"defualt\",\n    \"1\":\"Roman\",\n    \"2\":\"Swiss\",\n    \"3\":\"Modern\",\n    \"4\":\"Script\",\n    \"5\":\"Decorative\"\n}\n\nexport const DATA_VERIFICATION_MAP: IDataVerificationMap = {\n    list: \"dropdown\",\n    whole: \"number_integer\",\n    decimal: \"number_decimal\",\n    custom: \"text_content\",\n    textLength: \"text_length\",\n    date: \"date\",\n    \"unknown1\": \"number\", // no match yet\n    \"unknown2\": \"checkbox\", // no match yet\n    \"unknown3\": \"validity\", // no match yet\n};\n\nexport const COMMON_TYPE2: string[] = [\n    \"number\",\n    \"number_integer\",\n    \"number_decimal\",\n    \"text_length\",\n];\n\nexport const DATA_VERIFICATION_TYPE2_MAP: IDataVerificationType2Map = {\n    common: {\n      between: \"bw\",\n      notBetween: \"nb\",\n      equal: \"eq\",\n      notEqualTo: \"ne\",\n      moreThanThe: \"gt\",\n      lessThan: \"lt\",\n      greaterOrEqualTo: \"gte\",\n      lessThanOrEqualTo: \"lte\",\n    },\n    text_content: {\n      include: \"include\",\n      exclude: \"exclude\",\n      equal: \"equal\",\n    },\n    date: {\n      between: \"bw\",\n      notBetween: \"nb\",\n      equal: \"eq\",\n      notEqualTo: \"ne\",\n      earlierThan: \"bf\",\n      noEarlierThan: \"nbf\",\n      laterThan: \"af\",\n      noLaterThan: \"naf\",\n    },\n    validity: {\n      card: \"card\",\n      phone: \"phone\",\n    },\n};\n","export let UDOC:any = {};\n\t\n\tUDOC.G = {\n\t\tconcat : function(p:any,r:any) {\n\t\t\tfor(var i=0; i<r.cmds.length; i++) p.cmds.push(r.cmds[i]);\n\t\t\tfor(var i=0; i<r.crds.length; i++) p.crds.push(r.crds[i]);\n\t\t},\n\t\tgetBB  : function(ps:any) {\n\t\t\tvar x0=1e99, y0=1e99, x1=-x0, y1=-y0;\n\t\t\tfor(var i=0; i<ps.length; i+=2) {  var x=ps[i],y=ps[i+1];  if(x<x0)x0=x; else if(x>x1)x1=x;  if(y<y0)y0=y;  else if(y>y1)y1=y;  }\n\t\t\treturn [x0,y0,x1,y1];\n\t\t},\n\t\trectToPath: function(r:any) {  return  {cmds:[\"M\",\"L\",\"L\",\"L\",\"Z\"],crds:[r[0],r[1],r[2],r[1], r[2],r[3],r[0],r[3]]};  },\n\t\t// a inside b\n\t\tinsideBox: function(a:any,b:any) {  return b[0]<=a[0] && b[1]<=a[1] && a[2]<=b[2] && a[3]<=b[3];   },\n\t\tisBox : function(p:any, bb:any) {\n\t\t\tvar sameCrd8 = function(pcrd:any, crds:any) {\n\t\t\t\tfor(var o=0; o<8; o+=2) {  var eq = true;  for(var j=0; j<8; j++) if(Math.abs(crds[j]-pcrd[(j+o)&7])>=2) {  eq = false;  break;  }    if(eq) return true;  }\n\t\t\t\treturn false;\n\t\t\t};\n\t\t\tif(p.cmds.length>10) return false;\n\t\t\tvar cmds=p.cmds.join(\"\"), crds=p.crds;\n\t\t\tvar sameRect = false;\n\t\t\tif((cmds==\"MLLLZ\"  && crds.length== 8) \n\t\t\t ||(cmds==\"MLLLLZ\" && crds.length==10) ) {\n\t\t\t\tif(crds.length==10) crds=crds.slice(0,8);\n\t\t\t\tvar x0=bb[0],y0=bb[1],x1=bb[2],y1=bb[3];\n\t\t\t\tif(!sameRect) sameRect = sameCrd8(crds, [x0,y0,x1,y0,x1,y1,x0,y1]);\n\t\t\t\tif(!sameRect) sameRect = sameCrd8(crds, [x0,y1,x1,y1,x1,y0,x0,y0]);\n\t\t\t}\n\t\t\treturn sameRect;\n\t\t},\n\t\tboxArea: function(a:any) {  var w=a[2]-a[0], h=a[3]-a[1];  return w*h;  },\n\t\tnewPath: function(gst:any    ) {  gst.pth = {cmds:[], crds:[]};  },\n\t\tmoveTo : function(gst:any,x:any,y:any) {  var p=UDOC.M.multPoint(gst.ctm,[x,y]);  //if(gst.cpos[0]==p[0] && gst.cpos[1]==p[1]) return;\n\t\t\t\t\t\t\t\t\t\tgst.pth.cmds.push(\"M\");  gst.pth.crds.push(p[0],p[1]);  gst.cpos = p;  },\n\t\tlineTo : function(gst:any,x:any,y:any) {  var p=UDOC.M.multPoint(gst.ctm,[x,y]);  if(gst.cpos[0]==p[0] && gst.cpos[1]==p[1]) return;\n\t\t\t\t\t\t\t\t\t\tgst.pth.cmds.push(\"L\");  gst.pth.crds.push(p[0],p[1]);  gst.cpos = p;  },\n\t\tcurveTo: function(gst:any,x1:any,y1:any,x2:any,y2:any,x3:any,y3:any) {   var p;  \n\t\t\tp=UDOC.M.multPoint(gst.ctm,[x1,y1]);  x1=p[0];  y1=p[1];\n\t\t\tp=UDOC.M.multPoint(gst.ctm,[x2,y2]);  x2=p[0];  y2=p[1];\n\t\t\tp=UDOC.M.multPoint(gst.ctm,[x3,y3]);  x3=p[0];  y3=p[1];  gst.cpos = p;\n\t\t\tgst.pth.cmds.push(\"C\");  \n\t\t\tgst.pth.crds.push(x1,y1,x2,y2,x3,y3);  \n\t\t},\n\t\tclosePath: function(gst:any  ) {  gst.pth.cmds.push(\"Z\");  },\n\t\tarc : function(gst:any,x:any,y:any,r:any,a0:any,a1:any, neg:any) {\n\t\t\t\n\t\t\t// circle from a0 counter-clock-wise to a1\n\t\t\tif(neg) while(a1>a0) a1-=2*Math.PI;\n\t\t\telse    while(a1<a0) a1+=2*Math.PI;\n\t\t\tvar th = (a1-a0)/4;\n\t\t\t\n\t\t\tvar x0 = Math.cos(th/2), y0 = -Math.sin(th/2);\n\t\t\tvar x1 = (4-x0)/3, y1 = y0==0 ? y0 : (1-x0)*(3-x0)/(3*y0);\n\t\t\tvar x2 = x1, y2 = -y1;\n\t\t\tvar x3 = x0, y3 = -y0;\n\t\t\t\n\t\t\tvar p0 = [x0,y0], p1 = [x1,y1], p2 = [x2,y2], p3 = [x3,y3];\n\t\t\t\n\t\t\tvar pth = {cmds:[(gst.pth.cmds.length==0)?\"M\":\"L\",\"C\",\"C\",\"C\",\"C\"], crds:[x0,y0,x1,y1,x2,y2,x3,y3]};\n\t\t\t\n\t\t\tvar rot = [1,0,0,1,0,0];  UDOC.M.rotate(rot,-th);\n\t\t\t\n\t\t\tfor(var i=0; i<3; i++) {\n\t\t\t\tp1 = UDOC.M.multPoint(rot,p1);  p2 = UDOC.M.multPoint(rot,p2);  p3 = UDOC.M.multPoint(rot,p3);\n\t\t\t\tpth.crds.push(p1[0],p1[1],p2[0],p2[1],p3[0],p3[1]);\n\t\t\t}\n\t\t\t\n\t\t\tvar sc = [r,0,0,r,x,y];  \n\t\t\tUDOC.M.rotate(rot, -a0+th/2);  UDOC.M.concat(rot, sc);  UDOC.M.multArray(rot, pth.crds);\n\t\t\tUDOC.M.multArray(gst.ctm, pth.crds);\n\t\t\t\n\t\t\tUDOC.G.concat(gst.pth, pth);\n\t\t\tvar y:any=pth.crds.pop();  x=pth.crds.pop();\n\t\t\tgst.cpos = [x,y];\n\t\t},\n\t\ttoPoly : function(p:any) {\n\t\t\tif(p.cmds[0]!=\"M\" || p.cmds[p.cmds.length-1]!=\"Z\") return null;\n\t\t\tfor(var i=1; i<p.cmds.length-1; i++) if(p.cmds[i]!=\"L\") return null;\n\t\t\tvar out = [], cl = p.crds.length;\n\t\t\tif(p.crds[0]==p.crds[cl-2] && p.crds[1]==p.crds[cl-1]) cl-=2;\n\t\t\tfor(var i=0; i<cl; i+=2) out.push([p.crds[i],p.crds[i+1]]);\n\t\t\tif(UDOC.G.polyArea(p.crds)<0) out.reverse();\n\t\t\treturn out;\n\t\t},\n\t\tfromPoly : function(p:any) {\n\t\t\tvar o:any = {cmds:[],crds:[]};\n\t\t\tfor(var i=0; i<p.length; i++) { o.crds.push(p[i][0], p[i][1]);  o.cmds.push(i==0?\"M\":\"L\");  }\n\t\t\to.cmds.push(\"Z\");\n\t\t\treturn o;\n\t\t},\n\t\tpolyArea : function(p:any) {\n\t\t\tif(p.length <6) return 0;\n\t\t\tvar l = p.length - 2;\n\t\t\tvar sum = (p[0]-p[l]) * (p[l+1]+p[1]);\n\t\t\tfor(var i=0; i<l; i+=2)\n\t\t\t\tsum += (p[i+2]-p[i]) * (p[i+1]+p[i+3]);\n\t\t\treturn - sum * 0.5;\n\t\t},\n\t\tpolyClip : function(p0:any, p1:any) {  // p0 clipped by p1\n            var cp1:any, cp2:any, s:any, e:any;\n            var inside = function (p:any) {\n                return (cp2[0]-cp1[0])*(p[1]-cp1[1]) > (cp2[1]-cp1[1])*(p[0]-cp1[0]);\n            };\n            var isc = function () {\n                var dc = [ cp1[0] - cp2[0], cp1[1] - cp2[1] ],\n                    dp = [ s[0] - e[0], s[1] - e[1] ],\n                    n1 = cp1[0] * cp2[1] - cp1[1] * cp2[0],\n                    n2 = s[0] * e[1] - s[1] * e[0], \n                    n3 = 1.0 / (dc[0] * dp[1] - dc[1] * dp[0]);\n                return [(n1*dp[0] - n2*dc[0]) * n3, (n1*dp[1] - n2*dc[1]) * n3];\n            };\n            var out = p0;\n            cp1 = p1[p1.length-1];\n            for (let j in p1) {\n                var cp2 = p1[j];\n                var inp = out;\n                out = [];\n                s = inp[inp.length - 1]; //last on the input list\n                for (let i in inp) {\n                    var e = inp[i];\n                    if (inside(e)) {\n                        if (!inside(s)) {\n                            out.push(isc());\n                        }\n                        out.push(e);\n                    }\n                    else if (inside(s)) {\n                        out.push(isc());\n                    }\n                    s = e;\n                }\n                cp1 = cp2;\n            }\n            return out\n        }\n\t}\n\tUDOC.M = {\n\t\tgetScale : function(m:any) {  return Math.sqrt(Math.abs(m[0]*m[3]-m[1]*m[2]));  },\n\t\ttranslate: function(m:any,x:any,y:any) {  UDOC.M.concat(m, [1,0,0,1,x,y]);  },\n\t\trotate   : function(m:any,a:any  ) {  UDOC.M.concat(m, [Math.cos(a), -Math.sin(a), Math.sin(a), Math.cos(a),0,0]);  },\n\t\tscale    : function(m:any,x:any,y:any) {  UDOC.M.concat(m, [x,0,0,y,0,0]);  },\n\t\tconcat   : function(m:any,w:any  ) {  \n\t\t\tvar a=m[0],b=m[1],c=m[2],d=m[3],tx=m[4],ty=m[5];\n\t\t\tm[0] = (a *w[0])+(b *w[2]);       m[1] = (a *w[1])+(b *w[3]);\n\t\t\tm[2] = (c *w[0])+(d *w[2]);       m[3] = (c *w[1])+(d *w[3]);\n\t\t\tm[4] = (tx*w[0])+(ty*w[2])+w[4];  m[5] = (tx*w[1])+(ty*w[3])+w[5]; \n\t\t},\n\t\tinvert   : function(m:any    ) {  \n\t\t\tvar a=m[0],b=m[1],c=m[2],d=m[3],tx=m[4],ty=m[5], adbc=a*d-b*c;\n\t\t\tm[0] = d/adbc;  m[1] = -b/adbc;  m[2] =-c/adbc;  m[3] =  a/adbc;\n\t\t\tm[4] = (c*ty - d*tx)/adbc;  m[5] = (b*tx - a*ty)/adbc;\n\t\t},\n\t\tmultPoint: function(m:any, p:any ) {  var x=p[0],y=p[1];  return [x*m[0]+y*m[2]+m[4],   x*m[1]+y*m[3]+m[5]];  },\n\t\tmultArray: function(m:any, a:any ) {  for(var i=0; i<a.length; i+=2) {  var x=a[i],y=a[i+1];  a[i]=x*m[0]+y*m[2]+m[4];  a[i+1]=x*m[1]+y*m[3]+m[5];  }  }\n\t}\n\tUDOC.C = {\n\t\tsrgbGamma : function(x:any) {  return x < 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1.0 / 2.4) - 0.055;  },\n\t\tcmykToRgb : function(clr:any) { \n\t\t\tvar c=clr[0], m=clr[1], y=clr[2], k=clr[3];\n\t\t\t// return [1-Math.min(1,c+k), 1-Math.min(1, m+k), 1-Math.min(1,y+k)];\n\t\t\tvar r = 255\n\t\t\t+ c * (-4.387332384609988  * c + 54.48615194189176  * m +  18.82290502165302  * y + 212.25662451639585 * k +  -285.2331026137004) \n\t\t\t+ m * ( 1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) \n\t\t\t+ y * (-2.5217340131683033 * y - 21.248923337353073 * k +  17.5119270841813) \n\t\t\t+ k * (-21.86122147463605  * k - 189.48180835922747);\n\t\t\tvar g = 255\n\t\t\t+ c * (8.841041422036149   * c + 60.118027045597366 * m +  6.871425592049007  * y + 31.159100130055922 * k +  -79.2970844816548) \n\t\t\t+ m * (-15.310361306967817 * m + 17.575251261109482 * y +  131.35250912493976 * k - 190.9453302588951) \n\t\t\t+ y * (4.444339102852739   * y + 9.8632861493405    * k -  24.86741582555878) \n\t\t\t+ k * (-20.737325471181034 * k - 187.80453709719578);\n\t\t\tvar b = 255\n\t\t\t+ c * (0.8842522430003296  * c + 8.078677503112928  * m +  30.89978309703729  * y - 0.23883238689178934 * k + -14.183576799673286) \n\t\t\t+ m * (10.49593273432072   * m + 63.02378494754052  * y +  50.606957656360734 * k - 112.23884253719248) \n\t\t\t+ y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505)\n\t\t\t+ k * (-22.33816807309886  * k - 180.12613974708367);\n\n\t\t\treturn [Math.max(0, Math.min(1, r/255)), Math.max(0, Math.min(1, g/255)), Math.max(0, Math.min(1, b/255))];\n\t\t\t//var iK = 1-c[3];  \n\t\t\t//return [(1-c[0])*iK, (1-c[1])*iK, (1-c[2])*iK];  \n\t\t},\n\t\tlabToRgb  : function(lab:any) {\n\t\t\tvar k = 903.3, e = 0.008856, L = lab[0], a = lab[1], b = lab[2];\n\t\t\tvar fy = (L+16)/116, fy3 = fy*fy*fy;\n\t\t\tvar fz = fy - b/200, fz3 = fz*fz*fz;\n\t\t\tvar fx = a/500 + fy, fx3 = fx*fx*fx;\n\t\t\tvar zr = fz3>e ? fz3 : (116*fz-16)/k;\n\t\t\tvar yr = fy3>e ? fy3 : (116*fy-16)/k;\n\t\t\tvar xr = fx3>e ? fx3 : (116*fx-16)/k;\n\t\t\t\t\n\t\t\tvar X = xr*96.72, Y = yr*100, Z = zr*81.427, xyz = [X/100,Y/100,Z/100];\n\t\t\tvar x2s = [3.1338561, -1.6168667, -0.4906146, -0.9787684,  1.9161415,  0.0334540, 0.0719453, -0.2289914,  1.4052427];\n\t\t\t\n\t\t\tvar rgb = [ x2s[0]*xyz[0] + x2s[1]*xyz[1] + x2s[2]*xyz[2],\n\t\t\t\t\t\tx2s[3]*xyz[0] + x2s[4]*xyz[1] + x2s[5]*xyz[2],\n\t\t\t\t\t\tx2s[6]*xyz[0] + x2s[7]*xyz[1] + x2s[8]*xyz[2]  ];\n\t\t\tfor(var i=0; i<3; i++) rgb[i] = Math.max(0, Math.min(1, UDOC.C.srgbGamma(rgb[i])));\n\t\t\treturn rgb;\n\t\t}\n\t}\n\t\n\tUDOC.getState = function(crds:any):any {\n\t\treturn {\n\t\t\tfont : UDOC.getFont(),\n\t\t\tdd: {flat:1},  // device-dependent\n\t\t\tspace :\"/DeviceGray\",\n\t\t\t// fill\n\t\t\tca: 1,\n\t\t\tcolr  : [0,0,0],\n\t\t\tsspace:\"/DeviceGray\",\n\t\t\t// stroke\n\t\t\tCA: 1,\n\t\t\tCOLR : [0,0,0],\n\t\t\tbmode: \"/Normal\",\n\t\t\tSA:false, OPM:0, AIS:false, OP:false, op:false, SMask:\"/None\",\n\t\t\tlwidth : 1,\n\t\t\tlcap: 0,\n\t\t\tljoin: 0,\n\t\t\tmlimit: 10,\n\t\t\tSM : 0.1,\n\t\t\tdoff: 0,\n\t\t\tdash: [],\n\t\t\tctm : [1,0,0,1,0,0],\n\t\t\tcpos: [0,0],\n\t\t\tpth : {cmds:[],crds:[]}, \n\t\t\tcpth: crds ? UDOC.G.rectToPath(crds) : null  // clipping path\n\t\t};\n\t}\n\t\n\tUDOC.getFont = function() {\n\t\treturn {\n\t\t\tTc: 0, // character spacing\n\t\t\tTw: 0, // word spacing\n\t\t\tTh:100, // horizontal scale\n\t\t\tTl: 0, // leading\n\t\t\tTf:\"Helvetica-Bold\", \n\t\t\tTfs:1, // font size\n\t\t\tTmode:0, // rendering mode\n\t\t\tTrise:0, // rise\n\t\t\tTk: 0,  // knockout\n\t\t\tTal:0,  // align, 0: left, 1: right, 2: center\n\t\t\tTun:0,  // 0: no, 1: underline\n\t\t\t\n\t\t\tTm :[1,0,0,1,0,0],\n\t\t\tTlm:[1,0,0,1,0,0],\n\t\t\tTrm:[1,0,0,1,0,0]\n\t\t};\n\t}\n\n\nexport let FromEMF:any = function()\n{\n}\n\nFromEMF.Parse = function(buff:any, genv:any)\n{\n    buff = new Uint8Array(buff);  var off=0;\n    //console.log(buff.slice(0,32));\n    var prms:any = {fill:false, strk:false, bb:[0,0,1,1], wbb:[0,0,1,1], fnt:{nam:\"Arial\",hgh:25,und:false,orn:0}, tclr:[0,0,0], talg:0}, gst, tab = [], sts=[];\n    \n    var rI = FromEMF.B.readShort, rU = FromEMF.B.readUshort, rI32 = FromEMF.B.readInt, rU32 = FromEMF.B.readUint, rF32 = FromEMF.B.readFloat;\t\n    \n    var opn=0;\n    while(true) {\n        var fnc = rU32(buff, off);  off+=4;\n        var fnm = FromEMF.K[fnc]; \n        var siz = rU32(buff, off);  off+=4;\n        \n        //if(gst && isNaN(gst.ctm[0])) throw \"e\";\n        //console.log(fnc,fnm,siz);\n        \n        var loff = off;\n        \n        //if(opn++==253) break;\n        var obj:any = null, oid = 0;\n        //console.log(fnm, siz);\n        \n        if(false) {}\n        else if(fnm==\"EOF\") {  break;  }\n        else if(fnm==\"HEADER\") {\n            prms.bb = FromEMF._readBox(buff,loff);   loff+=16;  //console.log(fnm, prms.bb);\n            genv.StartPage(prms.bb[0],prms.bb[1],prms.bb[2],prms.bb[3]);\n            gst = UDOC.getState(prms.bb);\t\n        }\n        else if(fnm==\"SAVEDC\") sts.push(JSON.stringify(gst), JSON.stringify(prms));\n        else if(fnm==\"RESTOREDC\") {\n            var dif = rI32(buff, loff);  loff+=4;\n            while(dif<-1) {  sts.pop();  sts.pop();  }\n            prms = JSON.parse(sts.pop());  gst = JSON.parse(sts.pop());\n        }\n        else if(fnm==\"SELECTCLIPPATH\") {  gst.cpth = JSON.parse(JSON.stringify(gst.pth));  }\n        else if([\"SETMAPMODE\",\"SETPOLYFILLMODE\",\"SETBKMODE\"/*,\"SETVIEWPORTEXTEX\"*/,\"SETICMMODE\",\"SETROP2\",\"EXTSELECTCLIPRGN\"].indexOf(fnm)!=-1) {}\n        //else if(fnm==\"INTERSECTCLIPRECT\") {  var r=prms.crct=FromEMF._readBox(buff, loff);  /*var y0=r[1],y1=r[3]; if(y0>y1){r[1]=y1; r[3]=y0;}*/ console.log(prms.crct);  }\n        else if(fnm==\"SETMITERLIMIT\") gst.mlimit = rU32(buff, loff);\n        else if(fnm==\"SETTEXTCOLOR\") prms.tclr = [buff[loff]/255, buff[loff+1]/255, buff[loff+2]/255]; \n        else if(fnm==\"SETTEXTALIGN\") prms.talg = rU32(buff, loff);\n        else if(fnm==\"SETVIEWPORTEXTEX\" || fnm==\"SETVIEWPORTORGEX\") {\n            if(prms.vbb==null) prms.vbb=[];\n            var coff = fnm==\"SETVIEWPORTORGEX\" ? 0 : 2;\n            prms.vbb[coff  ] = rI32(buff, loff);  loff+=4;\n            prms.vbb[coff+1] = rI32(buff, loff);  loff+=4;\n            //console.log(prms.vbb);\n            if(fnm==\"SETVIEWPORTEXTEX\") FromEMF._updateCtm(prms, gst);\n        }\n        else if(fnm==\"SETWINDOWEXTEX\" || fnm==\"SETWINDOWORGEX\") {\n            var coff = fnm==\"SETWINDOWORGEX\" ? 0 : 2;\n            prms.wbb[coff  ] = rI32(buff, loff);  loff+=4;\n            prms.wbb[coff+1] = rI32(buff, loff);  loff+=4;\n            if(fnm==\"SETWINDOWEXTEX\") FromEMF._updateCtm(prms, gst);\n        }\n        //else if(fnm==\"SETMETARGN\") {}\n        else if(fnm==\"COMMENT\") {  var ds = rU32(buff, loff);  loff+=4;  }\n        \n        else if(fnm==\"SELECTOBJECT\") {\n            var ind = rU32(buff, loff);  loff+=4;\n            //console.log(ind.toString(16), tab, tab[ind]);\n            if     (ind==0x80000000) {  prms.fill=true ;  gst.colr=[1,1,1];  } // white brush\n            else if(ind==0x80000005) {  prms.fill=false;  } // null brush\n            else if(ind==0x80000007) {  prms.strk=true ;  prms.lwidth=1;  gst.COLR=[0,0,0];  } // black pen\n            else if(ind==0x80000008) {  prms.strk=false;  } // null  pen\n            else if(ind==0x8000000d) {} // system font\n            else if(ind==0x8000000e) {}  // device default font\n            else {\n                var co:any = tab[ind];  //console.log(ind, co);\n                if(co.t==\"b\") {\n                    prms.fill=co.stl!=1;\n                    if     (co.stl==0) {}\n                    else if(co.stl==1) {}\n                    else throw co.stl+\" e\";\n                    gst.colr=co.clr;\n                }\n                else if(co.t==\"p\") {\n                    prms.strk=co.stl!=5;\n                    gst.lwidth = co.wid;\n                    gst.COLR=co.clr;\n                }\n                else if(co.t==\"f\") {\n                    prms.fnt = co;\n                    gst.font.Tf = co.nam;\n                    gst.font.Tfs = Math.abs(co.hgh);\n                    gst.font.Tun = co.und;\n                }\n                else throw \"e\";\n            }\n        }\n        else if(fnm==\"DELETEOBJECT\") {\n            var ind = rU32(buff, loff);  loff+=4;\n            if(tab[ind]!=null) tab[ind]=null;\n            else throw \"e\";\n        }\n        else if(fnm==\"CREATEBRUSHINDIRECT\") {\n            oid = rU32(buff, loff);  loff+=4;\n            obj = {t:\"b\"};\n            obj.stl = rU32(buff, loff);  loff+=4;\n            obj.clr = [buff[loff]/255, buff[loff+1]/255, buff[loff+2]/255];  loff+=4;\n            obj.htc = rU32(buff, loff);  loff+=4;\n            //console.log(oid, obj);\n        }\n        else if(fnm==\"CREATEPEN\" || fnm==\"EXTCREATEPEN\") {\n            oid = rU32(buff, loff);  loff+=4;\n            obj = {t:\"p\"};\n            if(fnm==\"EXTCREATEPEN\") {\n                loff+=16;\n                obj.stl = rU32(buff, loff);  loff+=4;\n                obj.wid = rU32(buff, loff);  loff+=4;\n                //obj.stl = rU32(buff, loff);  \n                loff+=4;\n            } else {\n                obj.stl = rU32(buff, loff);  loff+=4;\n                obj.wid = rU32(buff, loff);  loff+=4;  loff+=4;\n            }\n            obj.clr = [buff[loff]/255, buff[loff+1]/255, buff[loff+2]/255];  loff+=4;\n        }\n        else if(fnm==\"EXTCREATEFONTINDIRECTW\") {\n            oid = rU32(buff, loff);  loff+=4;\n            obj = {t:\"f\", nam:\"\"};\n            obj.hgh = rI32(buff, loff);  loff += 4;\n            loff += 4*2;\n            obj.orn = rI32(buff, loff)/10;  loff+=4;\n            var wgh = rU32(buff, loff);  loff+=4;  //console.log(fnm, obj.orn, wgh);\n            //console.log(rU32(buff,loff), rU32(buff,loff+4), buff.slice(loff,loff+8));\n            obj.und = buff[loff+1];  obj.stk = buff[loff+2];  loff += 4*2;\n            while(rU(buff,loff)!=0) {  obj.nam+=String.fromCharCode(rU(buff,loff));  loff+=2;  }\n            if(wgh>500) obj.nam+=\"-Bold\";\n            //console.log(wgh, obj.nam);\n        }\n        else if(fnm==\"EXTTEXTOUTW\") {\n            //console.log(buff.slice(loff-8, loff-8+siz));\n            loff+=16;\n            var mod = rU32(buff, loff);  loff+=4;  //console.log(mod);\n            var scx = rF32(buff, loff);  loff+=4;\n            var scy = rF32(buff, loff);  loff+=4;\n            var rfx = rI32(buff, loff);  loff+=4;\n            var rfy = rI32(buff, loff);  loff+=4;\n            //console.log(mod, scx, scy,rfx,rfy);\n            \n            gst.font.Tm = [1,0,0,-1,0,0];\n            UDOC.M.rotate(gst.font.Tm, prms.fnt.orn*Math.PI/180);\n            UDOC.M.translate(gst.font.Tm, rfx, rfy);\n            \n            var alg = prms.talg;  //console.log(alg.toString(2));\n            if     ((alg&6)==6) gst.font.Tal = 2;\n            else if((alg&7)==0) gst.font.Tal = 0;\n            else throw alg+\" e\";\n            if((alg&24)==24) {}  // baseline\n            else if((alg&24)==0) UDOC.M.translate(gst.font.Tm, 0, gst.font.Tfs);\n            else throw \"e\";\n            \n            \n            var crs = rU32(buff, loff);  loff+=4;\n            var ofs = rU32(buff, loff);  loff+=4;\n            var ops = rU32(buff, loff);  loff+=4;  //if(ops!=0) throw \"e\";\n            //console.log(ofs,ops,crs);\n            loff+=16;\n            var ofD = rU32(buff, loff);  loff+=4;  //console.log(ops, ofD, loff, ofs+off-8);\n            ofs += off-8;  //console.log(crs, ops);\n            var str = \"\";\n            for(var i=0; i<crs; i++) {  var cc=rU(buff,ofs+i*2);  str+=String.fromCharCode(cc);  };\n            var oclr = gst.colr;  gst.colr = prms.tclr;\n            //console.log(str, gst.colr, gst.font.Tm);\n            //var otfs = gst.font.Tfs;  gst.font.Tfs *= 1/gst.ctm[0];\n            genv.PutText(gst, str, str.length*gst.font.Tfs*0.5);  gst.colr=oclr;\n            //gst.font.Tfs = otfs;\n            //console.log(rfx, rfy, scx, ops, rcX, rcY, rcW, rcH, offDx, str);\n        }\n        else if(fnm==\"BEGINPATH\") {  UDOC.G.newPath(gst);  }\n        else if(fnm==\"ENDPATH\"  ) {    }\n        else if(fnm==\"CLOSEFIGURE\") UDOC.G.closePath(gst);\n        else if(fnm==\"MOVETOEX\" ) {  UDOC.G.moveTo(gst, rI32(buff,loff), rI32(buff,loff+4));  }\n        else if(fnm==\"LINETO\"   ) {  \n            if(gst.pth.cmds.length==0) {  var im=gst.ctm.slice(0);  UDOC.M.invert(im);  var p = UDOC.M.multPoint(im, gst.cpos);  UDOC.G.moveTo(gst, p[0], p[1]);  }  \n            UDOC.G.lineTo(gst, rI32(buff,loff), rI32(buff,loff+4));  }\n        else if(fnm==\"POLYGON\" || fnm==\"POLYGON16\" || fnm==\"POLYLINE\" || fnm==\"POLYLINE16\" || fnm==\"POLYLINETO\" || fnm==\"POLYLINETO16\") {\n            loff+=16;\n            var ndf = fnm.startsWith(\"POLYGON\"), isTo = fnm.indexOf(\"TO\")!=-1;\n            var cnt = rU32(buff, loff);  loff+=4;\n            if(!isTo) UDOC.G.newPath(gst);\n            loff = FromEMF._drawPoly(buff,loff,cnt,gst, fnm.endsWith(\"16\")?2:4,  ndf, isTo);\n            if(!isTo) FromEMF._draw(genv,gst,prms, ndf);\n            //console.log(prms, gst.lwidth);\n            //console.log(JSON.parse(JSON.stringify(gst.pth)));\n        }\n        else if(fnm==\"POLYPOLYGON16\") {\n            loff+=16;\n            var ndf = fnm.startsWith(\"POLYPOLYGON\"), isTo = fnm.indexOf(\"TO\")!=-1;\n            var nop = rU32(buff, loff);  loff+=4;  loff+=4;\n            var pi = loff;  loff+= nop*4;\n            \n            if(!isTo) UDOC.G.newPath(gst);\n            for(var i=0; i<nop; i++) {\n                var ppp = rU(buff, pi+i*4);\n                loff = FromEMF._drawPoly(buff,loff,ppp,gst, fnm.endsWith(\"16\")?2:4, ndf, isTo);\n            }\n            if(!isTo) FromEMF._draw(genv,gst,prms, ndf);\n        }\n        else if(fnm==\"POLYBEZIER\" || fnm==\"POLYBEZIER16\" || fnm==\"POLYBEZIERTO\" || fnm==\"POLYBEZIERTO16\") {\n            loff+=16;\n            var is16 = fnm.endsWith(\"16\"), rC = is16?rI:rI32, nl = is16?2:4;\n            var cnt = rU32(buff, loff);  loff+=4;\n            if(fnm.indexOf(\"TO\")==-1) {\n                UDOC.G.moveTo(gst, rC(buff,loff), rC(buff,loff+nl));  loff+=2*nl;  cnt--;\n            }\n            while(cnt>0) {\n                UDOC.G.curveTo(gst, rC(buff,loff), rC(buff,loff+nl), rC(buff,loff+2*nl), rC(buff,loff+3*nl), rC(buff,loff+4*nl), rC(buff,loff+5*nl) );\n                loff+=6*nl;\n                cnt-=3;\n            }\n            //console.log(JSON.parse(JSON.stringify(gst.pth)));\n        }\n        else if(fnm==\"RECTANGLE\" || fnm==\"ELLIPSE\") {\n            UDOC.G.newPath(gst);\n            var bx = FromEMF._readBox(buff, loff);\n            if(fnm==\"RECTANGLE\") {\n                UDOC.G.moveTo(gst, bx[0],bx[1]);\n                UDOC.G.lineTo(gst, bx[2],bx[1]);\n                UDOC.G.lineTo(gst, bx[2],bx[3]);\n                UDOC.G.lineTo(gst, bx[0],bx[3]);\n            }\n            else {\n                var x = (bx[0]+bx[2])/2, y = (bx[1]+bx[3])/2;\n                UDOC.G.arc(gst,x,y,(bx[2]-bx[0])/2,0,2*Math.PI, false);\n            }\n            UDOC.G.closePath(gst);\n            FromEMF._draw(genv,gst,prms, true);\n            //console.log(prms, gst.lwidth);\n        }\n        else if(fnm==\"FILLPATH\"  ) genv.Fill(gst, false);\n        else if(fnm==\"STROKEPATH\") genv.Stroke(gst);\n        else if(fnm==\"STROKEANDFILLPATH\") {  genv.Fill(gst, false);  genv.Stroke(gst);  }\n        else if(fnm==\"SETWORLDTRANSFORM\" || fnm==\"MODIFYWORLDTRANSFORM\") {\n            var mat = [];\n            for(var i=0; i<6; i++) mat.push(rF32(buff,loff+i*4));  loff+=24;\n            //console.log(fnm, gst.ctm.slice(0), mat);\n            if(fnm==\"SETWORLDTRANSFORM\") gst.ctm=mat;\n            else {\n                var mod = rU32(buff,loff);  loff+=4;\n                if(mod==2) {  var om=gst.ctm;  gst.ctm=mat;  UDOC.M.concat(gst.ctm, om);  }\n                else throw \"e\";\n            }\n        }\n        else if(fnm==\"SETSTRETCHBLTMODE\") {  var sm = rU32(buff, loff);  loff+=4;  }\n        else if(fnm==\"STRETCHDIBITS\") {\n            var bx = FromEMF._readBox(buff, loff);  loff+=16;\n            var xD = rI32(buff, loff);  loff+=4;\n            var yD = rI32(buff, loff);  loff+=4;\n            var xS = rI32(buff, loff);  loff+=4;\n            var yS = rI32(buff, loff);  loff+=4;\n            var wS = rI32(buff, loff);  loff+=4;\n            var hS = rI32(buff, loff);  loff+=4;\n            var ofH = rU32(buff, loff)+off-8;  loff+=4;\n            var szH = rU32(buff, loff);  loff+=4;\n            var ofB = rU32(buff, loff)+off-8;  loff+=4;\n            var szB = rU32(buff, loff);  loff+=4;\n            var usg = rU32(buff, loff);  loff+=4;  if(usg!=0) throw \"e\";\n            var bop = rU32(buff, loff);  loff+=4;\n            var wD = rI32(buff, loff);  loff+=4;\n            var hD = rI32(buff, loff);  loff+=4;  //console.log(bop, wD, hD);\n            \n            //console.log(ofH, szH, ofB, szB, ofH+40);\n            //console.log(bx, xD,yD,wD,hD);\n            //console.log(xS,yS,wS,hS);\n            //console.log(ofH,szH,ofB,szB,usg,bop);\n            \n            var hl = rU32(buff, ofH);  ofH+=4;\n            var w  = rU32(buff, ofH);  ofH+=4;\n            var h  = rU32(buff, ofH);  ofH+=4;  if(w!=wS || h!=hS) throw \"e\";\n            var ps = rU  (buff, ofH);  ofH+=2;\n            var bc = rU  (buff, ofH);  ofH+=2;  if(bc!=8 && bc!=24 && bc!=32) throw bc+\" e\";\n            var cpr= rU32(buff, ofH);  ofH+=4;  if(cpr!=0) throw cpr+\" e\";\n            var sz = rU32(buff, ofH);  ofH+=4;\n            var xpm= rU32(buff, ofH);  ofH+=4;\n            var ypm= rU32(buff, ofH);  ofH+=4;\n            var cu = rU32(buff, ofH);  ofH+=4;\n            var ci = rU32(buff, ofH);  ofH+=4;  //console.log(hl, w, h, ps, bc, cpr, sz, xpm, ypm, cu, ci);\n            \n            //console.log(hl,w,h,\",\",xS,yS,wS,hS,\",\",xD,yD,wD,hD,\",\",xpm,ypm);\n            \n            var rl = Math.floor(((w * ps * bc + 31) & ~31) / 8);\n            var img = new Uint8Array(w*h*4);\n            if(bc==8) {\n                for(var y=0; y<h; y++) \n                    for(var x=0; x<w; x++) {\n                        var qi = (y*w+x)<<2, ind:any = buff[ofB+(h-1-y)*rl+x]<<2;\n                        img[qi  ] = buff[ofH+ind+2];\n                        img[qi+1] = buff[ofH+ind+1];\n                        img[qi+2] = buff[ofH+ind+0];\n                        img[qi+3] = 255;\n                    }\n            }\n            if(bc==24) {\n                for(var y=0; y<h; y++) \n                    for(var x=0; x<w; x++) {\n                        var qi = (y*w+x)<<2, ti=ofB+(h-1-y)*rl+x*3;\n                        img[qi  ] = buff[ti+2];\n                        img[qi+1] = buff[ti+1];\n                        img[qi+2] = buff[ti+0];\n                        img[qi+3] = 255;\n                    }\n            }\n            if(bc==32) {\n                for(var y=0; y<h; y++) \n                    for(var x=0; x<w; x++) {\n                        var qi = (y*w+x)<<2, ti=ofB+(h-1-y)*rl+x*4;\n                        img[qi  ] = buff[ti+2];\n                        img[qi+1] = buff[ti+1];\n                        img[qi+2] = buff[ti+0];\n                        img[qi+3] = buff[ti+3];\n                    }\n            }\n            \n            var ctm = gst.ctm.slice(0);\n            gst.ctm = [1,0,0,1,0,0];\n            UDOC.M.scale(gst.ctm, wD, -hD);\n            UDOC.M.translate(gst.ctm, xD, yD+hD);\n            UDOC.M.concat(gst.ctm, ctm);\n            genv.PutImage(gst, img, w, h);\n            gst.ctm = ctm;\n        }\n        else {\n            console.log(fnm, siz);\n        }\n        \n        if(obj!=null) tab[oid]=obj;\n        \n        off+=siz-8;\n    }\n    //genv.Stroke(gst);\n    genv.ShowPage();  genv.Done();\n}\nFromEMF._readBox = function(buff:any, off:any) {  var b=[];  for(var i=0; i<4; i++) b[i] = FromEMF.B.readInt(buff,off+i*4);  return b;  }\t\n\nFromEMF._updateCtm = function(prms:any, gst:any) {\n    var mat = [1,0,0,1,0,0];\n    var wbb = prms.wbb, bb = prms.bb, vbb=(prms.vbb && prms.vbb.length==4) ? prms.vbb:prms.bb;\n    \n    //var y0 = bb[1], y1 = bb[3];  bb[1]=Math.min(y0,y1);  bb[3]=Math.max(y0,y1);\n    \n    UDOC.M.translate(mat, -wbb[0],-wbb[1]);\n    UDOC.M.scale(mat, 1/wbb[2], 1/wbb[3]);\n    \n    UDOC.M.scale(mat, vbb[2], vbb[3]);\n    //UDOC.M.scale(mat, vbb[2]/(bb[2]-bb[0]), vbb[3]/(bb[3]-bb[1]));\n    \n    //UDOC.M.scale(mat, bb[2]-bb[0],bb[3]-bb[1]);\n    \n    gst.ctm = mat;\n}\nFromEMF._draw = function(genv:any, gst:any, prms:any, needFill:any) {\n    if(prms.fill && needFill     ) genv.Fill  (gst, false);\n    if(prms.strk && gst.lwidth!=0) genv.Stroke(gst);\n}\nFromEMF._drawPoly = function(buff:any, off:any, ppp:any, gst:any, nl:any, clos:any, justLine:any) {\n    var rS = nl==2 ? FromEMF.B.readShort : FromEMF.B.readInt;\n    for(var j=0; j<ppp; j++) {\n        var px = rS(buff, off);  off+=nl;  \n        var py = rS(buff, off);  off+=nl;\n        if(j==0 && !justLine) UDOC.G.moveTo(gst,px,py);  else UDOC.G.lineTo(gst,px,py);\n    }\n    if(clos) UDOC.G.closePath(gst);\n    return off;\n}\n\nFromEMF.B = {\n    uint8 : new Uint8Array(4),\n    readShort  : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  return FromEMF.B.int16 [0];  },\n    readUshort : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  return FromEMF.B.uint16[0];  },\n    readInt    : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  u8[2]=buff[p+2];  u8[3]=buff[p+3];  return FromEMF.B.int32 [0];  },\n    readUint   : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  u8[2]=buff[p+2];  u8[3]=buff[p+3];  return FromEMF.B.uint32[0];  },\n    readFloat  : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  u8[2]=buff[p+2];  u8[3]=buff[p+3];  return FromEMF.B.flot32[0];  },\n    readASCII  : function(buff:any,p:any,l:any):any {  var s = \"\";  for(var i=0; i<l; i++) s += String.fromCharCode(buff[p+i]);  return s;    }\n}\nFromEMF.B.int16  = new Int16Array (FromEMF.B.uint8.buffer);\nFromEMF.B.uint16 = new Uint16Array(FromEMF.B.uint8.buffer);\nFromEMF.B.int32  = new Int32Array (FromEMF.B.uint8.buffer);\nFromEMF.B.uint32 = new Uint32Array(FromEMF.B.uint8.buffer);\nFromEMF.B.flot32 = new Float32Array(FromEMF.B.uint8.buffer);\n\n\nFromEMF.C = {\n    EMR_HEADER : 0x00000001,\n    EMR_POLYBEZIER : 0x00000002,\n    EMR_POLYGON : 0x00000003,\n    EMR_POLYLINE : 0x00000004,\n    EMR_POLYBEZIERTO : 0x00000005,\n    EMR_POLYLINETO : 0x00000006,\n    EMR_POLYPOLYLINE : 0x00000007,\n    EMR_POLYPOLYGON : 0x00000008,\n    EMR_SETWINDOWEXTEX : 0x00000009,\n    EMR_SETWINDOWORGEX : 0x0000000A,\n    EMR_SETVIEWPORTEXTEX : 0x0000000B,\n    EMR_SETVIEWPORTORGEX : 0x0000000C,\n    EMR_SETBRUSHORGEX : 0x0000000D,\n    EMR_EOF : 0x0000000E,\n    EMR_SETPIXELV : 0x0000000F,\n    EMR_SETMAPPERFLAGS : 0x00000010,\n    EMR_SETMAPMODE : 0x00000011,\n    EMR_SETBKMODE : 0x00000012,\n    EMR_SETPOLYFILLMODE : 0x00000013,\n    EMR_SETROP2 : 0x00000014,\n    EMR_SETSTRETCHBLTMODE : 0x00000015,\n    EMR_SETTEXTALIGN : 0x00000016,\n    EMR_SETCOLORADJUSTMENT : 0x00000017,\n    EMR_SETTEXTCOLOR : 0x00000018,\n    EMR_SETBKCOLOR : 0x00000019,\n    EMR_OFFSETCLIPRGN : 0x0000001A,\n    EMR_MOVETOEX : 0x0000001B,\n    EMR_SETMETARGN : 0x0000001C,\n    EMR_EXCLUDECLIPRECT : 0x0000001D,\n    EMR_INTERSECTCLIPRECT : 0x0000001E,\n    EMR_SCALEVIEWPORTEXTEX : 0x0000001F,\n    EMR_SCALEWINDOWEXTEX : 0x00000020,\n    EMR_SAVEDC : 0x00000021,\n    EMR_RESTOREDC : 0x00000022,\n    EMR_SETWORLDTRANSFORM : 0x00000023,\n    EMR_MODIFYWORLDTRANSFORM : 0x00000024,\n    EMR_SELECTOBJECT : 0x00000025,\n    EMR_CREATEPEN : 0x00000026,\n    EMR_CREATEBRUSHINDIRECT : 0x00000027,\n    EMR_DELETEOBJECT : 0x00000028,\n    EMR_ANGLEARC : 0x00000029,\n    EMR_ELLIPSE : 0x0000002A,\n    EMR_RECTANGLE : 0x0000002B,\n    EMR_ROUNDRECT : 0x0000002C,\n    EMR_ARC : 0x0000002D,\n    EMR_CHORD : 0x0000002E,\n    EMR_PIE : 0x0000002F,\n    EMR_SELECTPALETTE : 0x00000030,\n    EMR_CREATEPALETTE : 0x00000031,\n    EMR_SETPALETTEENTRIES : 0x00000032,\n    EMR_RESIZEPALETTE : 0x00000033,\n    EMR_REALIZEPALETTE : 0x00000034,\n    EMR_EXTFLOODFILL : 0x00000035,\n    EMR_LINETO : 0x00000036,\n    EMR_ARCTO : 0x00000037,\n    EMR_POLYDRAW : 0x00000038,\n    EMR_SETARCDIRECTION : 0x00000039,\n    EMR_SETMITERLIMIT : 0x0000003A,\n    EMR_BEGINPATH : 0x0000003B,\n    EMR_ENDPATH : 0x0000003C,\n    EMR_CLOSEFIGURE : 0x0000003D,\n    EMR_FILLPATH : 0x0000003E,\n    EMR_STROKEANDFILLPATH : 0x0000003F,\n    EMR_STROKEPATH : 0x00000040,\n    EMR_FLATTENPATH : 0x00000041,\n    EMR_WIDENPATH : 0x00000042,\n    EMR_SELECTCLIPPATH : 0x00000043,\n    EMR_ABORTPATH : 0x00000044,\n    EMR_COMMENT : 0x00000046,\n    EMR_FILLRGN : 0x00000047,\n    EMR_FRAMERGN : 0x00000048,\n    EMR_INVERTRGN : 0x00000049,\n    EMR_PAINTRGN : 0x0000004A,\n    EMR_EXTSELECTCLIPRGN : 0x0000004B,\n    EMR_BITBLT : 0x0000004C,\n    EMR_STRETCHBLT : 0x0000004D,\n    EMR_MASKBLT : 0x0000004E,\n    EMR_PLGBLT : 0x0000004F,\n    EMR_SETDIBITSTODEVICE : 0x00000050,\n    EMR_STRETCHDIBITS : 0x00000051,\n    EMR_EXTCREATEFONTINDIRECTW : 0x00000052,\n    EMR_EXTTEXTOUTA : 0x00000053,\n    EMR_EXTTEXTOUTW : 0x00000054,\n    EMR_POLYBEZIER16 : 0x00000055,\n    EMR_POLYGON16 : 0x00000056,\n    EMR_POLYLINE16 : 0x00000057,\n    EMR_POLYBEZIERTO16 : 0x00000058,\n    EMR_POLYLINETO16 : 0x00000059,\n    EMR_POLYPOLYLINE16 : 0x0000005A,\n    EMR_POLYPOLYGON16 : 0x0000005B,\n    EMR_POLYDRAW16 : 0x0000005C,\n    EMR_CREATEMONOBRUSH : 0x0000005D,\n    EMR_CREATEDIBPATTERNBRUSHPT : 0x0000005E,\n    EMR_EXTCREATEPEN : 0x0000005F,\n    EMR_POLYTEXTOUTA : 0x00000060,\n    EMR_POLYTEXTOUTW : 0x00000061,\n    EMR_SETICMMODE : 0x00000062,\n    EMR_CREATECOLORSPACE : 0x00000063,\n    EMR_SETCOLORSPACE : 0x00000064,\n    EMR_DELETECOLORSPACE : 0x00000065,\n    EMR_GLSRECORD : 0x00000066,\n    EMR_GLSBOUNDEDRECORD : 0x00000067,\n    EMR_PIXELFORMAT : 0x00000068,\n    EMR_DRAWESCAPE : 0x00000069,\n    EMR_EXTESCAPE : 0x0000006A,\n    EMR_SMALLTEXTOUT : 0x0000006C,\n    EMR_FORCEUFIMAPPING : 0x0000006D,\n    EMR_NAMEDESCAPE : 0x0000006E,\n    EMR_COLORCORRECTPALETTE : 0x0000006F,\n    EMR_SETICMPROFILEA : 0x00000070,\n    EMR_SETICMPROFILEW : 0x00000071,\n    EMR_ALPHABLEND : 0x00000072,\n    EMR_SETLAYOUT : 0x00000073,\n    EMR_TRANSPARENTBLT : 0x00000074,\n    EMR_GRADIENTFILL : 0x00000076,\n    EMR_SETLINKEDUFIS : 0x00000077,\n    EMR_SETTEXTJUSTIFICATION : 0x00000078,\n    EMR_COLORMATCHTOTARGETW : 0x00000079,\n    EMR_CREATECOLORSPACEW : 0x0000007A\n};\nFromEMF.K = [];\n\n// (function() {\n//     var inp, out, stt;\n//     inp = FromEMF.C;   out = FromEMF.K;   stt=4;\n//     for(var p in inp) out[inp[p]] = p.slice(stt);\n// }  )();\n\n\n\nexport let ToContext2D:any = function (needPage:any, scale:any)\n{\n    this.canvas = document.createElement(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.bb = null;\n    this.currPage = 0;\n    this.needPage = needPage;\n    this.scale = scale;\n}\nToContext2D.prototype.StartPage = function(x:any,y:any,w:any,h:any) {\n    if(this.currPage!=this.needPage) return;\n    this.bb = [x,y,w,h];\n    var scl = this.scale, dpr = window.devicePixelRatio;\n    var cnv = this.canvas, ctx = this.ctx;\n    cnv.width = Math.round(w*scl);  cnv.height = Math.round(h*scl);\n    ctx.translate(0,h*scl);  ctx.scale(scl,-scl);\n    cnv.setAttribute(\"style\", \"border:1px solid; width:\"+(cnv.width/dpr)+\"px; height:\"+(cnv.height/dpr)+\"px\");\n}\nToContext2D.prototype.Fill = function(gst:any, evenOdd:any) {\n    if(this.currPage!=this.needPage) return;\n    var ctx = this.ctx;\n    ctx.beginPath();\n    this._setStyle(gst, ctx);\n    this._draw(gst.pth, ctx);\n    ctx.fill();\n}\nToContext2D.prototype.Stroke = function(gst:any) {\n    if(this.currPage!=this.needPage) return;\n    var ctx = this.ctx;\n    ctx.beginPath();\n    this._setStyle(gst, ctx);\n    this._draw(gst.pth, ctx);\n    ctx.stroke();\n}\nToContext2D.prototype.PutText = function(gst:any, str:any, stw:any) {\n    if(this.currPage!=this.needPage) return;\n    var scl = this._scale(gst.ctm);\n    var ctx = this.ctx;\n    this._setStyle(gst, ctx);\n    ctx.save();\n    var m = [1,0,0,-1,0,0];  this._concat(m, gst.font.Tm);  this._concat(m, gst.ctm);\n    //console.log(str, m, gst);  throw \"e\";\n    ctx.transform(m[0],m[1],m[2],m[3],m[4],m[5]);\n    ctx.fillText(str,0,0);\n    ctx.restore();\n}\nToContext2D.prototype.PutImage = function(gst:any, buff:any, w:any, h:any, msk:any) {\n    if(this.currPage!=this.needPage) return;\n    var ctx = this.ctx;\n    \n    if(buff.length==w*h*4) {\n        buff = buff.slice(0);\n        if(msk && msk.length==w*h*4) for(var i=0; i<buff.length; i+=4) buff[i+3] = msk[i+1];\n        \n        var cnv = document.createElement(\"canvas\"), cctx = cnv.getContext(\"2d\");\n        cnv.width = w;  cnv.height = h;\n        var imgd = cctx.createImageData(w,h);\n        for(var i=0; i<buff.length; i++) imgd.data[i]=buff[i];\n        cctx.putImageData(imgd,0,0);\n        \n        ctx.save();\n        var m = [1,0,0,1,0,0];  this._concat(m, [1/w,0,0,-1/h,0,1]);  this._concat(m, gst.ctm);\n        ctx.transform(m[0],m[1],m[2],m[3],m[4],m[5]);\n        ctx.drawImage(cnv,0,0);\n        ctx.restore();\n    }\n}\nToContext2D.prototype.ShowPage = function() {  this.currPage++;  }\nToContext2D.prototype.Done = function() {}\n\n\nfunction _flt(n:any)  {  return \"\"+parseFloat(n.toFixed(2));  }\n\nToContext2D.prototype._setStyle = function(gst:any, ctx:any) {\n    var scl = this._scale(gst.ctm);\n    ctx.fillStyle = this._getFill(gst.colr, gst.ca, ctx);\n    ctx.strokeStyle=this._getFill(gst.COLR, gst.CA, ctx);\n    \n    ctx.lineCap = [\"butt\",\"round\",\"square\"][gst.lcap];\n    ctx.lineJoin= [\"miter\",\"round\",\"bevel\"][gst.ljoin];\n    ctx.lineWidth=gst.lwidth*scl;\n    var dsh = gst.dash.slice(0);  for(var i=0; i<dsh.length; i++) dsh[i] = _flt(dsh[i]*scl);\n    ctx.setLineDash(dsh); \n    ctx.miterLimit = gst.mlimit*scl;\n    \n    var fn = gst.font.Tf, ln = fn.toLowerCase();\n    var p0 = ln.indexOf(\"bold\")!=-1 ? \"bold \" : \"\";\n    var p1 = (ln.indexOf(\"italic\")!=-1 || ln.indexOf(\"oblique\")!=-1) ? \"italic \" : \"\";\n    ctx.font = p0+p1 + gst.font.Tfs+\"px \\\"\"+fn+\"\\\"\";\n}\nToContext2D.prototype._getFill = function(colr:any, ca:any, ctx:any)\n{\n    if(colr.typ==null) return this._colr(colr,ca);\n    else {\n        var grd = colr, crd = grd.crds, mat = grd.mat, scl=this._scale(mat), gf;\n        if     (grd.typ==\"lin\") {\n            var p0 = this._multPoint(mat,crd.slice(0,2)), p1 = this._multPoint(mat,crd.slice(2));\n            gf=ctx.createLinearGradient(p0[0],p0[1],p1[0],p1[1]);\n        }\n        else if(grd.typ==\"rad\") {\n            var p0 = this._multPoint(mat,crd.slice(0,2)), p1 = this._multPoint(mat,crd.slice(3));\n            gf=ctx.createRadialGradient(p0[0],p0[1],crd[2]*scl,p1[0],p1[1],crd[5]*scl);\n        }\n        for(var i=0; i<grd.grad.length; i++)  gf.addColorStop(grd.grad[i][0],this._colr(grd.grad[i][1], ca));\n        return gf;\n    }\n}\nToContext2D.prototype._colr  = function(c:any,a:any) {  return \"rgba(\"+Math.round(c[0]*255)+\",\"+Math.round(c[1]*255)+\",\"+Math.round(c[2]*255)+\",\"+a+\")\";  };\nToContext2D.prototype._scale = function(m:any)  {  return Math.sqrt(Math.abs(m[0]*m[3]-m[1]*m[2]));  };\nToContext2D.prototype._concat= function(m:any,w:any  ) {  \n        var a=m[0],b=m[1],c=m[2],d=m[3],tx=m[4],ty=m[5];\n        m[0] = (a *w[0])+(b *w[2]);       m[1] = (a *w[1])+(b *w[3]);\n        m[2] = (c *w[0])+(d *w[2]);       m[3] = (c *w[1])+(d *w[3]);\n        m[4] = (tx*w[0])+(ty*w[2])+w[4];  m[5] = (tx*w[1])+(ty*w[3])+w[5]; \n}\nToContext2D.prototype._multPoint= function(m:any, p:any) {  var x=p[0],y=p[1];  return [x*m[0]+y*m[2]+m[4],   x*m[1]+y*m[3]+m[5]];  },\nToContext2D.prototype._draw  = function(path:any, ctx:any)\n{\n    var c = 0, crds = path.crds;\n    for(var j=0; j<path.cmds.length; j++) {\n        var cmd = path.cmds[j];\n        if     (cmd==\"M\") {  ctx.moveTo(crds[c], crds[c+1]);  c+=2;  }\n        else if(cmd==\"L\") {  ctx.lineTo(crds[c], crds[c+1]);  c+=2;  }\n        else if(cmd==\"C\") {  ctx.bezierCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3], crds[c+4], crds[c+5]);  c+=6;  }\n        else if(cmd==\"Q\") {  ctx.quadraticCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3]);  c+=4;  }\n        else if(cmd==\"Z\") {  ctx.closePath();  }\n    }\n}\n","import { columeHeader_word, columeHeader_word_index } from \"./constant\";\nimport { IluckySheetSelection } from \"../ToLuckySheet/ILuck\";\nimport { IattributeList, stringToNum} from \"../ICommon\";\n\n\nexport function getRangetxt(range:IluckySheetSelection, sheettxt:string) {\n\n    let row0 = range[\"row\"][0], row1 = range[\"row\"][1];\n    let column0 = range[\"column\"][0], column1 = range[\"column\"][1];\n\n    if (row0 == null && row1 == null) {\n        return sheettxt + chatatABC(column0) + \":\" + chatatABC(column1);\n    }\n    else if (column0 == null && column1 == null) {\n        return sheettxt + (row0 + 1) + \":\" + (row1 + 1);\n    }\n    else {\n        if (column0 == column1 && row0 == row1) {\n            return sheettxt + chatatABC(column0) + (row0 + 1);\n        }\n        else {\n            return sheettxt + chatatABC(column0) + (row0 + 1) + \":\" + chatatABC(column1) + (row1 + 1);\n        }\n    }\n}\n\n\nexport function getcellrange (txt:string, sheets:IattributeList={}, sheetId:string=\"1\") {\n    let val = txt.split(\"!\");\n\n    let sheettxt = \"\",\n        rangetxt = \"\",\n        sheetIndex = -1;\n\n    if (val.length > 1) {\n        sheettxt = val[0];\n        rangetxt = val[1];\n        \n        let si = sheets[sheettxt];\n        if(si==null){\n            sheetIndex = parseInt(sheetId);\n        }\n        else{\n            sheetIndex = parseInt(si);\n        }\n    } \n    else {\n        sheetIndex = parseInt(sheetId);\n        rangetxt = val[0];\n    }\n    \n    if (rangetxt.indexOf(\":\") == -1) {\n        let row = parseInt(rangetxt.replace(/[^0-9]/g, \"\")) - 1;\n        let col = ABCatNum(rangetxt.replace(/[^A-Za-z]/g, \"\"));\n\n        if (!isNaN(row) && !isNaN(col)) {\n            return {\n                \"row\": [row, row],\n                \"column\": [col, col],\n                \"sheetIndex\": sheetIndex\n            };\n        }\n        else {\n            return null;\n        }\n    } \n    else {\n        let rangetxtArray:string[] = rangetxt.split(\":\");\n        let row = [],col = [];\n        row[0] = parseInt(rangetxtArray[0].replace(/[^0-9]/g, \"\")) - 1;\n        row[1] = parseInt(rangetxtArray[1].replace(/[^0-9]/g, \"\")) - 1;\n        // if (isNaN(row[0])) {\n        //     row[0] = 0;\n        // }\n        // if (isNaN(row[1])) {\n        //     row[1] = sheetdata.length - 1;\n        // }\n        if (row[0] > row[1]) {\n            return null;\n        }\n        col[0] = ABCatNum(rangetxtArray[0].replace(/[^A-Za-z]/g, \"\"));\n        col[1] = ABCatNum(rangetxtArray[1].replace(/[^A-Za-z]/g, \"\"));\n        // if (isNaN(col[0])) {\n        //     col[0] = 0;\n        // }\n        // if (isNaN(col[1])) {\n        //     col[1] = sheetdata[0].length - 1;\n        // }\n        if (col[0] > col[1]) {\n            return null;\n        }\n\n        return {\n            \"row\": row,\n            \"column\": col,\n            \"sheetIndex\": sheetIndex\n        };\n    }\n}\n\n//列下标  字母转数字\nfunction ABCatNum(abc:string) {\n    abc = abc.toUpperCase();\n\n    let abc_len = abc.length;\n    if (abc_len == 0) {\n        return NaN;\n    }\n\n    let abc_array = abc.split(\"\");\n    let wordlen = columeHeader_word.length;\n    let ret = 0;\n\n    for (let i = abc_len - 1; i >= 0; i--) {\n        if (i == abc_len - 1) {\n            ret += columeHeader_word_index[abc_array[i]];\n        }\n        else {\n            ret += Math.pow(wordlen, abc_len - i - 1) * (columeHeader_word_index[abc_array[i]] + 1);\n        }\n    }\n\n    return ret;\n}\n\n//列下标  数字转字母\nfunction chatatABC(index:number) {\n    let wordlen = columeHeader_word.length;\n\n    if (index < wordlen) {\n        return columeHeader_word[index];\n    }\n    else {\n        let last = 0, pre = 0, ret = \"\";\n        let i = 1, n = 0;\n\n        while (index >= (wordlen / (wordlen - 1)) * (Math.pow(wordlen, i++) - 1)) {\n            n = i;\n        }\n\n        let index_ab = index - (wordlen / (wordlen - 1)) * (Math.pow(wordlen, n - 1) - 1);//970\n        last = index_ab + 1;\n\n        for (let x = n; x > 0; x--) {\n            let last1 = last, x1 = x;//-702=268, 3\n\n            if (x == 1) {\n                last1 = last1 % wordlen;\n\n                if (last1 == 0) {\n                    last1 = 26;\n                }\n\n                return ret + columeHeader_word[last1 - 1];\n            }\n\n            last1 = Math.ceil(last1 / Math.pow(wordlen, x - 1));\n            //last1 = last1 % wordlen;\n            ret += columeHeader_word[last1 - 1];\n\n            if (x > 1) {\n                last = last - (last1 - 1) * wordlen;\n            }\n        }\n    }\n}\n\n/** \n * @return ratio, default 0.75 1in = 2.54cm = 25.4mm = 72pt = 6pc,  pt = 1/72 In, px = 1/dpi In\n*/\nexport function getptToPxRatioByDPI():number{\n    return 72/96;\n}\n\n/** \n * @emus EMUs, Excel drawing unit\n * @return pixel\n*/\nexport function getPxByEMUs(emus:number){\n    if(emus==null){\n        return 0;\n    }\n    let inch = emus/914400;\n    let pt = inch*72;\n    let px = pt / getptToPxRatioByDPI();\n    return px;\n}\n\n/** \n * @dom xml attribute object\n * @attr attribute name\n * @d if attribute is null, return default value \n * @return attribute value\n*/\nexport function getXmlAttibute(dom:IattributeList, attr:string, d:string){\n    let value = dom[attr];\n    value = value==null?d:value;\n    return value;\n}\n\n/** \n * @columnWidth Excel column width\n * @return pixel column width\n*/\nexport function getColumnWidthPixel(columnWidth:number){\n    let pix = Math.round((columnWidth-0.83) * 8 + 5);\n    return pix;\n}\n\n/** \n * @rowHeight Excel row height\n * @return pixel row height\n*/\nexport function getRowHeightPixel(rowHeight:number){\n    let pix = Math.round(rowHeight/getptToPxRatioByDPI());\n    return pix;\n}\n\nexport function LightenDarkenColor(sixColor:string, tint:number){\n    let hex:string = sixColor.substring(sixColor.length-6,sixColor.length);\n    let rgbArray:number[] = hexToRgbArray(\"#\"+hex);\n    let hslArray = rgbToHsl(rgbArray[0], rgbArray[1],rgbArray[2]);\n    if(tint>0){\n        hslArray[2] = hslArray[2] * (1.0-tint) + tint;\n    }\n    else if(tint<0){\n        hslArray[2] = hslArray[2] * (1.0 + tint)\n    }\n    else{\n        return \"#\"+hex;\n    }\n\n    let newRgbArray = hslToRgb(hslArray[0],hslArray[1],hslArray[2]);\n\n    return rgbToHex(\"RGB(\" + newRgbArray.join(\",\") + \")\");\n}\n\n\nfunction rgbToHex(rgb:string){\n    //十六进制颜色值的正则表达式\n    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n    // 如果是rgb颜色表示\n    if (/^(rgb|RGB)/.test(rgb)) {\n        var aColor = rgb.replace(/(?:\\(|\\)|rgb|RGB)*/g, \"\").split(\",\");\n        var strHex = \"#\";\n        for (var i=0; i<aColor.length; i++) {\n            var hex = Number(aColor[i]).toString(16);\n            if (hex.length < 2) {\n                hex = '0' + hex;    \n            }\n            strHex += hex;\n        }\n        if (strHex.length !== 7) {\n            strHex = rgb;    \n        }\n        return strHex;\n    } else if (reg.test(rgb)) {\n        var aNum = rgb.replace(/#/,\"\").split(\"\");\n        if (aNum.length === 6) {\n            return rgb;    \n        } else if(aNum.length === 3) {\n            var numHex = \"#\";\n            for (var i=0; i<aNum.length; i+=1) {\n                numHex += (aNum[i] + aNum[i]);\n            }\n            return numHex;\n        }\n    }\n    return rgb;\n}\n\nfunction hexToRgb(hex:string){\n    var sColor = hex.toLowerCase();\n    //十六进制颜色值的正则表达式\n    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n    // 如果是16进制颜色\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            var sColorNew = \"#\";\n            for (var i=1; i<4; i+=1) {\n                sColorNew += sColor.slice(i, i+1).concat(sColor.slice(i, i+1));    \n            }\n            sColor = sColorNew;\n        }\n        //处理六位的颜色值\n        var sColorChange = [];\n        for (var i=1; i<7; i+=2) {\n            sColorChange.push(parseInt(\"0x\"+sColor.slice(i, i+2)));    \n        }\n        return \"RGB(\" + sColorChange.join(\",\") + \")\";\n    }\n    return sColor;\n}\n\nfunction hexToRgbArray(hex:string){\n    var sColor = hex.toLowerCase();\n    //十六进制颜色值的正则表达式\n    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n    // 如果是16进制颜色\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            var sColorNew = \"#\";\n            for (var i=1; i<4; i+=1) {\n                sColorNew += sColor.slice(i, i+1).concat(sColor.slice(i, i+1));    \n            }\n            sColor = sColorNew;\n        }\n        //处理六位的颜色值\n        var sColorChange:number[] = [];\n        for (var i=1; i<7; i+=2) {\n            sColorChange.push(parseInt(\"0x\"+sColor.slice(i, i+2)));    \n        }\n        return  sColorChange;\n    }\n    return null;\n}\n\n/**\n * HSL颜色值转换为RGB. \n * 换算公式改编自 http://en.wikipedia.org/wiki/HSL_color_space.\n * h, s, 和 l 设定在 [0, 1] 之间\n * 返回的 r, g, 和 b 在 [0, 255]之间\n *\n * @param   Number  h       色相\n * @param   Number  s       饱和度\n * @param   Number  l       亮度\n * @return  Array           RGB色值数值\n */\nfunction hslToRgb(h:number, s:number, l:number) {\n    var r, g, b;\n\n    if(s == 0) {\n        r = g = b = l; // achromatic\n    } else {\n        var hue2rgb = function hue2rgb(p:number, q:number, t:number) {\n            if(t < 0) t += 1;\n            if(t > 1) t -= 1;\n            if(t < 1/6) return p + (q - p) * 6 * t;\n            if(t < 1/2) return q;\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n            return p;\n        }\n\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n\n\n/**\n * RGB 颜色值转换为 HSL.\n * 转换公式参考自 http://en.wikipedia.org/wiki/HSL_color_space.\n * r, g, 和 b 需要在 [0, 255] 范围内\n * 返回的 h, s, 和 l 在 [0, 1] 之间\n *\n * @param   Number  r       红色色值\n * @param   Number  g       绿色色值\n * @param   Number  b       蓝色色值\n * @return  Array           HSL各值数组\n */\nfunction rgbToHsl(r:number, g:number, b:number) {\n    r /= 255, g /= 255, b /= 255;\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if (max == min){ \n        h = s = 0; // achromatic\n    } else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n\n    return [h, s, l];\n}\n \nexport function generateRandomIndex(prefix:string):string {\n    if(prefix == null){\n        prefix = \"Sheet\";\n    }\n\n    let userAgent = window.navigator.userAgent.replace(/[^a-zA-Z0-9]/g, \"\").split(\"\");\n\n    let mid = \"\";\n\n    for(let i = 0; i < 5; i++){\n        mid += userAgent[Math.round(Math.random() * (userAgent.length - 1))];\n    }\n\n    let time = new Date().getTime();\n\n    return prefix + \"_\" + mid + \"_\" + time;\n}\n\n\nexport function escapeCharacter(str:string){\n    if(str==null || str.length==0){\n        return str;\n    }\n\n    return str.replace(/&amp;/g, \"&\").replace(/&quot;/g, '\"').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&nbsp;/g, ' ').replace(/&apos;/g, \"'\").replace(/&iexcl;/g, \"¡\").replace(/&cent;/g, \"¢\").replace(/&pound;/g, \"£\").replace(/&curren;/g, \"¤\").replace(/&yen;/g, \"¥\").replace(/&brvbar;/g, \"¦\").replace(/&sect;/g, \"§\").replace(/&uml;/g, \"¨\").replace(/&copy;/g, \"©\").replace(/&ordf;/g, \"ª\").replace(/&laquo;/g, \"«\").replace(/&not;/g, \"¬\").replace(/&shy;/g, \"­\").replace(/&reg;/g, \"®\").replace(/&macr;/g, \"¯\").replace(/&deg;/g, \"°\").replace(/&plusmn;/g, \"±\").replace(/&sup2;/g, \"²\").replace(/&sup3;/g, \"³\").replace(/&acute;/g, \"´\").replace(/&micro;/g, \"µ\").replace(/&para;/g, \"¶\").replace(/&middot;/g, \"·\").replace(/&cedil;/g, \"¸\").replace(/&sup1;/g, \"¹\").replace(/&ordm;/g, \"º\").replace(/&raquo;/g, \"»\").replace(/&frac14;/g, \"¼\").replace(/&frac12;/g, \"½\").replace(/&frac34;/g, \"¾\").replace(/&iquest;/g, \"¿\").replace(/&times;/g, \"×\").replace(/&divide;/g, \"÷\").replace(/&Agrave;/g, \"À\").replace(/&Aacute;/g, \"Á\").replace(/&Acirc;/g, \"Â\").replace(/&Atilde;/g, \"Ã\").replace(/&Auml;/g, \"Ä\").replace(/&Aring;/g, \"Å\").replace(/&AElig;/g, \"Æ\").replace(/&Ccedil;/g, \"Ç\").replace(/&Egrave;/g, \"È\").replace(/&Eacute;/g, \"É\").replace(/&Ecirc;/g, \"Ê\").replace(/&Euml;/g, \"Ë\").replace(/&Igrave;/g, \"Ì\").replace(/&Iacute;/g, \"Í\").replace(/&Icirc;/g, \"Î\").replace(/&Iuml;/g, \"Ï\").replace(/&ETH;/g, \"Ð\").replace(/&Ntilde;/g, \"Ñ\").replace(/&Ograve;/g, \"Ò\").replace(/&Oacute;/g, \"Ó\").replace(/&Ocirc;/g, \"Ô\").replace(/&Otilde;/g, \"Õ\").replace(/&Ouml;/g, \"Ö\").replace(/&Oslash;/g, \"Ø\").replace(/&Ugrave;/g, \"Ù\").replace(/&Uacute;/g, \"Ú\").replace(/&Ucirc;/g, \"Û\").replace(/&Uuml;/g, \"Ü\").replace(/&Yacute;/g, \"Ý\").replace(/&THORN;/g, \"Þ\").replace(/&szlig;/g, \"ß\").replace(/&agrave;/g, \"à\").replace(/&aacute;/g, \"á\").replace(/&acirc;/g, \"â\").replace(/&atilde;/g, \"ã\").replace(/&auml;/g, \"ä\").replace(/&aring;/g, \"å\").replace(/&aelig;/g, \"æ\").replace(/&ccedil;/g, \"ç\").replace(/&egrave;/g, \"è\").replace(/&eacute;/g, \"é\").replace(/&ecirc;/g, \"ê\").replace(/&euml;/g, \"ë\").replace(/&igrave;/g, \"ì\").replace(/&iacute;/g, \"í\").replace(/&icirc;/g, \"î\").replace(/&iuml;/g, \"ï\").replace(/&eth;/g, \"ð\").replace(/&ntilde;/g, \"ñ\").replace(/&ograve;/g, \"ò\").replace(/&oacute;/g, \"ó\").replace(/&ocirc;/g, \"ô\").replace(/&otilde;/g, \"õ\").replace(/&ouml;/g, \"ö\").replace(/&oslash;/g, \"ø\").replace(/&ugrave;/g, \"ù\").replace(/&uacute;/g, \"ú\").replace(/&ucirc;/g, \"û\").replace(/&uuml;/g, \"ü\").replace(/&yacute;/g, \"ý\").replace(/&thorn;/g, \"þ\").replace(/&yuml;/g, \"ÿ\");\n\n}\n\n\nexport class fromulaRef {\n\n    static operator = '==|!=|<>|<=|>=|=|+|-|>|<|/|*|%|&|^'\n    static error = {\n        v: \"#VALUE!\",    //错误的参数或运算符\n        n: \"#NAME?\",     //公式名称错误\n        na: \"#N/A\",      //函数或公式中没有可用数值\n        r: \"#REF!\",      //删除了由其他公式引用的单元格\n        d: \"#DIV/0!\",    //除数是0或空单元格\n        nm: \"#NUM!\",     //当公式或函数中某个数字有问题时\n        nl: \"#NULL!\",    //交叉运算符（空格）使用不正确\n        sp: \"#SPILL!\"    //数组范围有其它值\n    }\n\n    static operatorjson:stringToNum = null\n\n    static trim(str:string) {  \n        if(str == null){  \n            str = \"\";  \n        }  \n        return str.replace(/(^\\s*)|(\\s*$)/g, \"\");  \n    }\n\n    static functionCopy(txt:string, mode:string, step:number) {\n        let _this = this;\n\n        if (_this.operatorjson == null) {\n            let arr = _this.operator.split(\"|\"),\n                op:stringToNum = {};\n\n            for (let i = 0; i < arr.length; i++) {\n                op[arr[i].toString()] = 1;\n            }\n\n            _this.operatorjson = op;\n        }\n\n        if (mode == null) {\n            mode = \"down\";\n        }\n\n        if (step == null) {\n            step = 1;\n        }\n\n        if (txt.substr(0, 1) == \"=\") {\n            txt = txt.substr(1);\n        }\n\n        let funcstack = txt.split(\"\");\n        let i = 0,\n            str = \"\",\n            function_str = \"\",\n            ispassby = true;\n        \n        let matchConfig = {\n            \"bracket\": 0,\n            \"comma\": 0,\n            \"squote\": 0,\n            \"dquote\": 0\n        };\n\n        while (i < funcstack.length) {\n            let s = funcstack[i];\n\n            if (s == \"(\" && matchConfig.dquote == 0) {\n                matchConfig.bracket += 1;\n\n                if (str.length > 0) {\n                    function_str += str + \"(\";\n                } \n                else {\n                    function_str += \"(\";\n                }\n\n                str = \"\";\n            } \n            else if (s == \")\" && matchConfig.dquote == 0) {\n                matchConfig.bracket -= 1;\n                function_str += _this.functionCopy(str, mode, step) + \")\";\n                str = \"\";\n            }\n            else if (s == '\"' && matchConfig.squote == 0) {\n                if (matchConfig.dquote > 0) {\n                    function_str += str + '\"';\n                    matchConfig.dquote -= 1;\n                    str = \"\";\n                } \n                else {\n                    matchConfig.dquote += 1;\n                    str += '\"';\n                }\n            } \n            else if (s == ',' && matchConfig.dquote == 0) {\n                function_str += _this.functionCopy(str, mode, step) + ',';\n                str = \"\";\n            } \n            else if (s == '&' && matchConfig.dquote == 0) {\n                if (str.length > 0) {\n                    function_str += _this.functionCopy(str, mode, step) + \"&\";\n                    str = \"\";\n                } \n                else {\n                    function_str += \"&\";\n                }\n            } \n            else if (s in _this.operatorjson && matchConfig.dquote == 0) {\n                let s_next = \"\";\n\n                if ((i + 1) < funcstack.length) {\n                    s_next = funcstack[i + 1];\n                }\n\n                let p = i - 1, \n                    s_pre = null;\n\n                if(p >= 0){\n                    do {\n                        s_pre = funcstack[p--];\n                    }\n                    while (p>=0 && s_pre ==\" \")\n                }\n\n                if ((s + s_next) in _this.operatorjson) {\n                    if (str.length > 0) {\n                        function_str += _this.functionCopy(str, mode, step) + s + s_next;\n                        str = \"\";\n                    } \n                    else {\n                        function_str += s + s_next;\n                    }\n\n                    i++;\n                }\n                else if(!(/[^0-9]/.test(s_next)) && s==\"-\" && (s_pre==\"(\" || s_pre == null || s_pre == \",\" || s_pre == \" \" || s_pre in _this.operatorjson ) ){\n                    str += s;\n                }\n                else {\n                    if (str.length > 0) {\n                        function_str += _this.functionCopy(str, mode, step) + s;\n                        str = \"\";\n                    } \n                    else {\n                        function_str += s;\n                    }\n                }\n            } \n            else {\n                str += s;\n            }\n\n            if (i == funcstack.length - 1) {\n                if (_this.iscelldata(_this.trim(str))) {\n                    if (mode == \"down\") {\n                        function_str += _this.downparam(_this.trim(str), step);\n                    } \n                    else if (mode == \"up\") {\n                        function_str += _this.upparam(_this.trim(str), step);\n                    } \n                    else if (mode == \"left\") {\n                        function_str += _this.leftparam(_this.trim(str), step);\n                    } \n                    else if (mode == \"right\") {\n                        function_str += _this.rightparam(_this.trim(str), step);\n                    }\n                } \n                else {\n                    function_str += _this.trim(str);\n                }\n            }\n            \n            i++;\n        }\n\n        return function_str;\n    }\n\n\n    static downparam(txt:string, step:number) {\n        return this.updateparam(\"d\", txt, step);\n    }\n\n    static upparam(txt:string, step:number) {\n        return this.updateparam(\"u\", txt, step);\n    }\n\n    static leftparam(txt:string, step:number) {\n        return this.updateparam(\"l\", txt, step);\n    }\n\n    static rightparam (txt:string, step:number) {\n        return this.updateparam(\"r\", txt, step);\n    }\n\n\n    static updateparam (orient:string, txt:string, step:number) {\n        let _this = this;\n        let val = txt.split(\"!\"),\n            rangetxt, prefix = \"\";\n        \n        if (val.length > 1) {\n            rangetxt = val[1];\n            prefix = val[0] + \"!\";\n        } \n        else {\n            rangetxt = val[0];\n        }\n\n        if (rangetxt.indexOf(\":\") == -1) {\n            let row = parseInt(rangetxt.replace(/[^0-9]/g, \"\"));\n            let col = ABCatNum(rangetxt.replace(/[^A-Za-z]/g, \"\"));\n            let freezonFuc = _this.isfreezonFuc(rangetxt);\n            let $row = freezonFuc[0] ? \"$\" : \"\",\n                $col = freezonFuc[1] ? \"$\" : \"\";\n            \n            if (orient == \"u\" && !freezonFuc[0]) {\n                row -= step;\n            } \n            else if (orient == \"r\" && !freezonFuc[1]) {\n                col += step;\n            } \n            else if (orient == \"l\" && !freezonFuc[1]) {\n                col -= step;\n            } \n            else if (!freezonFuc[0]) {\n                row += step;\n            }\n\n            if(row < 0 || col < 0){\n                return _this.error.r;\n            }\n            \n            if (!isNaN(row) && !isNaN(col)) {\n                return prefix + $col + chatatABC(col) + $row + (row);\n            } \n            else if (!isNaN(row)) {\n                return prefix + $row + (row);\n            } \n            else if (!isNaN(col)) {\n                return prefix + $col + chatatABC(col);\n            } \n            else {\n                return txt;\n            }\n        } \n        else {\n            rangetxt = rangetxt.split(\":\");\n            let row = [],\n                col = [];\n\n            row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, \"\"));\n            row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, \"\"));\n            if (row[0] > row[1]) {\n                return txt;\n            }\n            \n            col[0] = ABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, \"\"));\n            col[1] = ABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, \"\"));\n            if (col[0] > col[1]) {\n                return txt;\n            }\n\n            let freezonFuc0 = _this.isfreezonFuc(rangetxt[0]);\n            let freezonFuc1 = _this.isfreezonFuc(rangetxt[1]);\n            let $row0 = freezonFuc0[0] ? \"$\" : \"\",\n                $col0 = freezonFuc0[1] ? \"$\" : \"\";\n            let $row1 = freezonFuc1[0] ? \"$\" : \"\",\n                $col1 = freezonFuc1[1] ? \"$\" : \"\";\n            \n            if (orient == \"u\") {\n                if (!freezonFuc0[0]) {\n                    row[0] -= step;\n                }\n\n                if (!freezonFuc1[0]) {\n                    row[1] -= step;\n                }\n            } \n            else if (orient == \"r\") {\n                if (!freezonFuc0[1]) {\n                    col[0] += step;\n                }\n\n                if (!freezonFuc1[1]) {\n                    col[1] += step;\n                }\n            } \n            else if (orient == \"l\") {\n                if (!freezonFuc0[1]) {\n                    col[0] -= step;\n                }\n\n                if (!freezonFuc1[1]) {\n                    col[1] -= step;\n                }\n            } \n            else {\n                if (!freezonFuc0[0]) {\n                    row[0] += step;\n                }\n\n                if (!freezonFuc1[0]) {\n                    row[1] += step;\n                }\n            }\n\n            if(row[0] < 0 || col[0] < 0){\n                return _this.error.r;\n            }\n\n            if (isNaN(col[0]) && isNaN(col[1])) {\n                return prefix + $row0 + (row[0]) + \":\" + $row1 + (row[1]);\n            } \n            else if (isNaN(row[0]) && isNaN(row[1])) {\n                return prefix + $col0 + chatatABC(col[0]) + \":\" + $col1 + chatatABC(col[1]);\n            } \n            else {\n                return prefix + $col0 + chatatABC(col[0]) + $row0 + (row[0]) + \":\" + $col1 + chatatABC(col[1]) + $row1 + (row[1]);\n            }\n        }\n    }\n\n\n    static iscelldata(txt:string) { //判断是否为单元格格式\n        let val = txt.split(\"!\"),\n            rangetxt;\n\n        if (val.length > 1) {\n            rangetxt = val[1];\n        } \n        else {\n            rangetxt = val[0];\n        }\n\n        let reg_cell = /^(([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+))$/g; //增加正则判断单元格为字母+数字的格式：如 A1:B3\n        let reg_cellRange = /^(((([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+)))|((([a-zA-Z]+)|([$][a-zA-Z]+))))$/g; //增加正则判断单元格为字母+数字或字母的格式：如 A1:B3，A:A\n        \n        if (rangetxt.indexOf(\":\") == -1) {\n            let row = parseInt(rangetxt.replace(/[^0-9]/g, \"\")) - 1;\n            let col = ABCatNum(rangetxt.replace(/[^A-Za-z]/g, \"\"));\n            \n            if (!isNaN(row) && !isNaN(col) && rangetxt.toString().match(reg_cell)) {\n                return true;\n            } \n            else if (!isNaN(row)) {\n                return false;\n            } \n            else if (!isNaN(col)) {\n                return false;\n            } \n            else {\n                return false;\n            }\n        } \n        else {\n            reg_cellRange = /^(((([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+)))|((([a-zA-Z]+)|([$][a-zA-Z]+)))|((([0-9]+)|([$][0-9]+s))))$/g;\n\n            rangetxt = rangetxt.split(\":\");\n\n            let row = [],col = [];\n            row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, \"\")) - 1;\n            row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, \"\")) - 1;\n            if (row[0] > row[1]) {\n                return false;\n            }\n\n            col[0] = ABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, \"\"));\n            col[1] = ABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, \"\"));\n            if (col[0] > col[1]) {\n                return false;\n            }\n\n            if(rangetxt[0].toString().match(reg_cellRange) && rangetxt[1].toString().match(reg_cellRange)){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n    }\n\n    static isfreezonFuc(txt:string) {\n        let row = txt.replace(/[^0-9]/g, \"\");\n        let col = txt.replace(/[^A-Za-z]/g, \"\");\n        let row$ = txt.substr(txt.indexOf(row) - 1, 1);\n        let col$ = txt.substr(txt.indexOf(col) - 1, 1);\n        let ret = [false, false];\n\n        if (row$ == \"$\") {\n            ret[0] = true;\n        }\n        if (col$ == \"$\") {\n            ret[1] = true;\n        }\n\n        return ret;\n    }\n\n}\n\n\n\nexport function isChinese(temp:string):boolean\n{ \n    var re = /[^\\u4e00-\\u9fa5]/; \n    var reg = /[\\u3002|\\uff1f|\\uff01|\\uff0c|\\u3001|\\uff1b|\\uff1a|\\u201c|\\u201d|\\u2018|\\u2019|\\uff08|\\uff09|\\u300a|\\u300b|\\u3008|\\u3009|\\u3010|\\u3011|\\u300e|\\u300f|\\u300c|\\u300d|\\ufe43|\\ufe44|\\u3014|\\u3015|\\u2026|\\u2014|\\uff5e|\\ufe4f|\\uffe5]/;\n    if(reg.test(temp)) return true; \n    if(re.test(temp)) return false; \n\treturn true; \n}\n \nexport function isJapanese(temp:string):boolean\n{ \n\tvar re = /[^\\u0800-\\u4e00]/; \n\tif(re.test(temp)) return false; \n\treturn true; \n}\n \nexport function isKoera(chr:any):boolean {\n\t\n\tif(((chr > 0x3130 && chr < 0x318F) || \n\t    (chr >= 0xAC00 && chr <= 0xD7A3))) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport function isContainMultiType(str:string):boolean {\n\t\n    let isUnicode = false;\n    if(escape(str).indexOf(\"%u\")>-1){\n        isUnicode = true;\n    }\n\n    let isNot = false;\n    let reg = /[0-9a-z]/gi; \n    if(reg.test(str)){\n        isNot = true;\n    }\n\n    let reEnSign = /[\\x00-\\xff]+/g;\n    if(reEnSign.test(str)){\n        isNot = true;\n    }\n\n    if(isUnicode && isNot){\n        return true;\n    }\n\n    return false;\n\n}\n\n\n\n\n\n\n\n\nexport function getBinaryContent (path:any, options:any) {\n    let promise, resolve:any, reject:any;\n    let callback:any;\n\n    if (!options) {\n        options = {};\n    }\n\n    // taken from jQuery\n    let createStandardXHR = function () {\n        try {\n            return new window.XMLHttpRequest();\n        } catch( e ) {}\n    }\n\n    let createActiveXHR = function () {\n        try {\n            return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n        } catch( e ) {}\n    }\n\n    // Create the request object\n    var createXHR = (typeof window !== \"undefined\" && window.ActiveXObject) ?\n        /* Microsoft failed to properly\n        * implement the XMLHttpRequest in IE7 (can't request local files),\n        * so we use the ActiveXObject when it is available\n        * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n        * we need a fallback.\n        */\n        function() {\n        return createStandardXHR() || createActiveXHR();\n    } :\n        // For all other browsers, use the standard XMLHttpRequest object\n        createStandardXHR;\n\n    // backward compatible callback\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    } else if (typeof options.callback === 'function') {\n        // callback inside options object\n        callback = options.callback;\n    }\n\n    resolve = function (data:any) { callback(null, data); };\n    reject = function (err:any) { callback(err, null); };\n\n    try {\n        var xhr = createXHR();\n\n        xhr.open('GET', path, true);\n\n        // recent browsers\n        if (\"responseType\" in xhr) {\n            xhr.responseType = \"arraybuffer\";\n        }\n\n        // older browser\n        if(xhr.overrideMimeType) {\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n        }\n\n        xhr.onreadystatechange = function (event:Event) {\n            // use `xhr` and not `this`... thanks IE\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0) {\n                    try {\n                        resolve(function (xhr:XMLHttpRequest) {\n                            // for xhr.responseText, the 0xFF mask is applied by JSZip\n                            return xhr.response || xhr.responseText;\n                        }(xhr));\n                    } catch(err) {\n                        reject(new Error(err));\n                    }\n                } else {\n                    reject(new Error(\"Ajax error for \" + path + \" : \" + this.status + \" \" + this.statusText));\n                }\n            }\n        };\n\n        if(options.progress) {\n            xhr.onprogress = function(e:any) {\n                options.progress({\n                    path: path,\n                    originalEvent: e,\n                    percent: e.loaded / e.total * 100,\n                    loaded: e.loaded,\n                    total: e.total\n                });\n            };\n        }\n\n        xhr.send();\n\n    } catch (e) {\n        reject(new Error(e), null);\n    }\n\n    // returns a promise or undefined depending on whether a callback was\n    // provided\n    return promise;\n}\n\n/**\n * multi sequence conversion\n * example:\n *  1、E14 -> 13_4\n *  2、E14 J14 O14 T14 Y14 AD14 AI14 AN14 AS14 AX14 ->\n *     ['13_4', '13_9','13_14', '13_19', '13_24', '13_3', '13_8',  '13_13', '13_18', '13_23']\n *  3、E46:E47 -> ['45_4',  '46_4']\n *\n * @param {string} sqref - before sequence\n * @returns {string[]}\n */\nexport function getMultiSequenceToNum(sqref: string): string[] {\n  if (!sqref || sqref?.length <= 0) return [];\n  sqref = sqref.toUpperCase();\n  let sqrefRawArr = sqref.split(\" \");\n  let sqrefArr = sqrefRawArr.filter((e) => e && e.trim());\n  let sqrefLastArr = getSqrefRawArrFormat(sqrefArr);\n\n  let resArr: string[] = [];\n  for (let i = 0; i < sqrefLastArr.length; i++) {\n    let _res = getSingleSequenceToNum(sqrefLastArr[i]);\n    if (_res) resArr.push(_res);\n  }\n  return resArr;\n}\n\n/**\n * get region sequence\n * example:\n *  1、[A1:C2'] -> ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']\n *\n * @param {string[]} arr - formats arr\n * @returns {string[]} - after arr\n */\nexport function getRegionSequence(arr: string[]): string[] {\n  let formatArr: string[] = [];\n  \n  const regEn = new RegExp(/[A-Z]+|[0-9]+/g);\n  const startArr = arr[0]?.match(regEn);\n  const lastArr = arr[1]?.match(regEn);\n  const columnMax = Math.max(...[ABCatNum(startArr[0]), ABCatNum(lastArr[0])]);\n  const columnMin = Math.min(...[ABCatNum(startArr[0]), ABCatNum(lastArr[0])]);\n  const rowMax = Math.max(...[parseInt(startArr[1]), parseInt(lastArr[1])]);\n  const rowMin = Math.min(...[parseInt(startArr[1]), parseInt(lastArr[1])]);\n  \n  for (let i = columnMin; i <= columnMax; i++) {\n    for (let j = rowMin; j <= rowMax; j++) {\n      formatArr.push(`${chatatABC(i)}${j}`);\n    }\n  }\n\n  return formatArr;\n}\n\n/**\n * unified processing of conversion formats\n * example:\n *  1、['E38', 'A1:C2'] -> ['E38', 'A1', 'A2', 'B1', 'B2', 'C1', 'C2']\n *\n * @param {string[]} arr - formats arr\n * @returns {string[]} - after arr\n */\nexport function getSqrefRawArrFormat(arr: string[]): string[] {\n  arr?.map((el) => {\n    if (el.includes(\":\")) {\n      let tempArr: string[] = el.split(\":\");\n      if (tempArr?.length === 2) {\n        arr = arr.concat(getRegionSequence(tempArr));\n        arr.splice(arr.indexOf(el), 1);\n      }\n    }\n  });\n\n  const resultArr = arr.filter(\n    (value, index, array) => array.indexOf(value) === index\n  );\n\n  return resultArr;\n}\n\n/**\n * single sequence to number\n * example:\n *  1、A1 -> 0_0\n *  2、ES14 -> 13_4\n *\n * @param {string} sqref - before sequence\n * @returns {string} - after sequence\n */\nexport function getSingleSequenceToNum(sqref: string): string {\n  let sqrefArray = sqref.match(/[A-Z]+|[0-9]+/g);\n  let sqrefLen = sqrefArray.length;\n  let regEn = new RegExp(\"^[A-Z]+$\");\n  let ret = \"\";\n  for (let i = sqrefLen - 1; i >= 0; i--) {\n    let cur = sqrefArray[i];\n    if (regEn.test(cur)) {\n      ret += ABCatNum(cur) + \"_\";\n    } else {\n      ret += parseInt(cur) - 1 + \"_\";\n    }\n  }\n  return ret.substring(0, ret.length - 1);\n}\n\n/**\n * R1C1 to Sequence\n * example: sheet2!R1C1 => sheet!A1\n *\n * @param {string} value - R1C1 value\n * @returns\n */\nexport function getTransR1C1ToSequence(value: string): string {\n  if (!value && value?.length <= 0) return \"\";\n\n  const len = value.length;\n  const index = value.lastIndexOf(\"!\");\n  const valueArr = [value.slice(0, index), value.slice(index + 1, len)];\n  const repStr = valueArr[1] || \"\";\n  const indexR = repStr.indexOf(\"R\");\n  const indexC = repStr.indexOf(\"C\");\n  \n  const row = Number(repStr.slice(indexR + 1, indexC));\n  const column = chatatABC(Number(repStr.slice(indexC + 1, repStr?.length)) - 1);\n\n  return `${valueArr[0]}!${column}${row}`;\n}\n\n/**\n * strip x14 format data\n *\n * @param {string} value\n * @returns {Object} - { formula, sqref }\n */\nexport function getPeelOffX14(value: string): {  [key: string]: any} {\n  if (!value || value?.length <= 0) return {};\n\n  // formula\n  const formulaReg = new RegExp(\"</x14:formula[^]>\", \"g\");\n  const lastIndex = value.match(formulaReg)?.length;\n  const lastValue = `</x14:formula${lastIndex}>`;\n  const lastValueEnd = value.indexOf(lastValue);\n  let formulaValue = value.substring(0, lastValueEnd + lastValue.length);\n  formulaValue = formulaValue\n    .replace(/<xm:f>/g, \"\")\n    .replace(/<\\/xm:f>/g, \"\")\n    .replace(/x14:/g, \"\")\n    .replace(/\\/x14:/g, \"\");\n  const formula = formulaValue;\n  \n  // sqref\n  const xmSqrefLen = \"<xm:sqref>\".length;\n  const sqrefStart = value.indexOf(\"<xm:sqref>\");\n  const sqrefEnd = value.indexOf(\"</xm:sqref>\");\n  const sqref = value.substring(sqrefStart + xmSqrefLen, sqrefEnd);\n\n  return {\n    formula,\n    sqref,\n  };\n}\n\n\n/**\n * get the value in the formula\n *\n * @param {string} value - extracted value\n * @returns {string[]}\n */\nexport function getMultiFormulaValue(value: string): string[] {\n  if (!value || value?.length <= 0) return [];\n  \n  const lenReg = new RegExp(\"formula\", \"g\");\n  const len = (value.match(lenReg)?.length || 0) / 2;\n  \n  if (len === 0) return [];\n  \n  let retArr: any = [];\n  for (let i = 1; i <= len; i++) {\n    const startLen = `<formula${i}>`?.length;\n    const start = value.indexOf(`<formula${i}>`);\n    const end = value.indexOf(`</formula${i}>`);\n    const _value = value.substring(start + startLen, end);\n    retArr.push(escapeCharacter(_value.replace(/&quot;|^\\\"|\\\"$/g, \"\")));\n  }\n  return retArr;\n}","import { LuckyFile } from \"./ToLuckySheet/LuckyFile\";\n// import {SecurityDoor,Car} from './content';\n\nimport {HandleZip} from './HandleZip';\n\nimport {IuploadfileList} from \"./ICommon\";\nimport { fstat } from \"fs\";\n\n// //demo\n// function demoHandler(){\n//     let upload = document.getElementById(\"Luckyexcel-demo-file\");\n//     let selectADemo = document.getElementById(\"Luckyexcel-select-demo\");\n//     let downlodDemo = document.getElementById(\"Luckyexcel-downlod-file\");\n//     let mask = document.getElementById(\"lucky-mask-demo\");\n//     if(upload){\n        \n//         window.onload = () => {\n            \n//             upload.addEventListener(\"change\", function(evt){\n//                 var files:FileList = (evt.target as any).files;\n//                 if(files==null || files.length==0){\n//                     alert(\"No files wait for import\");\n//                     return;\n//                 }\n\n//                 let name = files[0].name;\n//                 let suffixArr = name.split(\".\"), suffix = suffixArr[suffixArr.length-1];\n//                 if(suffix!=\"xlsx\"){\n//                     alert(\"Currently only supports the import of xlsx files\");\n//                     return;\n//                 }\n//                 LuckyExcel.transformExcelToLucky(files[0], function(exportJson:any, luckysheetfile:string){\n                    \n//                     if(exportJson.sheets==null || exportJson.sheets.length==0){\n//                         alert(\"Failed to read the content of the excel file, currently does not support xls files!\");\n//                         return;\n//                     }\n//                     console.log(exportJson, luckysheetfile);\n//                     window.luckysheet.destroy();\n                    \n//                     window.luckysheet.create({\n//                         container: 'luckysheet', //luckysheet is the container id\n//                         showinfobar:false,\n//                         data:exportJson.sheets,\n//                         title:exportJson.info.name,\n//                         userInfo:exportJson.info.name.creator\n//                     });\n//                 });\n//             });\n\n//             selectADemo.addEventListener(\"change\", function(evt){\n//                 var obj:any = selectADemo;\n//                 var index = obj.selectedIndex;\n//                 var value = obj.options[index].value;\n//                 var name = obj.options[index].innerHTML;\n//                 if(value==\"\"){\n//                     return;\n//                 }\n//                 mask.style.display = \"flex\";\n//                 LuckyExcel.transformExcelToLuckyByUrl(value, name, function(exportJson:any, luckysheetfile:string){\n                    \n//                     if(exportJson.sheets==null || exportJson.sheets.length==0){\n//                         alert(\"Failed to read the content of the excel file, currently does not support xls files!\");\n//                         return;\n//                     }\n//                     console.log(exportJson, luckysheetfile);\n//                     mask.style.display = \"none\";\n//                     window.luckysheet.destroy();\n                    \n//                     window.luckysheet.create({\n//                         container: 'luckysheet', //luckysheet is the container id\n//                         showinfobar:false,\n//                         data:exportJson.sheets,\n//                         title:exportJson.info.name,\n//                         userInfo:exportJson.info.name.creator\n//                     });\n//                 });\n//             });\n\n//             downlodDemo.addEventListener(\"click\", function(evt){\n//                 var obj:any = selectADemo;\n//                 var index = obj.selectedIndex;\n//                 var value = obj.options[index].value;\n\n//                 if(value.length==0){\n//                     alert(\"Please select a demo file\");\n//                     return;\n//                 }\n\n//                 var elemIF:any = document.getElementById(\"Lucky-download-frame\");\n//                 if(elemIF==null){\n//                     elemIF = document.createElement(\"iframe\");\n//                     elemIF.style.display = \"none\";\n//                     elemIF.id = \"Lucky-download-frame\";\n//                     document.body.appendChild(elemIF);\n//                 }\n//                 elemIF.src = value;\n\n//                 // elemIF.parentNode.removeChild(elemIF);\n//             });\n//         }\n//     }\n// }\n// demoHandler();\n\n// api\nexport class LuckyExcel{\n    static transformExcelToLucky(excelFile: File,\n        callback?: (files: IuploadfileList, fs?: string) => void,\n        errorHandler?: (err: Error) => void) {\n        let handleZip:HandleZip = new HandleZip(excelFile);\n        \n        handleZip.unzipFile(function (files: IuploadfileList) {\n            let luckyFile = new LuckyFile(files, excelFile.name);\n            let luckysheetfile = luckyFile.Parse();\n            let exportJson = JSON.parse(luckysheetfile);\n            if (callback != undefined) {\n                callback(exportJson, luckysheetfile);\n            }\n        },\n        function(err:Error){\n            if (errorHandler) {\n                errorHandler(err);\n              } else {\n                console.error(err);\n              }\n        });\n    }\n\n    static transformExcelToLuckyByUrl(\n        url: string,\n        name: string,\n        callBack?: (files: IuploadfileList, fs?: string) => void,\n        errorHandler?: (err: Error) => void) {\n        let handleZip:HandleZip = new HandleZip();\n        handleZip.unzipFileByUrl(url, function(files:IuploadfileList){\n            let luckyFile = new LuckyFile(files, name);\n            let luckysheetfile = luckyFile.Parse();\n            let exportJson = JSON.parse(luckysheetfile);\n            if(callBack != undefined){\n                callBack(exportJson, luckysheetfile);\n            }\n        },\n        function(err:Error){\n            if (errorHandler) {\n                errorHandler(err);\n              } else {\n                console.error(err);\n              }\n        });\n    }\n\n    static transformLuckyToExcel(\n        LuckyFile: any,\n        callBack?: (files: string) => void ,\n        errorHandler?: (err: Error) => void){ }\n}","import {LuckyExcel} from \"./main\"\n// export Node module\nexport = LuckyExcel;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
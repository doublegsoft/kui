{"version":3,"sources":["calendar.js"],"names":["this","parent","options","_classCallCheck","Calendar","viewMode","time","pickMode","hasSwitcher","hasFooter","hasClock","onDatePick","onMonthPick","onYearPick","onTodayPick","DATES","elements","wrap","header","title","switcher","prev","next","body","week","dates","months","today","minYear","data","maxYear","year","month","date","picked","day","text","fullText","_createClass","startDate","key","monthText","defaults","set","setYear","getMonth","getDate","_setYears","endDate","dateRanges","getWeekRanges","$header","$switcher","appendChild","_renderDays","footer","$body","_renderDates","_renderMonths","$wrap","$fragment","get","$footer","Delegate","value","selectorYear","selectorToday","selectorTitle","PREV","selectorDate","DOT","STYLES","DATE","selectorPrev","selectorNext","getEls","on","CLICK","_dateClick","selectorMonth","_monthClick","_yearClick","off","_todayClick","_nextClick","MONTHS","DAYS","years","start","end","mode","arguments","length","undefined","$months","DOM","_renderTitle","removeClass","$week","addClass","CLS_HIDDEN","$years","$dates","_repaintDates","startYear","getYears","getYear","setMonth","updateView","toString","callback","$date","getAttribute","PICKED","$picked","pickedDates","hasClass","CLS_PICKED","isFunction","Utils","setDate","push","getPicked","_updateDateRanges","ranges","$month","update","$year","getToday","HIDDEN","CLS_HEADER","CLS_TITLE","CLS_SWITCHER","CLS_PREV","WRAP_WITHOUT_FOOTER","CLS_ICON_PREV","CLS_NEXT","NEXT","CLS_ICON_NEXT","CLS_BODY","CLS_WEEK","WEEK","CLS_DATES","CLS_MONTHS","CLS_YEARS","TIME","CLS_FOOTER","CLS_FOOTER_DATE","CLS_TODAY","CLS_FOOTER_TIME","createElement","wrapClassName","weekClassName","FOOTER_TIME","datesClassName","monthsClassName","yearsClassName","SPACE","document","getElementById","className","CLS_TEXT","CLS_TIME","$title","innerHTML","fragment","TEXT","createDocumentFragment","i","CLS_DAY","CLS_WEEKEND","days","firstDateDay","prevYear","isLeapYear","prevDays","prevMonth","isNext","isPrev","nextMonth","nextDays","_getDatesFragment","isDatesEqual","CLS_PICKED_RANGE","isCurrent","DATE_NEXT","CURRENT","CLS_DATE","isToday","getDay","fullDate","$children","CLS_DATE_NEXT","data-date","CLS_CURRENT","isPickedDate","pickedDate","_this","getRanges","$pickedDates","forEach","querySelector","CLS_MONTH_NEXT","MONTH","CLS_MONTH","CLS_MONTH_PREV","data-month","prevStartYear","prevEndYear","yearsStart","_getYearsFragment","_renderYears","nextStartYear","yearsEnd","CLS_DISABLED","CLS_YEAR_PREV","CLS_YEAR","$today","timer","clearTimeout","Date","getHours","renderTime","getSeconds","hours","minutes","getMinutes","setTimeout","setAttribute","$time","seconds","console","evt","$el","delegateTarget","log","val","toAllSupported","numbers","lastNumber","split","parseInt","startMonth","endYear","endMonth","begins","beginNumber","timeNumber","begin","beginTime","endTime","setUTCFullYear","getTime","endNumber","ends","timeOne","timeTwo","isNumber","isString","unshift","TITLE","FOOTER","PICKED_POINT","HEADER","isArray","SWITCHER","ICON_PREV","ICON_NEXT","BODY","WEEKEND","DAY","isElement","DATE_PREV","guid","MONTH_PREV","MONTH_NEXT","trim","YEAR","YEAR_PREV","stripTags","str","FOOTER_DATE","TODAY","DISABLED","uuid","children","o","childNode","Array","nodeName","element","prefix","Object","prototype","apply","tagName","nodeType","el","style","replace","attributes","attr","allClass","child","toLowerCase","type","context","capture","call","e","getDelegateTarget","target","selector","wrapper","addEventListener","removeEventListener","_delegateWrapper","stopPropagation","preventDefault","event","window","defineProperty","TypeError","assign","to","varArgs","index","nextSource","nextKey","hasOwnProperty","configurable"],"mappings":"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","file":"calendar.min.js","sourcesContent":["/**\r\n * Calendar 类\r\n */\r\nclass Calendar {\r\n  /**\r\n   * 构造函数\r\n   * ========================================================================\r\n   * @constructor\r\n   * @param {Object} [options] - 日历控件的配置参数\r\n   * @param [options.parent] - 日历显示的位置（DOM 节点 ID）\r\n   * @param [options.time] - 日历初始化显示的时间\r\n   * @param [options.viewMode] - 日历的试图模式：0 - 日期试图（默认值）\r\n   *                                           1 - 月份试图\r\n   *                                           2 - 年代试图\r\n   * @param [options.pickMode] - 日历的日期选择模式: single - 单选模式（默认值）\r\n   *                                               multiple - 多选模式\r\n   *                                               range - 范围选择模式\r\n   *                                               week - 星期选择模式\r\n   * @param [options.hasSwitcher] - 是否显示上下切换按钮（默认值：true）\r\n   * @param [options.hasFooter] - 是否显示日历页脚（默认值：true）\r\n   * @param [options.hasClock] - 是否显示当前时间（默认值：true）\r\n   * @param [options.onDatePick] - 选择日期后的自定义事件处理器\r\n   * @param [options.onMonthPick] - 选择月份后的自定义事件处理器\r\n   * @param [options.onYearPick] - 选择年份后的自定义事件处理器\r\n   * @param [options.onTodayPick] - 点击当前日期的自定义事件处理器\r\n   * @param [options.MONTHS] - 月份常量（格式：去年11/12月 + 今天月份 + 明年1/2月）\r\n   * @param [options.DAYS] - 星期常量（周日为一周的第一天，周六为一周的最后一天）\r\n   * @param [options.DATES] - 月份天数常量（2月为28天，闰年则 28 + 1）\r\n   * @param [options.STYLES] - 日历控件的样式常量\r\n   * @returns {Calendar}\r\n   */\r\n  constructor (options) {\r\n    /**\r\n     * Calendar 控件的配置属性\r\n     * ========================================================================\r\n     */\r\n    this.attributes = {\r\n      // 日历显示的位置（DOM 节点 ID）\r\n      parent: '',\r\n      // 日历初始化显示的时间\r\n      time: '',\r\n      // 日历的试图模式：\r\n      // 0 - 日期试图（默认值）\r\n      // 1 - 月份试图\r\n      // 2 - 年代试图\r\n      viewMode: 0,\r\n      // 日历的日期选择模式\r\n      // single - 单选模式（默认值）\r\n      // multiple - 多选模式\r\n      // range - 范围选择模式\r\n      // week - 星期选择模式\r\n      pickMode: 'single',\r\n      // 是否显示上下切换按钮（默认值：true）\r\n      hasSwitcher: true,\r\n      // 是否显示日历页脚（默认值：true）\r\n      hasFooter: true,\r\n      // 是否显示当前时间（默认值：true）\r\n      hasClock: true,\r\n      // 选择日期后的自定义事件处理器\r\n      // time - 选中的日期时间范围\r\n      // $el - 点击的 DOM 节点\r\n      // calendar - 日历控件的实例\r\n      // onDatePick: function (time, $el, calendar) {\r\n      //   console.log('选择时间：' + time)\r\n      //   console.log('选择的 DOM 节点：' + $el)\r\n      //   console.log('日历实例：' + calendar)\r\n      // },\r\n      onDatePick: null,\r\n      // 选择月份后的自定义事件处理器\r\n      // time - 选中的日期时间\r\n      // $el - 点击的 DOM 节点\r\n      // calendar - 日历控件的实例\r\n      // onMonthPick: function (time, $el, calendar) {\r\n      //   console.log('选择时间：', time)\r\n      //   console.log('选择DOM：', $el)\r\n      //   console.log('日历实例：', calendar)\r\n      // }\r\n      onMonthPick: null,\r\n      // 选择年份后的自定义事件处理器\r\n      // time - 选中的日期时间\r\n      // $el - 点击的 DOM 节点\r\n      // calendar - 日历控件的实例\r\n      // onYearPick: function (time, $el, calendar) {\r\n      //   console.log('选择时间：', time)\r\n      //   console.log('选择DOM：', $el)\r\n      //   console.log('日历实例：', calendar)\r\n      // }\r\n      onYearPick: null,\r\n      // 点击当前日期的自定义事件处理器\r\n      // time - 选中的日期时间\r\n      // $el - 点击的 DOM 节点\r\n      // calendar - 日历控件的实例\r\n      // onTodayPick: function (time, $el, calendar) {\r\n      //   console.log('选择时间：', time)\r\n      //   console.log('选择的 DOM 节点：', $el)\r\n      //   console.log('日历实例：', calendar)\r\n      // }\r\n      onTodayPick: null,\r\n      // 月份常量\r\n      MONTHS: [],\r\n      // 星期常量\r\n      DAYS: [],\r\n      // 月份天数常量\r\n      DATES: [],\r\n      // 日历控件的样式常量\r\n      STYLES: {}\r\n    }\r\n\r\n    /**\r\n     * Calendar 控件相关的 DOM 节点属性\r\n     * ========================================================================\r\n     */\r\n    this.elements = {\r\n      // 显示日历控件的父节点\r\n      parent: null,\r\n      // 日历控件的根节点\r\n      wrap: null,\r\n      // 日历控件的头部节点\r\n      header: null,\r\n      // 日历控件的标题节点\r\n      title: null,\r\n      // 日历控件的切换器节点\r\n      switcher: null,\r\n      // 日历控件向上切换按钮节点\r\n      prev: null,\r\n      // 日历控件向下切换按钮节点\r\n      next: null,\r\n      // 日历控件的主体内容节点\r\n      body: null,\r\n      // 日历控件的星期栏节点\r\n      week: null,\r\n      // 日历控件的日期显示节点\r\n      dates: null,\r\n      // 日历控件的月份显示节点\r\n      months: null,\r\n      // 日历控件的年代显示节点\r\n      years: null,\r\n      // 日历控件的页脚节点\r\n      footer: null,\r\n      // 日历控件的当前日期显示节点\r\n      today: null,\r\n      // 日历控件的当前时间显示节点\r\n      time: null\r\n    }\r\n\r\n    /**\r\n     * Calendar 控件相关的数据属性\r\n     * ========================================================================\r\n     */\r\n    this.data = {\r\n      // 日历可以显示的最小年份\r\n      minYear: 0,\r\n      // 日历可以显示的最大年份\r\n      maxYear: 0,\r\n      // 当前选中日期的年份\r\n      year: 0,\r\n      // 当前选中日期的月份\r\n      month: 0,\r\n      // 选中的日期信息\r\n      date: {\r\n        // 年份\r\n        year: 0,\r\n        // 月份\r\n        month: 0,\r\n        // 日期\r\n        date: 0,\r\n        // 星期几\r\n        day: 0,\r\n        // 日期的英文表示（格式：2019-6-2）\r\n        text: '',\r\n        // 日期的完整中文表示（格式：2019年6月2日 星期日）\r\n        fullText: ''\r\n      },\r\n      // 多选（multiple/range/week）模式下，选中的日期数据\r\n      picked: []\r\n    }\r\n\r\n    // 执行初始化操作\r\n    // 绘制界面\r\n    // 绑定事件处理器\r\n    this.initialize(options)\r\n        .render()\r\n        .addEventListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 初始化方法\r\n   * ========================================================================\r\n   * 1. 初始化配置信息；\r\n   * 2. 初始化数据信息；\r\n   * 3. 初始化 DOM 信息（创建控件相关的 DOM 节点）；\r\n   * ========================================================================\r\n   * @param {Object} options - 配置信息\r\n   * @see this.attributes\r\n   * @returns {Calendar}\r\n   */\r\n  initialize (options) {\r\n    let year = Calendar.getYear().value\r\n    let pickMode\r\n    let time\r\n    let month\r\n    let monthText\r\n    let dateRanges\r\n    let startDate\r\n    let endDate\r\n\r\n    // 初始化配置\r\n    this.set(Calendar.defaults)\r\n        .set(options)\r\n\r\n    time = this.get('time')\r\n    pickMode = this.get('pickMode')\r\n    month = Calendar.getMonth(time)\r\n    monthText = month.text\r\n\r\n    // 初始化数据\r\n    this.setYear(time)\r\n        .setMonth(time)\r\n        .setDate(time)\r\n        ._setYears(time)\r\n\r\n    // 初始化（多选模式）选中的时间\r\n    switch (pickMode) {\r\n      case 'multiple':\r\n        this.data.picked.push(this.getDate().text)\r\n\r\n        break\r\n      case 'range':\r\n        startDate = monthText + '-' + 1\r\n        endDate = monthText + '-' + this.get('DATES')[month.value - 1]\r\n\r\n        // 默认选中整个月\r\n        this.data.picked = [\r\n          startDate,\r\n          endDate\r\n        ]\r\n\r\n        break\r\n      case 'week':\r\n        dateRanges = Calendar.getWeekRanges(time)\r\n        startDate = dateRanges[0]\r\n        endDate = dateRanges[dateRanges.length - 1]\r\n\r\n        // 默认选中配置日期所在的那个星期\r\n        this.data.picked = [\r\n          startDate,\r\n          endDate\r\n        ]\r\n\r\n        break\r\n    }\r\n\r\n    // 设置日历控件可以显示的年份范围\r\n    this.data.minYear = year - 100\r\n    this.data.maxYear = year + 100\r\n\r\n    // 创建控件相关的 DOM 节点\r\n    this._createElements()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件界面的方法\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  render () {\r\n    let elements = this.getEls()\r\n    let $wrap = elements.wrap\r\n    let $header = elements.header\r\n    let $switcher = elements.switcher\r\n    let $body = elements.body\r\n    let $footer = elements.footer\r\n    let $fragment = document.createDocumentFragment()\r\n\r\n    // 绘制头部\r\n    this._renderTitle()\r\n    $header.appendChild(elements.title)\r\n\r\n    // 配置了显示上下切换按钮\r\n    if(this.get('hasSwitcher')) {\r\n      $switcher.appendChild(elements.prev)\r\n      $switcher.appendChild(elements.next)\r\n      $header.appendChild($switcher)\r\n    }\r\n\r\n    // 绘制星期栏\r\n    this._renderDays()\r\n    $body.appendChild(elements.week)\r\n\r\n    // 绘制日期\r\n    this._renderDates()\r\n    $body.appendChild(elements.dates)\r\n\r\n    // 绘制月份\r\n    this._renderMonths()\r\n    $body.appendChild(elements.months)\r\n\r\n    // 绘制年代\r\n    this._renderYears()\r\n    $body.appendChild(elements.years)\r\n\r\n    // 配置了显示页脚\r\n    if(this.get('hasFooter')) {\r\n      // 绘制页脚\r\n      this._renderFooter()\r\n      $footer.appendChild(elements.today)\r\n\r\n      // 配置了显示当前时间\r\n      if(this.get('hasClock')) {\r\n        $footer.appendChild(elements.time)\r\n      }\r\n    }\r\n\r\n    // 将主体模块绘制出来\r\n    $wrap.appendChild($header)\r\n    $wrap.appendChild($body)\r\n\r\n    // 配置了显示页脚\r\n    if(this.get('hasFooter')) {\r\n      $wrap.appendChild($footer)\r\n    }\r\n\r\n    // 将控件零时保存在文档碎片中\r\n    $fragment.appendChild($wrap)\r\n\r\n    // 一次性绘制出整个日历控件\r\n    elements.parent.appendChild($fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 给日历控件相关的 DOM 节点绑定事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  addEventListeners () {\r\n    const DOT = '.'\r\n    const STYLES = this.get('STYLES')\r\n    const CLICK = 'click'\r\n    const selectorTitle = DOT + STYLES.TITLE\r\n    const selectorPrev = DOT + STYLES.PREV\r\n    const selectorNext = DOT + STYLES.NEXT\r\n    const selectorDate = DOT + STYLES.DATE\r\n    const selectorMonth = DOT + STYLES.MONTH\r\n    const selectorYear = DOT + STYLES.YEAR\r\n    const selectorToday = DOT + STYLES.TODAY\r\n    const Delegate = Calendar.Delegate\r\n    let $wrap = this.getEls().wrap\r\n\r\n    // 绑定点击标题的事件处理器\r\n    Delegate.on($wrap, selectorTitle, CLICK, this._titleClick, this)\r\n\r\n    if(this.get('hasSwitcher')) {\r\n      // 绑定点击向上按钮的事件处理器\r\n      Delegate.on($wrap, selectorPrev, CLICK, this._prevClick, this)\r\n      // 绑定点击向下按钮的事件处理器\r\n      Delegate.on($wrap, selectorNext, CLICK, this._nextClick, this)\r\n    }\r\n\r\n    // 绑定点击日期的事件处理器\r\n    Delegate.on($wrap, selectorDate, CLICK, this._dateClick, this)\r\n    // 绑定点击月份的事件处理器\r\n    Delegate.on($wrap, selectorMonth, CLICK, this._monthClick, this)\r\n    // 绑定点击年份的事件处理器\r\n    Delegate.on($wrap, selectorYear, CLICK, this._yearClick, this)\r\n\r\n    if(this.get('hasClock')) {\r\n      // 绑定点击今天的事件处理器\r\n      Delegate.on($wrap, selectorToday, CLICK, this._todayClick, this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重启日历控件\r\n   * ========================================================================\r\n   * 1. 销毁日历控件：\r\n   *    1.1 移除所有的绑定的事件处理器\r\n   *    1.2 隐藏控件\r\n   *    1.3 移除所有 DOM 节点\r\n   *    1.4 重置所有属性\r\n   * 2. 初始化控件\r\n   * 3. 绘制控件\r\n   * 4. 绑定事件处理起\r\n   * ========================================================================\r\n   * @param {Object} options - 配置信息\r\n   * @see this.attributes\r\n   * @returns {Calendar}\r\n   */\r\n  reload (options) {\r\n    this.destroy().initialize(options).render().addEventListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 销毁日历控件\r\n   * ========================================================================\r\n   * 1 移除所有的绑定的事件处理器\r\n   * 2 隐藏控件\r\n   * 3 移除所有 DOM 节点\r\n   * 4 重置所有属性\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  destroy () {\r\n    this.removeEventListeners().hide().remove().reset()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 移除所有绑定的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  removeEventListeners () {\r\n    const CLICK = 'click'\r\n    const Delegate = Calendar.Delegate\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Delegate.off($wrap, CLICK, this._titleClick)\r\n\r\n    if(this.get('hasSwitcher')) {\r\n      Delegate.off($wrap, CLICK, this._prevClick)\r\n      Delegate.off($wrap, CLICK, this._nextClick)\r\n    }\r\n\r\n    Delegate.off($wrap, CLICK, this._dateClick)\r\n    Delegate.off($wrap, CLICK, this._monthClick)\r\n    Delegate.off($wrap, CLICK, this._yearClick)\r\n\r\n    if(this.get('hasClock')) {\r\n      Delegate.off($wrap, CLICK, this._todayClick)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 移除所有 DOM 节点\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  remove () {\r\n    let elements = this.getEls()\r\n\r\n    elements.parent.removeChild(elements.wrap)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重置所有属性\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  reset () {\r\n    this.attributes = {\r\n      parent: '',\r\n      time: '',\r\n      viewMode: 0,\r\n      pickMode: 'single',\r\n      hasSwitcher: true,\r\n      hasFooter: true,\r\n      hasClock: true,\r\n      MONTHS: [],\r\n      DAYS: [],\r\n      DATES: [],\r\n      STYLES: {}\r\n    }\r\n\r\n    this.elements = {\r\n      parent: null,\r\n      wrap: null,\r\n      header: null,\r\n      title: null,\r\n      switcher: null,\r\n      prev: null,\r\n      next: null,\r\n      body: null,\r\n      week: null,\r\n      dates: null,\r\n      months: null,\r\n      years: null,\r\n      footer: null,\r\n      today: null,\r\n      time: null,\r\n      year: null,\r\n      month: null,\r\n      date: null\r\n    }\r\n\r\n    this.data = {\r\n      minYear: 0,\r\n      maxYear: 0,\r\n      years: {\r\n        start: 0,\r\n        end: 0\r\n      },\r\n      year: 0,\r\n      month: 0,\r\n      date: {\r\n        year: 0,\r\n        month: 0,\r\n        date: 0,\r\n        day: 0,\r\n        text: '',\r\n        fullText: ''\r\n      },\r\n      picked: []\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取配置信息\r\n   * ========================================================================\r\n   * @param {String} attr - 配置属性名称\r\n   * @returns {*} - 返回对应属性的值\r\n   */\r\n  get (attr) {\r\n    return this.attributes[attr]\r\n  }\r\n\r\n  /**\r\n   * 设置配置信息\r\n   * ========================================================================\r\n   * @param {Object} [options] - 配置信息对象\r\n   * @returns {Calendar}\r\n   */\r\n  set (options = {}) {\r\n    Object.assign(this.attributes, options)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件所有相关的 DOM 节点的对象\r\n   * ========================================================================\r\n   * @see Calendar.elements\r\n   * @returns {Object}\r\n   */\r\n  getEls () {\r\n    return this.elements\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前显示的年份信息\r\n   * ========================================================================\r\n   * @returns {Number} - 返回日历控件当前显示的年份\r\n   */\r\n  getYear () {\r\n    return this.data.year\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前的年份\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示年份的字符串或数字（默认值：今年）\r\n   *                                 字符串格式：'2019'、'2019-2' 或 '2019-2-2'\r\n   *                                 数字格式：  1546300800000\r\n   * @returns {Calendar}\r\n   */\r\n  setYear (time) {\r\n    this.data.year = Calendar.getYear(time).value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得日历控件当前显示的月份信息\r\n   * ========================================================================\r\n   * @returns {Number} - 返回日历控件当前显示的月份\r\n   */\r\n  getMonth () {\r\n    return this.data.month\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前显示的月份\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示月份的字符串或数字（默认值：本月）\r\n   * @returns {Calendar}\r\n   */\r\n  setMonth (time) {\r\n    this.data.month = Calendar.getMonth(time).value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前选中的日期\r\n   * ========================================================================\r\n   * @returns {Object} - 返回日历控件当前选中的日期\r\n   */\r\n  getDate () {\r\n    return this.data.date\r\n  }\r\n\r\n  /**\r\n   * 设置日历控件当前选中的日期\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {Calendar}\r\n   */\r\n  setDate (time) {\r\n    this.data.date = Calendar.getDate(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件当前显示的年份所在的年代信息\r\n   * ========================================================================\r\n   * @returns {Object} - 返回当前所在年代信息\r\n   */\r\n  getYears () {\r\n    return this.data.years\r\n  }\r\n\r\n  /**\r\n   * 获取日历控件在多选（multiple/range/week）模式下选中的日期信息\r\n   * ========================================================================\r\n   * @returns {Array} - 返回选中的日期信息\r\n   */\r\n  getPicked () {\r\n    return this.data.picked\r\n  }\r\n\r\n  /**\r\n   * 根据试图显示模式\r\n   * ========================================================================\r\n   * 1. 切换日历控件的显示模式\r\n   * 2. 更新显示内容\r\n   * ========================================================================\r\n   * @param {Number} viewMode - 显示模式的值：\r\n   *                            0 - 日期显示模式（默认值）\r\n   *                            1 - 月份显示模式\r\n   *                            2 - 年代显示模式\r\n   * @returns {Calendar}\r\n   */\r\n  update (viewMode = 0) {\r\n    this.updateViewMode(viewMode).updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 更新试图显示模式的配置信息\r\n   * ========================================================================\r\n   * @param {Number} viewMode - 显示模式的值（默认值：0）\r\n   * @see this.update\r\n   * @returns {Calendar}\r\n   */\r\n  updateViewMode (viewMode = 0) {\r\n    let mode = viewMode\r\n\r\n    if (mode > 2) {\r\n      mode = 2\r\n    } else {\r\n      if (mode < 0) {\r\n        mode = 0\r\n      }\r\n    }\r\n\r\n    this.set({\r\n      viewMode: mode\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 更新日历控件的显示内容\r\n   * ========================================================================\r\n   * 1. 更新标题内容\r\n   *    1.1 日期显示模式：显示年份和月份\r\n   *    1.2 月份显示模式：显示年份\r\n   *    1.3 年份显示模式：显示年代区间信息\r\n   * 2. 更细主体内容\r\n   *    2.1 日期显示模式：隐藏年份和月份的 DOM 节点，显示星期栏和日期信息\r\n   *    2.2 月份显示模式：隐藏年份、星期栏以及日期信息\r\n   *    2.3 年份显示模式：隐藏月份 DOM 节点、星期栏以及日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  updateView () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_HIDDEN = STYLES.HIDDEN\r\n    const DOM = Calendar.DOM\r\n    const addClass = DOM.addClass\r\n    const removeClass = DOM.removeClass\r\n    let elements = this.getEls()\r\n    let $week = elements.week\r\n    let $dates = elements.dates\r\n    let $months = elements.months\r\n    let $years = elements.years\r\n\r\n    this._renderTitle()\r\n\r\n    switch (this.get('viewMode')) {\r\n      // 日期显示模式\r\n      case 0:\r\n        addClass($months, CLS_HIDDEN)\r\n        addClass($years, CLS_HIDDEN)\r\n\r\n        removeClass($week, CLS_HIDDEN)\r\n        removeClass($dates, CLS_HIDDEN)\r\n\r\n        // 重新绘制日期\r\n        this._repaintDates()\r\n\r\n        break\r\n      // 月份显示模式\r\n      case 1:\r\n        addClass($week, CLS_HIDDEN)\r\n        addClass($dates, CLS_HIDDEN)\r\n        addClass($years, CLS_HIDDEN)\r\n\r\n        removeClass($months, CLS_HIDDEN)\r\n\r\n        // 重新绘制月份\r\n        this._repaintMonths()\r\n\r\n        break\r\n      // 年份显示模式\r\n      case 2:\r\n        addClass($week, CLS_HIDDEN)\r\n        addClass($dates, CLS_HIDDEN)\r\n        addClass($months, CLS_HIDDEN)\r\n\r\n        removeClass($years, CLS_HIDDEN)\r\n\r\n        // 重新绘制年份\r\n        this._repaintYears()\r\n\r\n        break\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 向上翻页\r\n   * ========================================================================\r\n   * 1. 日期显示模式：向上翻页，显示上一个月份的日期信息\r\n   * 2. 月份显示模式：向上翻页，显示上一年的月份信息\r\n   * 3. 年份显示模式：向上翻页，显示上一个年代（10前）的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  prev () {\r\n    let years = this.getYears()\r\n    let startYear = years.start\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let minYear = this.data.minYear\r\n    let time\r\n\r\n    // 针对显示模式，处理相应的翻页逻辑\r\n    switch (this.get('viewMode')) {\r\n      // 日期显示模式\r\n      case 0:\r\n        // 切换月份\r\n        month -= 1\r\n\r\n        // 到了上一年，切换年份\r\n        if (month < 1) {\r\n          month = 12\r\n          year -= 1\r\n\r\n          // 确保不小于最小可以显示的年份\r\n          if (year < minYear) {\r\n            year = minYear\r\n          }\r\n        }\r\n\r\n        time = year + '-' + month + '-1'\r\n\r\n        this.setYear(time)\r\n            .setMonth(time)\r\n\r\n        break\r\n      case 1:\r\n        // 切换年份\r\n        year -= 1\r\n\r\n        if (year < minYear) {\r\n          year = minYear\r\n        }\r\n\r\n        this.setYear(year + '-1-1')\r\n\r\n        break\r\n      case 2:\r\n        // 切换年代\r\n        startYear -= 10\r\n\r\n        if (startYear < minYear) {\r\n          startYear = minYear + 9\r\n        }\r\n\r\n        this._setYears(startYear.toString())\r\n\r\n        break\r\n    }\r\n\r\n    // 更新显示内容\r\n    this.updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 向下翻页\r\n   * ========================================================================\r\n   * 1. 日期显示模式：向下翻页，显示下一个月份的日期信息\r\n   * 2. 月份显示模式：向下翻页，显示下一年的月份信息\r\n   * 3. 年份显示模式：向下翻页，显示下一个年代（10后）的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  next () {\r\n    let years = this.getYears()\r\n    let startYear = years.start\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let maxYear = this.data.maxYear\r\n    let time\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        month += 1\r\n\r\n        if (month > 12) {\r\n          month = 1\r\n          year += 1\r\n\r\n          if (year > maxYear) {\r\n            year = maxYear\r\n          }\r\n        }\r\n\r\n        time = year + '-' + month + '-1'\r\n\r\n        this.setYear(time)\r\n            .setMonth(time)\r\n\r\n        break\r\n      case 1:\r\n        year += 1\r\n\r\n        if (year > maxYear) {\r\n          year = maxYear\r\n        }\r\n\r\n        this.setYear(year + '-1-1')\r\n\r\n        break\r\n      case 2:\r\n        startYear += 10\r\n\r\n        if (startYear > maxYear) {\r\n          startYear = maxYear - 9\r\n        }\r\n\r\n        this._setYears(startYear.toString())\r\n\r\n        break\r\n    }\r\n\r\n    this.updateView()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择日期\r\n   * ========================================================================\r\n   * 1. 选择了选中状态的日期：\r\n   *    1.1 星期区间和单选模式：不做任何处理\r\n   *    1.2 多选模式：取消选中 DOM 节点的选中状态，并且将选中的日期在选中信息移除\r\n   *    1.3 日期区间选择模式下：取消之前选中区间的选中样式，将当前选中的日期 DOM 节点\r\n   *        设置为选中状态。移除之前选中日期信息，并将选中日期信息保存起来\r\n   * 2. 选择了未选中状态的日期：\r\n   *    2.1 单选模式：获取选中日期信息，并用这个信息替换之前选中的信息。移除之前选中样\r\n   *        式，并设置当前选中日期的选中样式\r\n   *    2.2 多选模式：获取选中的日期信息，然后保存到选中信息中，最后设置选中日期的样式\r\n   *    2.3 日期区间选择模式下：\r\n   *    2.4 星期区间选择模式：获取当前选择日期的星期区间信息，移除之前保存的区间信息将\r\n   *        新的区间信息保存起来，移除之前的区间选中样式，并设置当前选中区间的选中样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $date - 选中的日期 DOM 节点\r\n   * @returns {*}\r\n   */\r\n  pickDate ($date) {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const DOM = Calendar.DOM\r\n    const hasClass = DOM.hasClass\r\n    const addClass = DOM.addClass\r\n    const removeClass = DOM.removeClass\r\n    const isFunction = Calendar.Utils.isFunction\r\n    let pickMode = this.get('pickMode')\r\n    let elements = this.getEls()\r\n    let time = $date.getAttribute('data-date')\r\n    let callback = this.get('onDatePick')\r\n    let $picked = null\r\n    let pickedDates\r\n\r\n    // 选择了选中状态的日期\r\n    if (hasClass($date, CLS_PICKED)) {\r\n      switch (pickMode) {\r\n        // 单选/星期选择模式\r\n        case 'single':\r\n        case 'week':\r\n          return false\r\n        // 多选模式\r\n        case 'multiple':\r\n          // 取消选中样式\r\n          removeClass($date, CLS_PICKED)\r\n          // 移除选中的日期信息\r\n          this._removePicked(time)\r\n\r\n          // 设置最后一个选中的时间为当前选中日期\r\n          pickedDates = this.getPicked()\r\n          this.setDate(pickedDates[pickedDates.length - 1])\r\n\r\n          if (isFunction(callback)) {\r\n            callback(pickedDates, $date, this)\r\n          }\r\n\r\n          break\r\n        case 'range':\r\n          // 清除之前选中的数据\r\n          this.data.picked = []\r\n          // 将当前选中的日期数据保存起来\r\n          this.data.picked.push(time)\r\n\r\n          this.setDate(time)\r\n\r\n          // 绘制选中样式\r\n          elements.date = $date\r\n          this._updateDateRanges()\r\n\r\n          if (isFunction(callback)) {\r\n            callback(this.getPicked(), $date, this)\r\n          }\r\n\r\n          break\r\n      }\r\n    } else {\r\n      this.setYear(time)\r\n          .setMonth(time)\r\n\r\n      // 选择了未选中状态的日期\r\n      switch (pickMode) {\r\n        case 'single':\r\n          $picked = elements.date\r\n\r\n          // 移除之前选中日期的选中样式\r\n          if ($picked) {\r\n            removeClass($picked, CLS_PICKED)\r\n          }\r\n\r\n          // 设置当前选中日期的选中样式\r\n          addClass($date, CLS_PICKED)\r\n          elements.date = $date\r\n\r\n          this.setDate(time)\r\n\r\n          if (isFunction(callback)) {\r\n            callback(time, $date, this)\r\n          }\r\n\r\n          break\r\n        case 'multiple':\r\n          // 保存选中的日期，并对选中时间排序\r\n          this.data.picked.push(time)\r\n          this.data.picked.sort()\r\n\r\n          // 设置最晚的那个日期为当前选中日期\r\n          pickedDates = this.getPicked()\r\n          this.setDate(pickedDates[pickedDates.length - 1])\r\n\r\n          addClass($date, CLS_PICKED)\r\n\r\n          if (isFunction(callback)) {\r\n            callback(this.getPicked(), $date, this)\r\n          }\r\n\r\n          break\r\n        case 'range':\r\n          // 根据已经选中的日期长度，处理数据的保存\r\n          switch (this.data.picked.length) {\r\n            case 0:\r\n            case 1:\r\n              // 保存选中的日期\r\n              this.data.picked.push(time)\r\n\r\n              // 如果选择两个不同的日期，则完成了范围选择，需要对日期排序\r\n              if (this.data.picked.length === 2) {\r\n                this.data.picked.sort()\r\n              }\r\n\r\n              // 设置选中日期范围的最后一天为当前选中日期\r\n              pickedDates = this.getPicked()\r\n              this.setDate(pickedDates[pickedDates.length - 1])\r\n\r\n              elements.date = $date\r\n\r\n              this._updateDateRanges()\r\n\r\n              if (isFunction(callback)) {\r\n                callback(pickedDates, $date, this)\r\n              }\r\n\r\n              break\r\n            case 2:\r\n              // 之前已经选中了一个日期范围，现在需要清除之前的数据\r\n              this.data.picked = []\r\n              // 保存第一个日期点\r\n              this.data.picked.push(time)\r\n\r\n              elements.date = $date\r\n\r\n              this._updateDateRanges()\r\n\r\n              break\r\n          }\r\n\r\n          break\r\n        case 'week':\r\n          // 获得当前选中日期的星期范围\r\n          let ranges = Calendar.getWeekRanges(time)\r\n\r\n          // 清除之前的数据，保存现在的星期日期范围\r\n          this.data.picked = [ranges[0], ranges[ranges.length - 1]]\r\n\r\n          this.setDate(ranges[ranges.length - 1])\r\n\r\n          elements.date = $date\r\n\r\n          this._updateWeekRanges()\r\n\r\n          if (isFunction(callback)) {\r\n            callback(this.getPicked(), $date, this)\r\n          }\r\n\r\n          break\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择月份\r\n   * ========================================================================\r\n   * 1. 选择了已选中状态的月份：直接切换试图模式到日期试图模式\r\n   * 2. 选择了未选中状态的月份：移除之前选中的月份的选中样式，并当前选中的月份的选中\r\n   *    样式。然后更新选中年份和月份的数据，并切换到日期试图模式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $month - 选中的月份 DOM 节点\r\n   * @returns {Calendar}\r\n   */\r\n  pickMonth ($month) {\r\n    const CLS_PICKED = this.get('STYLES').PICKED\r\n    const DOM = Calendar.DOM\r\n    let elements = this.getEls()\r\n    let $picked = elements.month\r\n    let time = $month.getAttribute('data-month')\r\n    let callback = this.get('onMonthPick')\r\n\r\n    // 点击已经选中的年份\r\n    if (DOM.hasClass($month, CLS_PICKED)) {\r\n      // 切换到月份试图模式\r\n      this.update()\r\n    } else {\r\n      // 移除之前选中的年份选中样式\r\n      if ($picked) {\r\n        DOM.removeClass($picked, CLS_PICKED)\r\n      }\r\n\r\n      // 设置选中样式\r\n      DOM.addClass($month, CLS_PICKED)\r\n      elements.month = $month\r\n\r\n      this.setYear(time)\r\n          .setMonth(time)\r\n          ._setYears(time)\r\n          .update()\r\n    }\r\n\r\n    if (Calendar.Utils.isFunction(callback)) {\r\n      callback(time, $month, this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择年份\r\n   * ========================================================================\r\n   * 1. 选择了已选中状态的年份：更新选中的年份信息，并切换到月份试图模式\r\n   * 2. 选择了未选中状态的年份：移除之前选中的年份的选中样式，将当前选中的年份设为选中\r\n   *    样式，并切换到月份试图模式\r\n   * ========================================================================\r\n   * @param {HTMLElement} $year - 选中的年份 DOM 节点\r\n   * @returns {Calendar}\r\n   */\r\n  pickYear ($year) {\r\n    const CLS_PICKED = this.get('STYLES').PICKED\r\n    const DOM = Calendar.DOM\r\n    let elements = this.getEls()\r\n    let $picked = elements.year\r\n    let time = $year.getAttribute('data-year')\r\n    let callback = this.get('onYearPick')\r\n\r\n    // 点击已经选中的月份\r\n    if (DOM.hasClass($year, CLS_PICKED)) {\r\n      // 切换到日期试图模式\r\n      this.setYear(time).update(1)\r\n    } else {\r\n      // 移除之前选中的年份选中样式\r\n      if ($picked) {\r\n        DOM.removeClass($picked, CLS_PICKED)\r\n      }\r\n\r\n      // 设置选中样式\r\n      DOM.addClass($year, CLS_PICKED)\r\n      elements.year = $year\r\n\r\n      // 更新年份并切换到月份试图\r\n      this.setYear(time)\r\n          ._setYears(time)\r\n          .update(1)\r\n    }\r\n\r\n    if (Calendar.Utils.isFunction(callback)) {\r\n      callback(time, $year, this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 选择今天\r\n   * ========================================================================\r\n   * 将今天的年份、月份以及日期信息设置为当前选中日期，并切换到日期试图模式\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  pickToday () {\r\n    let time = Calendar.getToday().value\r\n    let callback = this.get('onTodayPick')\r\n\r\n    this.setYear(time)\r\n        .setMonth(time)\r\n        .setDate(time)\r\n        ._setYears(time)\r\n        .update()\r\n\r\n    if (Calendar.Utils.isFunction(callback)) {\r\n      callback(time, this.getEls().dates.querySelector('[data-date=' + time + ']'), this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 隐藏日历控件\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  hide () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Calendar.DOM.addClass($wrap, CLS_HIDDEN)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 显示日历控件\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  show () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    let $wrap = this.getEls().wrap\r\n\r\n    Calendar.DOM.removeClass($wrap, CLS_HIDDEN)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 隐藏/显示之间切换\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   */\r\n  toggle () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n\r\n    let $wrap = this.getEls().wrap\r\n\r\n    if (Calendar.DOM.hasClass($wrap, CLS_HIDDEN)) {\r\n      this.show()\r\n    } else {\r\n      this.hide()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 设置当前的年代信息\r\n   * ========================================================================\r\n   * @param {String|Number} [time] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _setYears (time) {\r\n    this.data.years = Calendar.getYears(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * （多选模式）移除选中的日期\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示日期的字符串或者数字\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _removePicked (time) {\r\n    let pickedDates = this.getPicked()\r\n    let index = pickedDates.indexOf(time)\r\n\r\n    if (index > -1) {\r\n      pickedDates.splice(index, 1)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的各个主要 DOM 节点\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _createElements () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_WRAP = STYLES.WRAP\r\n    const CLS_WRAP_WITHOUT_FOOTER = STYLES.WRAP_WITHOUT_FOOTER\r\n    const CLS_HEADER = STYLES.HEADER\r\n    const CLS_TITLE = STYLES.TITLE\r\n    const CLS_SWITCHER = STYLES.SWITCHER\r\n    const CLS_PREV = STYLES.PREV\r\n    const CLS_ICON_PREV = STYLES.ICON_PREV\r\n    const CLS_NEXT = STYLES.NEXT\r\n    const CLS_ICON_NEXT = STYLES.ICON_NEXT\r\n    const CLS_BODY = STYLES.BODY\r\n    const CLS_WEEK = STYLES.WEEK\r\n    const CLS_DATES = STYLES.DATES\r\n    const CLS_MONTHS = STYLES.MONTHS\r\n    const CLS_YEARS = STYLES.YEARS\r\n    const CLS_FOOTER = STYLES.FOOTER\r\n    const CLS_FOOTER_DATE = STYLES.FOOTER_DATE\r\n    const CLS_TODAY = STYLES.TODAY\r\n    const CLS_FOOTER_TIME = STYLES.FOOTER_TIME\r\n    const CLS_TIME = STYLES.TIME\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const CLS_HIDDEN = STYLES.HIDDEN\r\n    const SPACE = ' '\r\n    let hasFooter = this.get('hasFooter')\r\n    let elements = this.getEls()\r\n    let createElement = Calendar.DOM.createElement\r\n    let wrapClassName = CLS_WRAP\r\n    let weekClassName = CLS_WEEK\r\n    let datesClassName = CLS_DATES\r\n    let monthsClassName = CLS_MONTHS\r\n    let yearsClassName = CLS_YEARS\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        monthsClassName += SPACE + CLS_HIDDEN\r\n        yearsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n      case 1:\r\n        weekClassName += SPACE + CLS_HIDDEN\r\n        datesClassName += SPACE + CLS_HIDDEN\r\n        yearsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n      case 2:\r\n        weekClassName += SPACE + CLS_HIDDEN\r\n        datesClassName += SPACE + CLS_HIDDEN\r\n        monthsClassName += SPACE + CLS_HIDDEN\r\n        break\r\n    }\r\n\r\n    if(!hasFooter){\r\n      wrapClassName += SPACE + CLS_WRAP_WITHOUT_FOOTER\r\n    }\r\n\r\n    elements.parent = document.getElementById(this.get('parent'))\r\n\r\n    // wrap\r\n    elements.wrap = createElement('div', {\r\n      id: Calendar.Utils.guid('calendar'),\r\n      className: wrapClassName\r\n    })\r\n    // header\r\n    elements.header = createElement('div', {\r\n      className: CLS_HEADER\r\n    })\r\n    elements.title = createElement('h4', {\r\n      className: CLS_TITLE\r\n    }, [\r\n      createElement('span', {\r\n        className: CLS_TEXT\r\n      })\r\n    ])\r\n\r\n    // 配置了显示上下切换按钮\r\n    if(this.get('hasSwitcher')) {\r\n      elements.switcher = createElement('div', {\r\n        className: CLS_SWITCHER\r\n      })\r\n      elements.prev = createElement('div', {\r\n        className: CLS_PREV\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          createElement('i', {\r\n            className: CLS_ICON_PREV\r\n          })\r\n        ])\r\n      ])\r\n      elements.next = createElement('div', {\r\n        className: CLS_NEXT\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          createElement('i', {\r\n            className: CLS_ICON_NEXT\r\n          })\r\n        ])\r\n      ])\r\n    }\r\n\r\n    // body\r\n    elements.body = createElement('div', {\r\n      className: CLS_BODY\r\n    })\r\n    elements.week = createElement('div', {\r\n      className: weekClassName\r\n    })\r\n    elements.dates = createElement('div', {\r\n      className: datesClassName\r\n    })\r\n    elements.months = createElement('div', {\r\n      className: monthsClassName\r\n    })\r\n    elements.years = createElement('div', {\r\n      className: yearsClassName\r\n    })\r\n\r\n    // 配置了显示页脚\r\n    if(hasFooter) {\r\n      // footer\r\n      elements.footer = createElement('div', {\r\n        className: CLS_FOOTER\r\n      })\r\n      elements.today = createElement('div', {\r\n        className: CLS_FOOTER_DATE\r\n      }, [\r\n        createElement('p', {\r\n          className: CLS_TODAY\r\n        }, [\r\n          createElement('span', {\r\n            className: CLS_TEXT\r\n          })\r\n        ])\r\n      ])\r\n\r\n      // 配置了显示当前时间\r\n      if (this.get('hasClock')) {\r\n        elements.time = createElement('div', {\r\n          className: CLS_FOOTER_TIME\r\n        }, [\r\n          createElement('p', {\r\n            className: CLS_TIME\r\n          }, [\r\n            createElement('span', {\r\n              className: CLS_TEXT\r\n            })\r\n          ])\r\n        ])\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的标题\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderTitle () {\r\n    let $title = this.getEls().title.querySelector('.' + this.get('STYLES').TEXT)\r\n    let years = this.getYears()\r\n    let year = this.getYear()\r\n    let value = ''\r\n\r\n    switch (this.get('viewMode')) {\r\n      case 0:\r\n        // 显示完整的年月时间\r\n        value = Calendar.getMonth(year + '-' + this.getMonth() + '-1').fullText\r\n        break\r\n      case 1:\r\n        // 显示年份时间\r\n        value = Calendar.getYear(year + '-1-1').fullText\r\n        break\r\n      case 2:\r\n        // 显示年代范围格式时间\r\n        value = years.start + ' - ' + years.end\r\n        break\r\n    }\r\n\r\n    $title.innerHTML = value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的星期栏\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDays () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_DAY = STYLES.DAY\r\n    const CLS_WEEKEND = STYLES.WEEKEND\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const DAYS = this.get('DAYS')\r\n    const createElement = Calendar.DOM.createElement\r\n    let fragment = document.createDocumentFragment()\r\n\r\n    DAYS.forEach((day, i) => {\r\n      let className = i === 0 || i === DAYS.length - 1 ? CLS_DAY + ' ' + CLS_WEEKEND : CLS_DAY\r\n\r\n      // 先将创建的星期几的 DOM 节点保存到文档碎片\r\n      fragment.appendChild(createElement('div', {\r\n        className: className\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          day\r\n        ])\r\n      ]))\r\n    })\r\n\r\n    // 然后一次性添加到页面，性能会更好\r\n    this.getEls().week.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderDates () {\r\n    const DATES = this.get('DATES')\r\n    const isLeapYear = Calendar.isLeapYear\r\n    // fragments\r\n    let fragment = document.createDocumentFragment()\r\n    // current month\r\n    let year = this.getYear()\r\n    let month = this.getMonth()\r\n    let days = DATES[month - 1]\r\n    let firstDateDay = Calendar.getDay(year + '-' + month + '-' + 1).value\r\n    // prev month\r\n    let prevYear = month - 2 < 0 ? year - 1 : year\r\n    let prevMonth = month - 2 < 0 ? 12 : month - 1\r\n    let prevDays = DATES[prevMonth - 1]\r\n    // next month\r\n    let nextYear = month === 12 ? year + 1 : year\r\n    let nextMonth = month === 12 ? 1 : month + 1\r\n    let nextDays\r\n\r\n    // 如果当前是闰年，上个月是二月份，则闰年二月为29天\r\n    if (isLeapYear(year) && prevMonth === 2) {\r\n      prevDays += 1\r\n    }\r\n    else {\r\n      // 如果当前是闰年，当前月份是二月，则本月有29天\r\n      if (isLeapYear(year) && month === 2) {\r\n        days += 1\r\n      }\r\n    }\r\n\r\n    nextDays = 42 - (firstDateDay + days)\r\n\r\n    // 绘制上个月月底的最后几天\r\n    if (firstDateDay !== 0) {\r\n      fragment.appendChild(this._getDatesFragment({\r\n        year: prevYear,\r\n        month: prevMonth,\r\n        start: prevDays - (firstDateDay - 1),\r\n        end: prevDays,\r\n        isPrev: true,\r\n        isNext: false\r\n      }))\r\n    }\r\n\r\n    // 绘制本月的日期\r\n    fragment.appendChild(this._getDatesFragment({\r\n      year: year,\r\n      month: month,\r\n      start: 1,\r\n      end: days,\r\n      isPrev: false,\r\n      isNext: false\r\n    }))\r\n\r\n    // 绘制下个月月头的几天\r\n    if (nextDays > 0) {\r\n      fragment.appendChild(this._getDatesFragment({\r\n        year: nextYear,\r\n        month: nextMonth,\r\n        start: 1,\r\n        end: nextDays,\r\n        isPrev: false,\r\n        isNext: true\r\n      }))\r\n    }\r\n\r\n    this.getEls().dates.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的日期信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintDates () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $dates = this.getEls().dates\r\n\r\n    DOM.addClass($dates, CLS_HIDDEN)\r\n    $dates.innerHTML = ''\r\n    DOM.removeClass($dates, CLS_HIDDEN)\r\n\r\n    this._renderDates()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得绘制日期信息时的文档碎片\r\n   * ========================================================================\r\n   * @param {Object} options - 参数对象\r\n   * @param {Number} options.year - 年份\r\n   * @param {Number} options.month - 月份\r\n   * @param {Number} options.start - 开始的日期\r\n   * @param {Number} options.end - 结束的日期\r\n   * @param {Boolean} options.isPrev - 是否为上个月的日期\r\n   * @param {Boolean} options.isNext - 是否为下个月的日期\r\n   * @returns {DocumentFragment}\r\n   * @private\r\n   */\r\n  _getDatesFragment (options) {\r\n    const {year, month, start, end, isPrev, isNext} = options\r\n    const SPACE = ' '\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_DATE = STYLES.DATE\r\n    const CLS_DATE_PREV = STYLES.DATE_PREV\r\n    const CLS_DATE_NEXT = STYLES.DATE_NEXT\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const CLS_WEEKEND = STYLES.WEEKEND\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const createElement = Calendar.DOM.createElement\r\n    const isDatesEqual = Calendar.isDatesEqual\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let date = start\r\n    let pickMode = this.get('pickMode')\r\n    let pickedDates = this.getPicked()\r\n\r\n    for (; date <= end; date += 1) {\r\n      let fullDate = year + '-' + month + '-' + date\r\n      let isCurrent = Calendar.isToday(fullDate)\r\n      let day = Calendar.getDay(fullDate)\r\n      let $children = [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          date\r\n        ])\r\n      ]\r\n      let className = ''\r\n      let $date\r\n\r\n      $date = createElement('div', {\r\n        'data-date': fullDate\r\n      }, $children)\r\n\r\n      className += CLS_DATE\r\n\r\n      if (isPrev) {\r\n        className += (SPACE + CLS_DATE_PREV)\r\n      } else {\r\n        if (isNext) {\r\n          className += (SPACE + CLS_DATE_NEXT)\r\n        }\r\n      }\r\n\r\n      // 当前（今天）的日期\r\n      if (isCurrent) {\r\n        className += (SPACE + CLS_CURRENT)\r\n      }\r\n\r\n      // 周末\r\n      if (day.value === 0 || day.value === 6) {\r\n        className += (SPACE + CLS_WEEKEND)\r\n      }\r\n\r\n      switch (pickMode) {\r\n        // 单选模式\r\n        case 'single':\r\n          let pickedDate = this.getDate().text\r\n          let isPickedDate = isDatesEqual(fullDate, pickedDate)\r\n\r\n          if (isPickedDate) {\r\n            className += (SPACE + CLS_PICKED)\r\n            elements.date = $date\r\n          }\r\n          break\r\n        // 多选模式\r\n        case 'multiple':\r\n          pickedDates.forEach((picked) => {\r\n            let isPicked = isDatesEqual(fullDate, picked)\r\n\r\n            if (isPicked) {\r\n              className += (SPACE + CLS_PICKED)\r\n            }\r\n          })\r\n\r\n          break\r\n        // 区间模式\r\n        case 'range':\r\n        case 'week':\r\n          let dateRanges = []\r\n\r\n          // 只有选中了两个节点，才绘制选中日期区间的样式\r\n          if (pickedDates.length === 2) {\r\n            dateRanges = Calendar.getRanges(pickedDates[0], pickedDates[1])\r\n\r\n            dateRanges.forEach((picked, i) => {\r\n              let isPicked = isDatesEqual(fullDate, picked)\r\n\r\n              if (!isPicked) {\r\n                return false\r\n              }\r\n\r\n              // 设置中间日期的样式\r\n              if (i !== 0 && i !== (dateRanges.length - 1)) {\r\n                className += (SPACE + CLS_PICKED)\r\n                className += (SPACE + CLS_PICKED_RANGE)\r\n              } else {\r\n                if (i === 0 || i === dateRanges.length - 1) {\r\n                  className += (SPACE + CLS_PICKED)\r\n                }\r\n              }\r\n            })\r\n          } else {\r\n            if (pickedDates.length === 1) {\r\n              className += (SPACE + CLS_PICKED)\r\n            }\r\n          }\r\n\r\n          break\r\n      }\r\n\r\n      $date.className = className\r\n\r\n      fragment.appendChild($date)\r\n    }\r\n\r\n    return fragment\r\n  }\r\n\r\n  /**\r\n   * 绘制选中的日期区间选中样式\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _updateDateRanges () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const DOM = Calendar.DOM\r\n    const hasClass = DOM.hasClass\r\n    const removeClass = DOM.removeClass\r\n    const addClass = DOM.addClass\r\n    let elements = this.getEls()\r\n    let $date = this.elements.date\r\n    let $dates = elements.dates\r\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\r\n\r\n    switch (this.data.picked.length) {\r\n      case 1:\r\n        // 移除之前的选中样式\r\n        $pickedDates.forEach(($picked) => {\r\n          removeClass($picked, CLS_PICKED)\r\n\r\n          if (hasClass($picked, CLS_PICKED_RANGE)) {\r\n            removeClass($picked, CLS_PICKED_RANGE)\r\n          }\r\n        })\r\n\r\n        // 绘制选中的第一个端点的选中样式\r\n        addClass($date, CLS_PICKED)\r\n\r\n        break\r\n      case 2:\r\n        let ranges = Calendar.getRanges(this.data.picked[0], this.data.picked[1])\r\n\r\n        ranges.forEach((picked, i) => {\r\n          let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\r\n\r\n          // 绘制中间区域的选中样式\r\n          if (i > 0 && i < ranges.length - 1) {\r\n            addClass($picked, CLS_PICKED)\r\n            addClass($picked, CLS_PICKED_RANGE)\r\n          }\r\n        })\r\n\r\n        // 绘制选中的第二个端点的选中样式\r\n        addClass($date, CLS_PICKED)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制选中的星期区间\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _updateWeekRanges () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_PICKED_RANGE = STYLES.PICKED_RANGE\r\n    const DOM = Calendar.DOM\r\n    const removeClass = DOM.removeClass\r\n    const addClass = DOM.addClass\r\n    let elements = this.getEls()\r\n    let $dates = elements.dates\r\n    let $pickedDates = $dates.querySelectorAll('.' + CLS_PICKED)\r\n    let picked = this.getPicked()\r\n    let ranges = Calendar.getWeekRanges(picked[0])\r\n\r\n    // 移除之前选中区域的样式\r\n    $pickedDates.forEach(($picked) => {\r\n      removeClass($picked, CLS_PICKED_RANGE)\r\n      removeClass($picked, CLS_PICKED)\r\n    })\r\n\r\n    // 设置新的选中区域的样式\r\n    ranges.forEach((picked, i) => {\r\n      let $picked = $dates.querySelector('[data-date=\"' + picked + '\"]')\r\n\r\n      // 绘制中间区域\r\n      if (i > 0 && i < ranges.length - 1) {\r\n        addClass($picked, CLS_PICKED)\r\n        addClass($picked, CLS_PICKED_RANGE)\r\n      } else {\r\n        // 绘制两头的节点\r\n        if (i === 0 || i === ranges.length - 1) {\r\n          addClass($picked, CLS_PICKED)\r\n        }\r\n      }\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的月份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderMonths () {\r\n    const SPACE = ' '\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_MONTH = STYLES.MONTH\r\n    const CLS_MONTH_PREV = STYLES.MONTH_PREV\r\n    const CLS_MONTH_NEXT = STYLES.MONTH_NEXT\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const MONTHS = this.get('MONTHS')\r\n    const DOM = Calendar.DOM\r\n    const createElement = DOM.createElement\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let year = this.getYear()\r\n    let today = Calendar.getToday()\r\n\r\n    MONTHS.forEach((MONTH, i) => {\r\n      let pickedDate = this.getDate()\r\n      let className = CLS_MONTH\r\n      let $month\r\n\r\n      // 去年的月份\r\n      if (i < 2) {\r\n        className += SPACE + CLS_MONTH_PREV\r\n\r\n        // 判断是否被选中了\r\n        if ((year - 1) === pickedDate.year && MONTH === pickedDate.month) {\r\n          className += SPACE + CLS_PICKED\r\n        }\r\n\r\n        // 创建月份的 DOM 节点\r\n        $month = createElement('div', {\r\n          className: className,\r\n          'data-month': (year - 1) + '-' + MONTH + '-1'\r\n        }, [\r\n          createElement('span', {\r\n            className: CLS_TEXT\r\n          }, [\r\n            MONTH\r\n          ])\r\n        ])\r\n      } else {\r\n        // 今年的月份\r\n        if (i >= 2 && i <= 13) {\r\n          // 判断是否为今天\r\n          if (year === today.year && MONTH === today.month) {\r\n            className += ' ' + CLS_CURRENT\r\n          }\r\n\r\n          // 判断是否被选中了\r\n          if (year === pickedDate.year && MONTH === pickedDate.month) {\r\n            className += SPACE + CLS_PICKED\r\n          }\r\n\r\n          // 创建月份的 DOM 节点\r\n          $month = createElement('div', {\r\n            className: className,\r\n            'data-month': year + '-' + MONTH + '-1'\r\n          }, [\r\n            createElement('span', {\r\n              className: CLS_TEXT\r\n            }, [\r\n              year + '-' + MONTH\r\n            ])\r\n          ])\r\n        } else {\r\n          // 明年的月份\r\n          if (i > 13 && i <= 15) {\r\n            className += SPACE + CLS_MONTH_NEXT\r\n\r\n            // 判断是否被选中了\r\n            if ((year + 1) === pickedDate.year && MONTH === pickedDate.month) {\r\n              className += SPACE + CLS_PICKED\r\n            }\r\n\r\n            // 创建月份的 DOM 节点\r\n            $month = createElement('div', {\r\n              className: className,\r\n              'data-month': (year + 1) + '-' + MONTH + '-1'\r\n            }, [\r\n              createElement('span', {\r\n                className: CLS_TEXT\r\n              }, [\r\n                MONTH\r\n              ])\r\n            ])\r\n          }\r\n        }\r\n      }\r\n\r\n      // 将所有月份 DOM 节点缓存到文档碎片中\r\n      fragment.appendChild($month)\r\n    })\r\n\r\n    elements.months.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的月份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintMonths () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $months = this.getEls().months\r\n\r\n    DOM.addClass($months, CLS_HIDDEN)\r\n    $months.innerHTML = ''\r\n    DOM.removeClass($months, CLS_HIDDEN)\r\n\r\n    this._renderMonths()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderYears () {\r\n    let years = this.getYears()\r\n    let yearsStart = years.start\r\n    let yearsEnd = years.end\r\n    let prevStartYear = yearsStart - 3\r\n    let prevEndYear = yearsStart - 1\r\n    let nextStartYear = yearsEnd + 1\r\n    let nextEndYear = yearsEnd + 3\r\n    let fragment = document.createDocumentFragment()\r\n\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: prevStartYear,\r\n      end: prevEndYear,\r\n      isPrev: true,\r\n      isNext: false\r\n    }))\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: yearsStart,\r\n      end: yearsEnd,\r\n      isPrev: false,\r\n      isNext: false\r\n    }))\r\n    fragment.appendChild(this._getYearsFragment({\r\n      start: nextStartYear,\r\n      end: nextEndYear,\r\n      isPrev: false,\r\n      isNext: true\r\n    }))\r\n\r\n    this.getEls().years.appendChild(fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 重绘日历控件的年份信息\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _repaintYears () {\r\n    const CLS_HIDDEN = this.get('STYLES').HIDDEN\r\n    const DOM = Calendar.DOM\r\n    let $years = this.getEls().years\r\n\r\n    DOM.addClass($years, CLS_HIDDEN)\r\n    $years.innerHTML = ''\r\n    DOM.removeClass($years, CLS_HIDDEN)\r\n\r\n    this._renderYears()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获取绘制年份信息的文档碎片\r\n   * ========================================================================\r\n   * @param {Object} options - 参数对象\r\n   * @param {Number} options.start - 开始年份\r\n   * @param {Number} options.end - 结束年份\r\n   * @param {Boolean} options.isPrev - 是否为上个年代的年份\r\n   * @param {Boolean} options.isNext - 是否为下个年带的年份\r\n   * @returns {DocumentFragment}\r\n   * @private\r\n   */\r\n  _getYearsFragment (options) {\r\n    const {start, end, isPrev, isNext} = options\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_YEAR = STYLES.YEAR\r\n    const CLS_YEAR_PREV = STYLES.YEAR_PREV\r\n    const CLS_YEAR_NEXT = STYLES.YEAR_NEXT\r\n    const CLS_CURRENT = STYLES.CURRENT\r\n    const CLS_PICKED = STYLES.PICKED\r\n    const CLS_DISABLED = STYLES.DISABLED\r\n    const CLS_TEXT = STYLES.TEXT\r\n    const DOM = Calendar.DOM\r\n    const createElement = DOM.createElement\r\n    let fragment = document.createDocumentFragment()\r\n    let elements = this.getEls()\r\n    let minYear = this.data.minYear\r\n    let maxYear = this.data.maxYear\r\n    let year = start\r\n\r\n    for (; year <= end; year += 1) {\r\n      let pickedDate = this.getDate()\r\n      let isCurrent = (year === Calendar.getToday().year)\r\n      let isPicked = (year === pickedDate.year)\r\n      let className = CLS_YEAR\r\n      let $year = createElement('div', {\r\n        'data-year': year + '-1-1'\r\n      }, [\r\n        createElement('span', {\r\n          className: CLS_TEXT\r\n        }, [\r\n          year\r\n        ])\r\n      ])\r\n\r\n      if (isPrev) {\r\n        className += ' ' + CLS_YEAR_PREV\r\n      } else {\r\n        if (isNext) {\r\n          className += ' ' + CLS_YEAR_NEXT\r\n        }\r\n      }\r\n\r\n      if (isCurrent) {\r\n        className += ' ' + CLS_CURRENT\r\n      }\r\n\r\n      if (isPicked) {\r\n        className += ' ' + CLS_PICKED\r\n        elements.year = $year\r\n      }\r\n\r\n      if (year < minYear || year > maxYear) {\r\n        className += ' ' + CLS_DISABLED\r\n      }\r\n\r\n      $year.className = className\r\n\r\n      fragment.appendChild($year)\r\n    }\r\n\r\n    return fragment\r\n  }\r\n\r\n  /**\r\n   * 绘制日历控件的页脚\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _renderFooter () {\r\n    const STYLES = this.get('STYLES')\r\n    const CLS_TEXT = STYLES.TEXT\r\n    let elements = this.getEls()\r\n    let $today = elements.today.querySelector('.' + CLS_TEXT)\r\n    let today = Calendar.getToday()\r\n    let timer = null\r\n\r\n    let renderTime = () => {\r\n      let $time = elements.time.querySelector('.' + CLS_TEXT)\r\n      let time = new Date()\r\n      let hours = time.getHours()\r\n      let minutes = time.getMinutes()\r\n      let seconds = time.getSeconds()\r\n\r\n      if (timer) {\r\n        clearTimeout(timer)\r\n      }\r\n\r\n      if (hours < 10) {\r\n        hours = '0' + hours\r\n      }\r\n\r\n      if (minutes < 10) {\r\n        minutes = '0' + minutes\r\n      }\r\n\r\n      if (seconds < 10) {\r\n        seconds = '0' + seconds\r\n      }\r\n\r\n      $time.innerHTML = hours + ':' + minutes + ':' + seconds\r\n\r\n      timer = setTimeout(renderTime, 1000)\r\n    }\r\n\r\n    $today.innerHTML = '今天：' + today.text\r\n    Calendar.DOM.setAttribute($today, 'data-date', today.value)\r\n\r\n    if(this.get('hasClock')) {\r\n      renderTime()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击标题的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _titleClick () {\r\n    let viewMode = this.get('viewMode')\r\n\r\n    viewMode += 1\r\n\r\n    if (viewMode > 2) {\r\n      viewMode = 2\r\n    }\r\n\r\n    this.update(viewMode)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击向上翻页的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _prevClick () {\r\n    this.prev()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击向下翻页的事件处理起\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _nextClick () {\r\n    this.next()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击日期的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _dateClick (evt) {\r\n    let $el = evt.delegateTarget\r\n    let time = $el.getAttribute('data-date')\r\n    let picked\r\n\r\n    this.pickDate($el)\r\n\r\n    picked = this.getPicked()\r\n\r\n    console.log('------------- _dateClick -------------')\r\n    if (this.get('pickMode') === 'single') {\r\n      console.log(time)\r\n    } else {\r\n      console.log(picked)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击月份的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _monthClick (evt) {\r\n    let $month = evt.delegateTarget\r\n    let time = $month.getAttribute('data-month')\r\n\r\n    this.pickMonth($month)\r\n\r\n    console.log('------------- _monthClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击年份的事件处理器\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _yearClick (evt) {\r\n    let $el = evt.delegateTarget\r\n    let time = $el.getAttribute('data-year')\r\n\r\n    this.pickYear($el)\r\n\r\n    console.log('------------- _yearClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 点击今天的事件处理器\r\n   * ========================================================================\r\n   * @returns {Calendar}\r\n   * @private\r\n   */\r\n  _todayClick () {\r\n    let elements = this.getEls()\r\n    let time = Calendar.getToday().text\r\n\r\n    this.pickToday()\r\n\r\n    // 触发日期选择逻辑\r\n    this.pickDate(elements.dates.querySelector('[data-date=\"' + time + '\"]'))\r\n\r\n    console.log('------------- _todayClick -------------')\r\n    console.log(time)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 获得年份信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {{value: (Number|{value, text, fullText}), text: string, fullText: string}}\r\n   */\r\n  static getYear (val) {\r\n    let time = !val ? new Date() : new Date(Calendar.toAllSupported(val))\r\n    let year = time.getFullYear()\r\n\r\n    return {\r\n      value: year,\r\n      text: year.toString(),\r\n      fullText: year + '年'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取月份信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示月份的字符串或者数字（默认值：本月）\r\n   * @returns {{value: number, text: string, fullText: string}}\r\n   */\r\n  static getMonth (val) {\r\n    let time = !val ? new Date() : new Date(Calendar.toAllSupported(val))\r\n    let year = Calendar.getYear(val)\r\n    let month = time.getMonth()\r\n\r\n    month += 1\r\n\r\n    return {\r\n      value: month,\r\n      text: year.text + '-' + month,\r\n      fullText: year.fullText + month + '月'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取日期信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\r\n   */\r\n  static getDate (val) {\r\n    let time = !val ? new Date() : new Date(Calendar.toAllSupported(val))\r\n    let year = Calendar.getYear(val)\r\n    let month = Calendar.getMonth(val)\r\n    let date = time.getDate()\r\n    let day = Calendar.getDay(val)\r\n    let fullDate = year.value + '-' + month.value + '-' + date\r\n    let text = month.fullText + date + '日'\r\n\r\n    return {\r\n      year: year.value,\r\n      month: month.value,\r\n      date: date,\r\n      day: day.value,\r\n      text: fullDate,\r\n      fullText: text + ' ' + day.fullText\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取星期信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {{value: number, text: string, fullText: string}}\r\n   */\r\n  static getDay (val) {\r\n    let time = !val ? new Date() : new Date(Calendar.toAllSupported(val))\r\n    let day = time.getDay()\r\n    let text = Calendar.defaults.DAYS[day]\r\n\r\n    return {\r\n      value: day,\r\n      text: text,\r\n      fullText: '星期' + text\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取今天的日期信息\r\n   * ========================================================================\r\n   * @returns {{year: (Number|{value, text}), month: number, date: number, day: number, text: string, fullText: string}}\r\n   */\r\n  static getToday () {\r\n    return Calendar.getDate()\r\n  }\r\n\r\n  /**\r\n   * 获取年代信息\r\n   * ========================================================================\r\n   * @param {String|Number} [val] - 表示年份的字符串或者数字（默认值：今年）\r\n   * @returns {{start: (number|Number|{value, text}), end: (*|number)}}\r\n   */\r\n  static getYears (val) {\r\n    let year = Calendar.getYear(val).value\r\n    let numbers = year.toString().split('')\r\n    let lastNumber = parseInt(numbers[numbers.length - 1], 10)\r\n    let yearsStart = 0\r\n    let yearsEnd = 0\r\n\r\n    if (lastNumber === 0) {\r\n      yearsStart = year\r\n      yearsEnd = year + 9\r\n    } else {\r\n      if (lastNumber === 9) {\r\n        yearsStart = year - 9\r\n        yearsEnd = year\r\n      } else {\r\n        yearsStart = year - lastNumber\r\n        yearsEnd = year + (9 - lastNumber)\r\n      }\r\n    }\r\n\r\n    return {\r\n      start: yearsStart,\r\n      end: yearsEnd\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取日期所属的整个星期的日期区间信息\r\n   * ========================================================================\r\n   * @param {String} time - 表示日期的字符串\r\n   * @returns {Array}\r\n   */\r\n  static getWeekRanges (time) {\r\n    const DATES = Calendar.defaults.DATES\r\n    const isLeapYear = Calendar.isLeapYear\r\n    let day = Calendar.getDay(time).value\r\n    let begins = time.split('-')\r\n    let year = parseInt(begins[0], 10)\r\n    let month = parseInt(begins[1], 10)\r\n    let date = parseInt(begins[2], 10)\r\n    let days = DATES[month - 1]\r\n    let startYear = year\r\n    let startMonth = month\r\n    let startDate = date - day\r\n    let endYear = year\r\n    let endMonth = month\r\n    let endDate = date + (6 - day)\r\n    let prevMonth = 0\r\n\r\n    // 闰年2月为29天，默认值为28天，所以需要+1天\r\n    if (isLeapYear(year) && month === 2) {\r\n      days += 1\r\n    }\r\n\r\n    if (startDate < 1) {\r\n      // 上一个月\r\n      prevMonth = month - 2\r\n      startMonth -= 1\r\n\r\n      if (prevMonth < 0) {\r\n        startYear -= 1\r\n        startMonth = 12\r\n        startDate = DATES[11] + startDate\r\n      } else {\r\n        // 开始日期\r\n        startDate = DATES[prevMonth] + startDate\r\n      }\r\n    }\r\n\r\n    if (endDate > days) {\r\n      endMonth += 1\r\n\r\n      // 结束日期\r\n      endDate = endDate - days\r\n\r\n      if (prevMonth > 11) {\r\n        endYear += 1\r\n        endMonth = 1\r\n      }\r\n    }\r\n\r\n    return Calendar.getRanges((startYear + '-' + startMonth + '-' + startDate), (endYear + '-' + endMonth + '-' + endDate))\r\n  }\r\n\r\n  /**\r\n   * 获取两个日期之间的所有日期信息\r\n   * ========================================================================\r\n   * @param {String} begin - 表示日期的字符串\r\n   * @param {String} end - 表示日期的字符串\r\n   * @returns {Array}\r\n   */\r\n  static getRanges (begin, end) {\r\n    const ONE_DAY_TO_SECONDS = 24 * 60 * 60 * 1000\r\n    let ranges = []\r\n    let begins = begin.split('-')\r\n    let ends = end.split('-')\r\n    let beginTime = new Date()\r\n    let endTime = new Date()\r\n    let beginNumber\r\n    let endNumber\r\n    let timeNumber\r\n\r\n    beginTime.setUTCFullYear(parseInt(begins[0], 10), parseInt(begins[1], 10) - 1, parseInt(begins[2], 10))\r\n    endTime.setUTCFullYear(parseInt(ends[0], 10), parseInt(ends[1], 10) - 1, parseInt(ends[2], 10))\r\n\r\n    beginNumber = beginTime.getTime()\r\n    endNumber = endTime.getTime()\r\n    timeNumber = beginNumber\r\n\r\n    for (; timeNumber <= endNumber; timeNumber += ONE_DAY_TO_SECONDS) {\r\n      ranges.push(Calendar.getDate(timeNumber).text)\r\n    }\r\n\r\n    return ranges\r\n  }\r\n\r\n  /**\r\n   * 判断是否为闰年\r\n   * ========================================================================\r\n   * @param {Number} year - 年份数值\r\n   * @returns {boolean}\r\n   */\r\n  static isLeapYear (year) {\r\n    return ((year % 4 === 0) || (year % 400 === 0)) && (year % 100 !== 0)\r\n  }\r\n\r\n  /**\r\n   * 判断是否为今天\r\n   * ========================================================================\r\n   * @param {String|Number} time - 表示日期的字符串或者数字\r\n   * @returns {*}\r\n   */\r\n  static isToday (time) {\r\n    return Calendar.isDatesEqual(time)\r\n  }\r\n\r\n  /**\r\n   * 判断两个日期是否相等\r\n   * ========================================================================\r\n   * @param {String|Number} dateOne - 表示日期的字符串或者数字\r\n   * @param {String|Number} [dateTwo] - 表示日期的字符串或者数字（默认值：今天）\r\n   * @returns {boolean}\r\n   */\r\n  static isDatesEqual (dateOne, dateTwo) {\r\n    const getDate = Calendar.getDate\r\n\r\n    return Calendar.isEqual(getDate(dateOne).text, getDate(dateTwo).text)\r\n  }\r\n\r\n  /**\r\n   * 判断两个时间是否相等\r\n   * ========================================================================\r\n   * @param {String|Number} timeOne - 表示日期的字符串或者数字\r\n   * @param {String|Number} timeTwo - 表示日期的字符串或者数字\r\n   * @returns {boolean}\r\n   */\r\n  static isEqual (timeOne, timeTwo) {\r\n    const toAllSupported = Calendar.toAllSupported\r\n    return new Date(toAllSupported(timeOne)).getTime() === new Date(toAllSupported(timeTwo)).getTime()\r\n  }\r\n\r\n  static toAllSupported(time) {\r\n    const Utils = Calendar.Utils\r\n    let date = []\r\n\r\n    if(Utils.isNumber(time)){\r\n      return time\r\n    } else {\r\n      if(Utils.isString(time)) {\r\n        if (time.indexOf('-')) {\r\n          date = time.split('-')\r\n        } else {\r\n          if (time.indexOf('/')) {\r\n            date = time.split('/')\r\n          }\r\n        }\r\n\r\n        if (date.length === 1) {\r\n          date.push('1')\r\n          date.push('1')\r\n        } else{\r\n          if (date.length === 2) {\r\n            // 例如：'2019-1'\r\n            if (date[0].length === 4) {\r\n              date.push('1')\r\n            } else {\r\n              // 例如：'1-2019'\r\n              if (data[1].length === 4) {\r\n                date.unshift('1')\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        return date.join('/')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 日历控件默认的配置信息\r\n * ========================================================================\r\n */\r\nCalendar.defaults = {\r\n  parent: 'calendar',\r\n  time: '',\r\n  // 0 - 日期显示模式（默认值）\r\n  // 1 - 月份显示模式\r\n  // 2 - 年代显示模式\r\n  viewMode: 0,\r\n  // single - 单选（默认值）\r\n  // multiple - 多选\r\n  // range - 范围多选\r\n  // week - 整个星期选择\r\n  pickMode: 'single',\r\n  hasSwitcher: true,\r\n  hasFooter: true,\r\n  hasClock: true,\r\n  onDatePick: null,\r\n  onMonthPick: null,\r\n  onYearPick: null,\r\n  onTodayPick: null,\r\n  MONTHS: [\r\n    11,\r\n    12,\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    1,\r\n    2\r\n  ],\r\n  DAYS: [\r\n    '日',\r\n    '一',\r\n    '二',\r\n    '三',\r\n    '四',\r\n    '五',\r\n    '六'\r\n  ],\r\n  DATES: [\r\n    31,\r\n    28,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31\r\n  ],\r\n  STYLES: {\r\n    WRAP: 'cal-md',\r\n    WRAP_WITHOUT_FOOTER: 'cal-md-without-footer',\r\n    HEADER: 'cal-hd',\r\n    TITLE: 'cal-title',\r\n    SWITCHER: 'cal-switcher',\r\n    PREV: 'cal-prev',\r\n    ICON_PREV: 'icon-angle-up',\r\n    NEXT: 'cal-next',\r\n    ICON_NEXT: 'icon-angle-down',\r\n    BODY: 'cal-bd',\r\n    WEEK: 'cal-week',\r\n    WEEKEND: 'cal-weekend',\r\n    DAY: 'cal-day',\r\n    DATES: 'cal-dates',\r\n    DATE: 'cal-date',\r\n    DATE_PREV: 'cal-date-prev',\r\n    DATE_NEXT: 'cal-date-next',\r\n    MONTHS: 'cal-months',\r\n    MONTH: 'cal-month',\r\n    MONTH_PREV: 'cal-month-prev',\r\n    MONTH_NEXT: 'cal-month-next',\r\n    YEARS: 'cal-years',\r\n    YEAR: 'cal-year',\r\n    YEAR_PREV: 'cal-year-prev',\r\n    YEAR_NEXT: 'cal-year-next',\r\n    FOOTER: 'cal-ft',\r\n    FOOTER_DATE: 'cal-ft-date',\r\n    TODAY: 'cal-today',\r\n    FOOTER_TIME: 'cal-ft-time',\r\n    TIME: 'cal-time',\r\n    TEXT: 'cal-text',\r\n    CURRENT: 'cal-current',\r\n    PICKED: 'cal-picked',\r\n    PICKED_RANGE: 'cal-picked-range',\r\n    PICKED_POINT: 'cal-picked-point',\r\n    DISABLED: 'cal-disabled',\r\n    HIDDEN: 'cal-hidden'\r\n  }\r\n}\r\n\r\n/**\r\n * 常用的工具方法\r\n * ========================================================================\r\n */\r\nCalendar.Utils = {\r\n  uuid: 0,\r\n  isString: (o) => {\r\n    return typeof o === 'string'\r\n  },\r\n  isNumber: (o) => {\r\n    return typeof o === 'number'\r\n  },\r\n  isArray: (o) => {\r\n    if (Array.isArray) {\r\n      return Array.isArray(o)\r\n    } else {\r\n      return Object.prototype.toString.apply(o) === '[object Array]'\r\n    }\r\n  },\r\n  isFunction: (o) => {\r\n    return (typeof o === 'function') || Object.prototype.toString.apply(o) === '[object Function]'\r\n  },\r\n  isElement: (o) => {\r\n    return o && o.nodeName && o.tagName && o.nodeType === 1\r\n  },\r\n  guid: (prefix) => {\r\n    let Utils = Calendar.Utils\r\n\r\n    Utils.uuid += 1\r\n\r\n    return prefix ? prefix + '-' + Utils.uuid : 'guid-' + Utils.uuid\r\n  },\r\n  trim: (str) => {\r\n    return str.replace(/^\\s+/g, '').replace(/\\s+$/g, '')\r\n  },\r\n  stripTags: (str) => {\r\n    return str.replace(/<\\/?[^>]+(>|$)/g, '')\r\n  }\r\n}\r\n\r\n/**\r\n * DOM 操作相关的工具方法\r\n * ========================================================================\r\n */\r\nCalendar.DOM = {\r\n  /**\r\n   * 创建 DOM 节点，并添加属性和子节点\r\n   * ========================================================================\r\n   * @param {String} tagName - 标签名称\r\n   * @param {Object} attributes - 属性对象\r\n   * @param {Array} [children] - 子节点数组\r\n   * @returns {HTMLElement}\r\n   */\r\n  createElement: (tagName, attributes, children) => {\r\n    const Utils = Calendar.Utils\r\n    let element = document.createElement(tagName)\r\n\r\n    for (let attr in attributes) {\r\n      if (attributes.hasOwnProperty(attr)) {\r\n        Calendar.DOM.setAttribute(element, attr, attributes[attr])\r\n      }\r\n    }\r\n\r\n    if (Utils.isArray(children)) {\r\n      children.forEach((child) => {\r\n        let childNode\r\n\r\n        if (Utils.isElement(child)) {\r\n          childNode = child\r\n        } else {\r\n          if (Utils.isString(child) || Utils.isNumber(child)) {\r\n            let text = Utils.isString(child) ? Utils.trim(Utils.stripTags(child)) : child.toString()\r\n\r\n            childNode = document.createTextNode(text)\r\n          }\r\n        }\r\n\r\n        element.appendChild(childNode)\r\n      })\r\n    }\r\n\r\n    return element\r\n  },\r\n  /**\r\n   * 给 DOM 节点设置属性/值\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} attr - 属性名称\r\n   * @param {String|Number|Boolean} value - 属性值\r\n   */\r\n  setAttribute: (el, attr, value) => {\r\n    let tagName = el.tagName.toLowerCase()\r\n\r\n    switch (attr) {\r\n      case 'style':\r\n        el.style.cssText = value\r\n        break\r\n      case 'value':\r\n        if (tagName === 'input' || tagName === 'textarea') {\r\n          el.value = value\r\n        } else {\r\n          el.setAttribute(attr, value)\r\n        }\r\n        break\r\n      case 'className':\r\n        el.className = value\r\n        break\r\n      default:\r\n        el.setAttribute(attr, value)\r\n        break\r\n    }\r\n  },\r\n  /**\r\n   * 检测 DOM 节点是否包含名为 className 的样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {*}\r\n   */\r\n  hasClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (!allClass) {\r\n      return false\r\n    }\r\n\r\n    return allClass.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\r\n  },\r\n  /**\r\n   * 给 DOM 节点添加名为 className 的样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {Boolean}\r\n   */\r\n  addClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (Calendar.DOM.hasClass(el, className)) {\r\n      return false\r\n    }\r\n\r\n    allClass += allClass.length > 0 ? ' ' + className : className\r\n\r\n    el.className = allClass\r\n  },\r\n  /**\r\n   * 移除 DOM 节点的 className 样式\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - DOM 节点\r\n   * @param {String} className - 样式名称\r\n   * @returns {Boolean}\r\n   */\r\n  removeClass (el, className) {\r\n    let allClass = el.className\r\n\r\n    if (!allClass || !Calendar.DOM.hasClass(el, className)) {\r\n      return false\r\n    }\r\n\r\n    allClass = Calendar.Utils.trim(allClass.replace(className, ''))\r\n\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\n/**\r\n * 代理事件\r\n * ========================================================\r\n * 说明：代码修改至 Nicolas Gallagher 的 delegate.js\r\n * 项目 GitHub 地址：https://github.com/necolas/delegate.js\r\n * ========================================================\r\n */\r\nCalendar.Delegate = {\r\n  /**\r\n   * 绑定代理事件\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\r\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   * @param {Boolean} [once] - 是否只触发一次（默认值：false - 事件冒泡）\r\n   */\r\n  on (el, selector, type, callback, context, capture, /* private */ once) {\r\n    const Delegate = Calendar.Delegate\r\n    const wrapper = function (e) {\r\n      let delegateTarget = Delegate.getDelegateTarget(el, e.target, selector)\r\n\r\n      e.delegateTarget = delegateTarget\r\n\r\n      if (delegateTarget) {\r\n        if (once === true) {\r\n          Delegate.off(el, type, wrapper)\r\n        }\r\n        callback.call(context || el, e)\r\n      }\r\n    }\r\n\r\n    if (type === 'mouseenter' || type === 'mouseleave') {\r\n      capture = true\r\n    }\r\n\r\n    callback._delegateWrapper = callback\r\n    el.addEventListener(type, wrapper, capture || false)\r\n\r\n    return callback\r\n  },\r\n  /**\r\n   * 绑定只触发一次的事件\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定代理事件的 DOM 节点\r\n   * @param {String} selector - 触发 el 代理事件的 DOM 节点的选择器\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Object} [context] - callback 回调函数的 this 上下文（默认值：el）\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   */\r\n  once (el, type, selector, callback, context, capture) {\r\n    Calendar.Delegate.on(el, type, selector, callback, context, capture, true)\r\n  },\r\n  /**\r\n   * 取消事件绑定\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 取消绑定（代理）事件的 DOM 节点\r\n   * @param {String} type - 事件类型\r\n   * @param {Function} callback - 绑定事件的回调函数\r\n   * @param {Boolean} [capture] - 是否采用事件捕获（默认值：false - 事件冒泡）\r\n   */\r\n  off (el, type, callback, capture) {\r\n    if (callback._delegateWrapper) {\r\n      callback = callback._delegateWrapper\r\n      delete callback._delegateWrapper\r\n    }\r\n\r\n    if (type === 'mouseenter' || type === 'mouseleave') {\r\n      capture = true\r\n    }\r\n\r\n    el.removeEventListener(type, callback, capture || false)\r\n  },\r\n  /**\r\n   * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  stop (evt) {\r\n    const Delegate = Calendar.Delegate\r\n\r\n    Delegate.stopPropagation(evt)\r\n    Delegate.preventDefault(evt)\r\n  },\r\n  /**\r\n   * 终止事件在传播过程的捕获或冒泡\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  stopPropagation (evt) {\r\n    let event = window.event\r\n\r\n    if (evt.stopPropagation) {\r\n      evt.stopPropagation()\r\n    } else {\r\n      event.cancelBubble = true\r\n    }\r\n  },\r\n  /**\r\n   * 阻止事件的默认行为\r\n   * ========================================================================\r\n   * @param {Event} evt - 事件对象\r\n   */\r\n  preventDefault (evt) {\r\n    let event = window.event\r\n\r\n    if (evt.preventDefault) {\r\n      evt.preventDefault()\r\n    } else {\r\n      event.returnValue = false\r\n    }\r\n  },\r\n  /**\r\n   * 通过 className 获得事件代理节点的事件代理目标节点\r\n   * ========================================================================\r\n   * @param {HTMLElement} el - 绑定事件代理的节点\r\n   * @param target - （触发事件后）事件的目标对象\r\n   * @param selector - 目标节点的类选择器\r\n   * @returns {HTMLElement|Null}\r\n   */\r\n  getDelegateTarget (el, target, selector) {\r\n    while (target && target !== el) {\r\n      if (Calendar.DOM.hasClass(target, selector.replace('.', ''))) {\r\n        return target\r\n      }\r\n\r\n      target = target.parentElement\r\n    }\r\n\r\n    return null\r\n  }\r\n}\r\n\r\n// 为了处理不兼容 Object.assign\r\nif (!Calendar.Utils.isFunction(Object.assign)) {\r\n  // Must be writable: true, enumerable: false, configurable: true\r\n  Object.defineProperty(Object, \"assign\", {\r\n    value: function assign(target, varArgs) { // .length of function is 2\r\n      'use strict';\r\n      if (target == null) { // TypeError if undefined or null\r\n        throw new TypeError('Cannot convert undefined or null to object');\r\n      }\r\n\r\n      let to = Object(target);\r\n\r\n      for (let index = 1; index < arguments.length; index++) {\r\n        let nextSource = arguments[index];\r\n\r\n        if (nextSource != null) { // Skip over if undefined or null\r\n          for (let nextKey in nextSource) {\r\n            // Avoid bugs when hasOwnProperty is shadowed\r\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n              to[nextKey] = nextSource[nextKey];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return to;\r\n    },\r\n    writable: true,\r\n    configurable: true\r\n  });\r\n}\r\n"]}
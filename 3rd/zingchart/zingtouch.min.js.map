{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/core/classes/Binder.js","webpack:///./src/core/util.js","webpack:///./src/gestures/Gesture.js","webpack:///./src/core/dispatcher.js","webpack:///./src/core/interpreter.js","webpack:///./src/core/arbiter.js","webpack:///./src/gestures/Pan.js","webpack:///./src/gestures/Distance.js","webpack:///./src/gestures/Rotate.js","webpack:///./src/gestures/Swipe.js","webpack:///./src/gestures/Tap.js","webpack:///./src/core/classes/Binding.js","webpack:///./src/core/classes/ZingEvent.js","webpack:///./src/core/classes/Input.js","webpack:///./src/core/classes/State.js","webpack:///./src/core/classes/Region.js","webpack:///./src/ZingTouch.js","webpack:///./src/core/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","classes_Binder","Binder","element","bindOnce","state","_this","this","_classCallCheck","keys","registeredGestures","forEach","handler","capture","addBinding","core_util","normalizeEvent","freeze","mousedown","touchstart","pointerdown","mousemove","touchmove","pointermove","mouseup","touchend","pointerup","isWithin","currentX","currentY","previousX","previousY","tolerance","Math","abs","distanceBetweenTwoPoints","x0","x1","y0","y1","dist","sqrt","round","getMidpoint","x","y","getAngle","originX","originY","projectionX","projectionY","angle","atan2","PI","getAngularDistance","start","end","sign","getVelocity","startX","startY","startTime","endX","endY","endTime","getRightMostInput","inputs","rightMost","distance","Number","MIN_VALUE","input","initial","isInteger","isInside","target","rect","getBoundingClientRect","left","width","top","height","getPropagationPath","event","path","node","document","push","parentNode","getPathIndex","index","length","obj","setMSPreventDefault","style","removeMSPreventDefault","preventDefault","returnValue","gestures_Gesture","Gesture","Gesture_classCallCheck","type","id","every","core_dispatcher","binding","data","events","newEvent","CustomEvent","gesture","getId","detail","bubbles","cancelable","dispatchEvent","ZingTouch","unbind","getType","emitEvent","core_interpreter","bindings","evType","map","current","reduce","accumulator","core_arbiter","region","eventType","buttons","updateInputs","retrieveBindingsByInitialPos","toBeDispatched","gestures","endCount","getCurrentEventType","resetInputs","DEFAULT_INPUTS","DEFAULT_MIN_THRESHOLD","gestures_Pan","Pan","options","Pan_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","numInputs","threshold","_this2","progress","getGestureProgress","active","lastEmitted","_this3","output","reachedThreshold","distanceFromOrigin","directionFromOrigin","currentDirection","change","packData","_this4","Distance_DEFAULT_MIN_THRESHOLD","gestures_Distance","Distance","Distance_classCallCheck","Distance_possibleConstructorReturn","Distance_getPrototypeOf","isValid","lastEmittedDistance","numActiveInputs","currentDistance","centerPoint","center","Rotate_DEFAULT_INPUTS","gestures_Rotate","Rotate","arguments","undefined","Rotate_classCallCheck","Rotate_possibleConstructorReturn","Rotate_getPrototypeOf","currentPivot","bRect","currentAngle","initialAngle","previousAngle","distanceFromLast","Swipe_DEFAULT_INPUTS","DEFAULT_MAX_REST_TIME","DEFAULT_ESCAPE_VELOCITY","DEFAULT_TIME_DISTORTION","DEFAULT_MAX_PROGRESS_STACK","gestures_Swipe","Swipe","Swipe_classCallCheck","Swipe_possibleConstructorReturn","Swipe_getPrototypeOf","maxRestTime","escapeVelocity","timeDistortion","maxProgressStack","moves","time","Date","getTime","shift","currentMove","pop","lastMove","velocity","duration","DEFAULT_MIN_DELAY_MS","DEFAULT_MAX_DELAY_MS","Tap_DEFAULT_INPUTS","DEFAULT_MOVE_PX_TOLERANCE","gestures_Tap","Tap","Tap_classCallCheck","Tap_possibleConstructorReturn","Tap_getPrototypeOf","minDelay","maxDelay","previous","_ret","resetProgress","v","Tap_typeof","MAX_VALUE","interval","classes_Binding","Binding","Binding_classCallCheck","classes_ZingEvent","ZingEvent","touchIdentifier","eventObj","ZingEvent_classCallCheck","originalEvent","touches","changedTouches","Array","from","find","identifier","clientX","clientY","pageX","pageY","screenX","screenY","classes_Input","Input","Input_classCallCheck","currentEvent","classes_State","State","regionId","State_classCallCheck","numGestures","registerGesture","boundGesture","tagName","Error","indexOf","State_typeof","assignGestureId","addEventListener","filter","b","some","regionElement","pointerType","touch","update","pointerId","findInputById","setId","classes_Region","Region","Region_classCallCheck","window","PointerEvent","TouchEvent","e","unbound","retrieveBindingsByElement","removeEventListener","setType","registeredGesture","ZingTouch_ZingTouch","_regions","src_ZingTouch"],"mappings":"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","file":"zingtouch.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @file Binder.js\n */\n\n/**\n * A chainable object that contains a single element to be bound upon.\n * Called from ZingTouch.bind(), and is used to chain over gesture callbacks.\n * @class\n */\nclass Binder {\n  /**\n   * Constructor function for the Binder class.\n   * @param {Element} element - The element to bind gestures to.\n   * @param {Boolean} bindOnce - Option to bind once and only emit\n   * the event once.\n   * @param {Object} state - The state of the Region that is being bound to.\n   * @return {Object} - Returns 'this' to be chained over and over again.\n   */\n  constructor(element, bindOnce, state) {\n    /**\n     * The element to bind gestures to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    Object.keys(state.registeredGestures).forEach((key) => {\n      this[key] = (handler, capture) => {\n        state.addBinding(this.element, key, handler, capture, bindOnce);\n        return this;\n      };\n    });\n  }\n\n}\n\nexport default Binder;\n","/**\n * @file util.js\n * Various accessor and mutator functions to handle state and validation.\n */\n\nconst CIRCLE_DEGREES = 360;\nconst HALF_CIRCLE_DEGREES = 180;\n\n/**\n *  Contains generic helper functions\n * @type {Object}\n * @namespace util\n */\nlet util = {\n\n  /**\n   * Normalizes window events to be either of type start, move, or end.\n   * @param {String} type - The event type emitted by the browser\n   * @return {null|String} - The normalized event, or null if it is an\n   * event not predetermined.\n   */\n  normalizeEvent: Object.freeze({\n      mousedown:   'start',\n      touchstart:  'start',\n      pointerdown: 'start',\n\n      mousemove:   'move',\n      touchmove:   'move',\n      pointermove: 'move',\n\n      mouseup:   'end',\n      touchend:  'end',\n      pointerup: 'end',\n  }),\n  /* normalizeEvent*/\n\n  /**\n   * Determines if the current and previous coordinates are within or\n   * up to a certain tolerance.\n   * @param {Number} currentX - Current event's x coordinate\n   * @param {Number} currentY - Current event's y coordinate\n   * @param {Number} previousX - Previous event's x coordinate\n   * @param {Number} previousY - Previous event's y coordinate\n   * @param {Number} tolerance - The tolerance in pixel value.\n   * @return {boolean} - true if the current coordinates are\n   * within the tolerance, false otherwise\n   */\n  isWithin(currentX, currentY, previousX, previousY, tolerance) {\n    return ((Math.abs(currentY - previousY) <= tolerance) &&\n    (Math.abs(currentX - previousX) <= tolerance));\n  },\n  /* isWithin*/\n\n  /**\n   * Calculates the distance between two points.\n   * @param {Number} x0\n   * @param {Number} x1\n   * @param {Number} y0\n   * @param {Number} y1\n   * @return {number} The numerical value between two points\n   */\n  distanceBetweenTwoPoints(x0, x1, y0, y1) {\n    let dist = (Math.sqrt(((x1 - x0) * (x1 - x0)) + ((y1 - y0) * (y1 - y0))));\n    return Math.round(dist * 100) / 100;\n  },\n\n  /**\n   * Calculates the midpoint coordinates between two points.\n   * @param {Number} x0\n   * @param {Number} x1\n   * @param {Number} y0\n   * @param {Number} y1\n   * @return {Object} The coordinates of the midpoint.\n   */\n  getMidpoint(x0, x1, y0, y1) {\n    return {\n      x: ((x0 + x1) / 2),\n      y: ((y0 + y1) / 2),\n    };\n  },\n  /**\n   * Calculates the angle between the projection and an origin point.\n   *   |                (projectionX,projectionY)\n   *   |             /°\n   *   |          /\n   *   |       /\n   *   |    / θ\n   *   | /__________\n   *   ° (originX, originY)\n   * @param {number} originX\n   * @param {number} originY\n   * @param {number} projectionX\n   * @param {number} projectionY\n   * @return {number} - Degree along the unit circle where the project lies\n   */\n  getAngle(originX, originY, projectionX, projectionY) {\n    let angle = Math.atan2(projectionY - originY, projectionX - originX) *\n      ((HALF_CIRCLE_DEGREES) / Math.PI);\n    return CIRCLE_DEGREES - ((angle < 0) ? (CIRCLE_DEGREES + angle) : angle);\n  },\n  /**\n   * Calculates the angular distance in degrees between two angles\n   *  along the unit circle\n   * @param {number} start - The starting point in degrees\n   * @param {number} end - The ending point in degrees\n   * @return {number} The number of degrees between the\n   * starting point and ending point. Negative degrees denote a clockwise\n   * direction, and positive a counter-clockwise direction.\n   */\n  getAngularDistance(start, end) {\n    let angle = (end - start) % CIRCLE_DEGREES;\n    let sign = (angle < 0) ? 1 : -1;\n    angle = Math.abs(angle);\n    return (angle > HALF_CIRCLE_DEGREES) ?\n    sign * (CIRCLE_DEGREES - angle) : sign * angle;\n  },\n\n  /**\n   * Calculates the velocity of pixel/milliseconds between two points\n   * @param {Number} startX\n   * @param {Number} startY\n   * @param {Number} startTime\n   * @param {Number} endX\n   * @param {Number} endY\n   * @param {Number} endTime\n   * @return {Number} velocity of px/time\n   */\n  getVelocity(startX, startY, startTime, endX, endY, endTime) {\n    let distance = this.distanceBetweenTwoPoints(startX, endX, startY, endY);\n    return (distance / (endTime - startTime));\n  },\n\n  /**\n   * Returns the farthest right input\n   * @param {Array} inputs\n   * @return {Object}\n   */\n  getRightMostInput(inputs) {\n    let rightMost = null;\n    let distance = Number.MIN_VALUE;\n    inputs.forEach((input) => {\n      if (input.initial.x > distance) {\n        rightMost = input;\n      }\n    });\n    return rightMost;\n  },\n\n  /**\n   * Determines is the value is an integer and not a floating point\n   * @param {Mixed} value\n   * @return {boolean}\n   */\n  isInteger(value) {\n    return (typeof value === 'number') && (value % 1 === 0);\n  },\n\n  /**\n   * Determines if the x,y position of the input is within then target.\n   * @param {Number} x -clientX\n   * @param {Number} y -clientY\n   * @param {Element} target\n   * @return {Boolean}\n   */\n  isInside(x, y, target) {\n    const rect = target.getBoundingClientRect();\n    return ((x > rect.left && x < rect.left + rect.width) &&\n    (y > rect.top && y < rect.top + rect.height));\n  },\n  /**\n   * Polyfill for event.propagationPath\n   * @param {Event} event\n   * @return {Array}\n   */\n  getPropagationPath(event) {\n    if (event.path) {\n      return event.path;\n    } else {\n      let path = [];\n      let node = event.target;\n      while (node != document) {\n        path.push(node);\n        node = node.parentNode;\n      }\n\n      return path;\n    }\n  },\n\n  /**\n   * Retrieve the index inside the path array\n   * @param {Array} path\n   * @param {Element} element\n   * @return {Element}\n   */\n  getPathIndex(path, element) {\n    let index = path.length;\n\n    path.forEach((obj, i) => {\n      if (obj === element) {\n        index = i;\n      }\n    });\n\n    return index;\n  },\n\n  setMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = 'none';\n    element.style['touch-action'] = 'none';\n  },\n\n  removeMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = '';\n    element.style['touch-action'] = '';\n  },\n\n  preventDefault(event) {\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n  }\n};\n\nexport default util;\n","/**\n * @file Gesture.js\n * Contains the Gesture class\n */\n\nimport util from './../core/util.js';\n\n/**\n * The Gesture class that all gestures inherit from.\n */\nclass Gesture {\n  /**\n   * Constructor function for the Gesture class.\n   * @class Gesture\n   */\n  constructor() {\n    /**\n     * The generic string type of gesture ('expand'|'distance'|\n     *  'rotate'|'swipe'|'tap').\n     * @type {String}\n     */\n    this.type = null;\n\n    /**\n     * The unique identifier for each gesture determined at bind time by the\n     * state object. This allows for distinctions across instance variables of\n     * Gestures that are created on the fly (e.g. Tap-1, Tap-2, etc).\n     * @type {String|null}\n     */\n    this.id = null;\n  }\n\n  /**\n   * Set the type of the gesture to be called during an event\n   * @param {String} type - The unique identifier of the gesture being created.\n   */\n  setType(type) {\n    this.type = type;\n  }\n\n  /**\n   * getType() - Returns the generic type of the gesture\n   * @return {String} - The type of gesture\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Set the id of the gesture to be called during an event\n   * @param {String} id - The unique identifier of the gesture being created.\n   */\n  setId(id) {\n    this.id = id;\n  }\n\n  /**\n   * Return the id of the event. If the id does not exist, return the type.\n   * @return {String}\n   */\n  getId() {\n    return (this.id !== null) ? this.id : this.type;\n  }\n\n  /**\n   * Updates internal properties with new ones, only if the properties exist.\n   * @param {Object} object\n   */\n  update(object) {\n    Object.keys(object).forEach( key => {\n      this[key] = object[key];\n    });\n  }\n\n  /**\n   * start() - Event hook for the start of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n\t * @param {Object} state - The state object of the current region.\n\t * @param {Element} element - The element associated to the binding.\n   * @return {null|Object}  - Default of null\n   */\n  start(inputs, state, element) {\n    return null;\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null|Object} - Default of null\n   */\n  move(inputs, state, element) {\n    return null;\n  }\n\n  /**\n   * end() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null|Object}  - Default of null\n   */\n  end(inputs) {\n    return null;\n  }\n\n\t/**\n\t* isValid() - Pre-checks to ensure the invariants of a gesture are satisfied.\n\t* @param {Array} inputs - The array of Inputs on the screen\n\t* @param {Object} state - The state object of the current region.\n\t* @param {Element} element - The element associated to the binding.\n\t* @return {boolean} - If the gesture is valid\n\t*/\n\tisValid(inputs, state, element) {\n    return inputs.every( input => {\n        return util.isInside(input.initial.x, input.initial.y, element);\n    });\n  }\n\n}\n\nexport default Gesture;\n","/**\n * @file dispatcher.js\n * Contains logic for the dispatcher\n */\n\n/**\n * Emits data at the target element if available, and bubbles up from\n * the target to the parent until the document has been reached.\n * Called from the arbiter.\n * @param {Binding} binding - An object of type Binding\n * @param {Object} data - The metadata computed by the gesture being emitted.\n * @param {Array} events - An array of ZingEvents\n *  corresponding to the inputs on the screen.\n */\nfunction dispatcher(binding, data, events) {\n  data.events = events;\n\n  const newEvent = new CustomEvent(binding.gesture.getId(), {\n    detail: data,\n    bubbles: true,\n    cancelable: true,\n  });\n  emitEvent(binding.element, newEvent, binding);\n}\n\n/**\n * Emits the new event. Unbinds the event if the event was registered\n * at bindOnce.\n * @param {Element} target - Element object to emit the event to.\n * @param {Event} event - The CustomEvent to emit.\n * @param {Binding} binding - An object of type Binding\n */\nfunction emitEvent(target, event, binding) {\n  target.dispatchEvent(event);\n  if (binding.bindOnce) {\n    ZingTouch.unbind(binding.element, binding.gesture.getType());\n  }\n}\n\nexport default dispatcher;\n","/**\n * @file interpreter.js\n * Contains logic for the interpreter\n */\n\nimport util from './util.js';\n\n/**\n * Receives an event and an array of Bindings (element -> gesture handler)\n * to determine what event will be emitted. Called from the arbiter.\n * @param {Array} bindings - An array containing Binding objects\n * that associate the element to an event handler.\n * @param {Object} event - The event emitted from the window.\n * @param {Object} state - The state object of the current listener.\n * @return {Object | null} - Returns an object containing a binding and\n * metadata, or null if a gesture will not be emitted.\n */\nfunction interpreter(bindings, event, state) {\n  const evType = util.normalizeEvent[ event.type ];\n  const events = state.inputs.map( input => input.current );\n\n  const candidates = bindings.reduce( (accumulator, binding) => {\n    const data = binding.gesture[evType](state.inputs, state, binding.element);\n    if (data) accumulator.push({ binding, data, events });\n    return accumulator;\n  }, []);\n\n  return candidates;\n}\n\nexport default interpreter;\n","/**\n * @file arbiter.js\n * Contains logic for the dispatcher\n */\n\nimport dispatcher from './dispatcher.js';\nimport interpreter from './interpreter.js';\nimport util from './util.js';\n\n/**\n * Function that handles event flow, negotiating with the interpreter,\n * and dispatcher.\n * 1. Receiving all touch events in the window.\n * 2. Determining which gestures are linked to the target element.\n * 3. Negotiating with the Interpreter what event should occur.\n * 4. Sending events to the dispatcher to emit events to the target.\n * @param {Event} event - The event emitted from the window object.\n * @param {Object} region - The region object of the current listener.\n */\nfunction arbiter(event, region) {\n  const state = region.state;\n  const eventType = util.normalizeEvent[ event.type ];\n\n  /*\n   Return if a gesture is not in progress and won't be. Also catches the case\n   where a previous event is in a partial state (2 finger pan, waits for both\n   inputs to reach touchend)\n   */\n  if (state.inputs.length === 0 && eventType !== 'start') {\n    return;\n  }\n\n  /*\n   Check for 'stale' or events that lost focus\n   (e.g. a pan goes off screen/off region.)\n   Does not affect mobile devices.\n   */\n  if (typeof event.buttons !== 'undefined' &&\n    eventType !== 'end' &&\n    event.buttons === 0) {\n    state.resetInputs();\n    return;\n  }\n\n  // Update the state with the new events. If the event is stopped, return;\n  if (!state.updateInputs(event, region.element)) {\n    return;\n  }\n\n  // Retrieve the initial target from any one of the inputs\n  const bindings = state.retrieveBindingsByInitialPos();\n  if (bindings.length > 0) {\n    if (region.preventDefault) {\n      util.setMSPreventDefault(region.element);\n      util.preventDefault(event);\n    } else {\n      util.removeMSPreventDefault(region.element);\n    }\n\n    const toBeDispatched = {};\n    const gestures = interpreter(bindings, event, state);\n\n    /* Determine the deepest path index to emit the event\n     from, to avoid duplicate events being fired. */\n\n    const path = util.getPropagationPath(event);\n    gestures.forEach((gesture) => {\n      const id = gesture.binding.gesture.getId();\n      if (toBeDispatched[id]) {\n        if (util.getPathIndex(path, gesture.binding.element) <\n          util.getPathIndex(path, toBeDispatched[id].binding.element)) {\n          toBeDispatched[id] = gesture;\n        }\n      } else {\n        toBeDispatched[id] = gesture;\n      }\n    });\n\n    Object.keys(toBeDispatched).forEach((index) => {\n      const gesture = toBeDispatched[index];\n      dispatcher(gesture.binding, gesture.data, gesture.events);\n    });\n  }\n\n  let endCount = 0;\n  state.inputs.forEach((input) => {\n    if (input.getCurrentEventType() === 'end') {\n      endCount++;\n    }\n  });\n\n  if (endCount === state.inputs.length) {\n    state.resetInputs();\n  }\n}\n\nexport default arbiter;\n","/**\n * @file Pan.js\n * Contains the Pan class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Pan is defined as a normal movement in any direction on a screen.\n * Pan gestures do not track start events and can interact with distance gestures\n * @class Pan\n */\nclass Pan extends Gesture {\n  /**\n   * Constructor function for the Pan class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs=1] - Number of inputs for the\n   *  Pan gesture.\n   * @param {Number} [options.threshold=1] - The minimum number of\n   * pixels the input has to move to trigger this gesture.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'pan';\n\n    /**\n     * The number of inputs to trigger a Pan can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The minimum amount in pixels the pan must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ?\n      options.threshold : DEFAULT_MIN_THRESHOLD;\n  }\n\n  /**\n   * Event hook for the start of a gesture. Marks each input as active,\n   * so it can invalidate any end events.\n   * @param {Array} inputs\n   */\n  start(inputs) {\n    inputs.forEach((input) => {\n      const progress = input.getGestureProgress(this.getId());\n      progress.active = true;\n      progress.lastEmitted = {\n        x: input.current.x,\n        y: input.current.y,\n      };\n    });\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture.\n   * Fired whenever the input length is met, and keeps a boolean flag that\n   * the gesture has fired at least once.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {Object} - Returns the distance in pixels between the two inputs.\n   */\n  move(inputs, state, element) {\n    if (this.numInputs !== inputs.length) return null;\n\n    const output = {\n      data: [],\n    };\n\n    inputs.forEach( (input, index) => {\n      const progress = input.getGestureProgress(this.getId());\n      const distanceFromLastEmit = util.distanceBetweenTwoPoints(\n        progress.lastEmitted.x,\n        progress.lastEmitted.y,\n        input.current.x,\n        input.current.y\n      );\n      const reachedThreshold = distanceFromLastEmit >= this.threshold;\n\n      if (progress.active && reachedThreshold) {\n        output.data[index] = packData( input, progress );\n        progress.lastEmitted.x = input.current.x;\n        progress.lastEmitted.y = input.current.y;\n      }\n    });\n\n    return output;\n\n    function packData( input, progress ) {\n      const distanceFromOrigin = util.distanceBetweenTwoPoints(\n        input.initial.x,\n        input.current.x,\n        input.initial.y,\n        input.current.y\n      );\n      const directionFromOrigin = util.getAngle(\n        input.initial.x,\n        input.initial.y,\n        input.current.x,\n        input.current.y\n      );\n      const currentDirection = util.getAngle(\n        progress.lastEmitted.x,\n        progress.lastEmitted.y,\n        input.current.x,\n        input.current.y\n      );\n      const change = {\n        x: input.current.x - progress.lastEmitted.x,\n        y: input.current.y - progress.lastEmitted.y,\n      };\n\n      return {\n        distanceFromOrigin,\n        directionFromOrigin,\n        currentDirection,\n        change,\n      };\n    }\n  }\n\n  /* move*/\n\n  /**\n   * end() - Event hook for the end of a gesture. If the gesture has at least\n   * fired once, then it ends on the first end event such that any remaining\n   * inputs will not trigger the event until all inputs have reached the\n   * touchend event. Any touchend->touchstart events that occur before all\n   * inputs are fully off the screen should not fire.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null} - null if the gesture is not to be emitted,\n   *  Object with information otherwise.\n   */\n  end(inputs) {\n    inputs.forEach((input) => {\n      const progress = input.getGestureProgress(this.getId());\n      progress.active = false;\n    });\n    return null;\n  }\n\n  /* end*/\n}\n\nexport default Pan;\n","/**\n * @file Distance.js\n * Contains the abstract Distance class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 2;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Distance is defined as two inputs moving either together or apart.\n * @class Distance\n */\nclass Distance extends Gesture {\n  /**\n   * Constructor function for the Distance class.\n   * @param {Object} options\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'distance';\n\n    /**\n     * The minimum amount in pixels the inputs must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ?\n      options.threshold : DEFAULT_MIN_THRESHOLD;\n  }\n\n  /**\n   * Event hook for the start of a gesture. Initialized the lastEmitted\n   * gesture and stores it in the first input for reference events.\n   * @param {Array} inputs\n   */\n  start(inputs, state, element) {\n    if(!this.isValid(inputs, state, element)) {\n      return null;\n    }\n    if (inputs.length === DEFAULT_INPUTS) {\n      // Store the progress in the first input.\n      const progress = inputs[0].getGestureProgress(this.type);\n      progress.lastEmittedDistance = util.distanceBetweenTwoPoints(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n    }\n  }\n\n  /**\n   * Event hook for the move of a gesture.\n   *  Determines if the two points are moved in the expected direction relative\n   *  to the current distance and the last distance.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {Object | null} - Returns the distance in pixels between two inputs\n   */\n  move(inputs, state, element) {\n    if (state.numActiveInputs() === DEFAULT_INPUTS) {\n      const currentDistance = util.distanceBetweenTwoPoints(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n      const centerPoint = util.getMidpoint(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n\n      // Progress is stored in the first input.\n      const progress = inputs[0].getGestureProgress(this.type);\n      const change = currentDistance - progress.lastEmittedDistance;\n\n      if (Math.abs(change) >= this.threshold) {\n        progress.lastEmittedDistance = currentDistance;\n        return {\n          distance: currentDistance,\n          center: centerPoint,\n          change,\n        };\n      }\n    }\n\n    return null;\n  }\n}\n\nexport default Distance;\n","/**\n * @file Rotate.js\n * Contains the Rotate class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 2;\n\n/**\n * A Rotate is defined as two inputs moving about a circle,\n * maintaining a relatively equal radius.\n * @class Rotate\n */\nclass Rotate extends Gesture {\n  /**\n   * Constructor function for the Rotate class.\n   */\n  constructor(options = {}) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'rotate';\n\n    /**\n     * The number of touches required to emit Rotate events.\n     * @type {Number}\n     */\n    this.numInputs = options.numInputs || DEFAULT_INPUTS;\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture. Obtains the midpoint of two\n   * the two inputs and calculates the projection of the right most input along\n   * a unit circle to obtain an angle. This angle is compared to the previously\n   * calculated angle to output the change of distance, and is compared to the\n   * initial angle to output the distance from the initial angle to the current\n   * angle.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current listener.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - null if this event did not occur\n   * @return {Object} obj.angle - The current angle along the unit circle\n   * @return {Object} obj.distanceFromOrigin - The angular distance travelled\n   * from the initial right most point.\n   * @return {Object} obj.distanceFromLast - The change of angle between the\n   * last position and the current position.\n   */\n  move(inputs, state, element) {\n    const numActiveInputs = state.numActiveInputs();\n    if (this.numInputs !== numActiveInputs) return null;\n\n    let currentPivot, initialPivot;\n    let input;\n    if (numActiveInputs === 1) {\n      const bRect = element.getBoundingClientRect();\n      currentPivot = {\n        x: bRect.left + bRect.width / 2,\n        y: bRect.top + bRect.height / 2,\n      };\n      initialPivot = currentPivot;\n      input = inputs[0];\n    } else {\n      currentPivot = util.getMidpoint(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n      input = util.getRightMostInput(inputs);\n    }\n\n    // Translate the current pivot point.\n    const currentAngle = util.getAngle(\n      currentPivot.x, \n      currentPivot.y,\n      input.current.x,\n      input.current.y);\n\n    const progress = input.getGestureProgress(this.getId());\n    if (!progress.initialAngle) {\n      progress.initialAngle = progress.previousAngle = currentAngle;\n      progress.distance = progress.change = 0;\n    } else {\n      progress.change = util.getAngularDistance(\n        progress.previousAngle,\n        currentAngle);\n      progress.distance = progress.distance + progress.change;\n    }\n\n    progress.previousAngle = currentAngle;\n\n    return {\n      angle: currentAngle,\n      distanceFromOrigin: progress.distance,\n      distanceFromLast: progress.change,\n    };\n  }\n\n  /* move*/\n}\n\nexport default Rotate;\n","/**\n * @file Swipe.js\n * Contains the Swipe class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MAX_REST_TIME = 100;\nconst DEFAULT_ESCAPE_VELOCITY = 0.2;\nconst DEFAULT_TIME_DISTORTION = 100;\nconst DEFAULT_MAX_PROGRESS_STACK = 10;\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n * @class Swipe\n */\nclass Swipe extends Gesture {\n\n  /**\n   * Constructor function for the Swipe class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs] - The number of inputs to trigger a\n   * Swipe can be variable, and the maximum number being a factor of the browser\n   *  move and current move events.\n   * @param {Number} [options.maxRestTime] - The maximum resting time a point\n   *  has between it's last\n   * @param {Number} [options.escapeVelocity] - The minimum velocity the input\n   *  has to be at to emit a swipe.\n   * @param {Number} [options.timeDistortion] - (EXPERIMENTAL) A value of time\n   *  in milliseconds to distort between events.\n   * @param {Number} [options.maxProgressStack] - (EXPERIMENTAL)The maximum\n   *  amount of move events to keep\n   * track of for a swipe.\n   */\n  constructor(options) {\n    super();\n    /**\n     * The type of the Gesture\n     * @type {String}\n     */\n    this.type = 'swipe';\n\n    /**\n     * The number of inputs to trigger a Swipe can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The maximum resting time a point has between it's last move and\n     * current move events.\n     * @type {Number}\n     */\n    this.maxRestTime = (options && options.maxRestTime) ?\n      options.maxRestTime : DEFAULT_MAX_REST_TIME;\n\n    /**\n     * The minimum velocity the input has to be at to emit a swipe.\n     * This is useful for determining the difference between\n     * a swipe and a pan gesture.\n     * @type {number}\n     */\n    this.escapeVelocity = (options && options.escapeVelocity) ?\n      options.escapeVelocity : DEFAULT_ESCAPE_VELOCITY;\n\n    /**\n     * (EXPERIMENTAL) A value of time in milliseconds to distort between events.\n     * Browsers do not accurately measure time with the Date constructor in\n     * milliseconds, so consecutive events sometimes display the same timestamp\n     * but different x/y coordinates. This will distort a previous time\n     * in such cases by the timeDistortion's value.\n     * @type {number}\n     */\n    this.timeDistortion = (options && options.timeDistortion) ?\n      options.timeDistortion : DEFAULT_TIME_DISTORTION;\n\n    /**\n     * (EXPERIMENTAL) The maximum amount of move events to keep track of for a\n     * swipe. This helps give a more accurate estimate of the user's velocity.\n     * @type {number}\n     */\n    this.maxProgressStack = (options && options.maxProgressStack) ?\n      options.maxProgressStack : DEFAULT_MAX_PROGRESS_STACK;\n  }\n\n  /**\n   * Event hook for the move of a gesture. Captures an input's x/y coordinates\n   * and the time of it's event on a stack.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - Swipe does not emit from a move.\n   */\n  move(inputs, state, element) {\n    if (this.numInputs === inputs.length) {\n      for (let i = 0; i < inputs.length; i++) {\n        let progress = inputs[i].getGestureProgress(this.getId());\n        if (!progress.moves) {\n          progress.moves = [];\n        }\n\n        progress.moves.push({\n          time: new Date().getTime(),\n          x: inputs[i].current.x,\n          y: inputs[i].current.y,\n        });\n\n        if (progress.length > this.maxProgressStack) {\n          progress.moves.shift();\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /* move*/\n\n  /**\n   * Determines if the input's history validates a swipe motion.\n   * Determines if it did not come to a complete stop (maxRestTime), and if it\n   * had enough of a velocity to be considered (ESCAPE_VELOCITY).\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null|Object} - null if the gesture is not to be emitted,\n   *  Object with information otherwise.\n   */\n  end(inputs) {\n    if (this.numInputs === inputs.length) {\n      let output = {\n        data: [],\n      };\n\n      for (var i = 0; i < inputs.length; i++) {\n        // Determine if all input events are on the 'end' event.\n        if (inputs[i].current.type !== 'end') {\n          return;\n        }\n\n        let progress = inputs[i].getGestureProgress(this.getId());\n        if (progress.moves && progress.moves.length > 2) {\n          // CHECK : Return if the input has not moved in maxRestTime ms.\n\n          let currentMove = progress.moves.pop();\n          if ((new Date().getTime()) - currentMove.time > this.maxRestTime) {\n            return null;\n          }\n\n          let lastMove;\n          let index = progress.moves.length - 1;\n\n          /* Date is unreliable, so we retrieve the last move event where\n           the time is not the same. */\n          while (index !== -1) {\n            if (progress.moves[index].time !== currentMove.time) {\n              lastMove = progress.moves[index];\n              break;\n            }\n\n            index--;\n          }\n\n          /* If the date is REALLY unreliable, we apply a time distortion\n           to the last event.\n           */\n          if (!lastMove) {\n            lastMove = progress.moves.pop();\n            lastMove.time += this.timeDistortion;\n          }\n\n          var velocity = util.getVelocity(lastMove.x, lastMove.y, lastMove.time,\n            currentMove.x, currentMove.y, currentMove.time);\n\n          output.data[i] = {\n            velocity: velocity,\n            distance: util.distanceBetweenTwoPoints(lastMove.x, currentMove.x, lastMove.y, currentMove.y),\n            duration:  currentMove.time - lastMove.time,\n            currentDirection: util.getAngle(\n              lastMove.x,\n              lastMove.y,\n              currentMove.x,\n              currentMove.y),\n          };\n        }\n      }\n\n      for (var i = 0; i < output.data.length; i++) {\n        if (velocity < this.escapeVelocity) {\n          return null;\n        }\n      }\n\n      if (output.data.length > 0) {\n        return output;\n      }\n    }\n\n    return null;\n  }\n\n  /* end*/\n}\n\nexport default Swipe;\n","/**\n * @file Tap.js\n * Contains the Tap class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_MIN_DELAY_MS = 0;\nconst DEFAULT_MAX_DELAY_MS = 300;\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MOVE_PX_TOLERANCE = 10;\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n * @class Tap\n */\nclass Tap extends Gesture {\n  /**\n   * Constructor function for the Tap class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.minDelay=0] - The minimum delay between a\n   * touchstart and touchend can be configured in milliseconds.\n   * @param {Number} [options.maxDelay=300] - The maximum delay between a\n   * touchstart and touchend can be configured in milliseconds.\n   * @param {Number} [options.numInputs=1] - Number of inputs for Tap gesture.\n   * @param {Number} [options.tolerance=10] - The tolerance in pixels\n   *  a user can move.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'tap';\n\n    /**\n     * The minimum amount between a touchstart and a touchend can be configured\n     * in milliseconds. The minimum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     * @type {Number}\n     */\n    this.minDelay = (options && options.minDelay) ?\n      options.minDelay : DEFAULT_MIN_DELAY_MS;\n\n    /**\n     * The maximum delay between a touchstart and touchend can be configured in\n     * milliseconds. The maximum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     * @type {Number}\n     */\n    this.maxDelay = (options && options.maxDelay) ?\n      options.maxDelay : DEFAULT_MAX_DELAY_MS;\n\n    /**\n     * The number of inputs to trigger a Tap can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Tap gesture to be triggered more easily.\n     * @type {number}\n     */\n    this.tolerance = (options && options.tolerance) ?\n      options.tolerance : DEFAULT_MOVE_PX_TOLERANCE;\n  }\n\n  /* constructor*/\n\n  /**\n   * Event hook for the start of a gesture. Keeps track of when the inputs\n   * trigger the start event.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @return {null} - Tap does not trigger on a start event.\n   */\n  start(inputs) {\n    if (inputs.length === this.numInputs) {\n      inputs.forEach((input) => {\n        let progress = input.getGestureProgress(this.type);\n        progress.start = new Date().getTime();\n      });\n    }\n\n    return null;\n  }\n\n  /* start*/\n\n  /**\n   * Event hook for the move of a gesture. The Tap event reaches here if the\n   * user starts to move their input before an 'end' event is reached.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - Tap does not trigger on a move event.\n   */\n  move(inputs, state, element) {\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() === 'move') {\n        let current = inputs[i].current;\n        let previous = inputs[i].previous;\n        if (!util.isWithin(\n            current.x,\n            current.y,\n            previous.x,\n            previous.y,\n            this.tolerance)) {\n          let type = this.type;\n          inputs.forEach(function(input) {\n            input.resetProgress(type);\n          });\n\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /* move*/\n\n  /**\n   * Event hook for the end of a gesture.\n   * Determines if this the tap event can be fired if the delay and tolerance\n   * constraints are met. Also waits for all of the inputs to be off the screen\n   * before determining if the gesture is triggered.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @return {null|Object} - null if the gesture is not to be emitted,\n   * Object with information otherwise. Returns the interval time between start\n   * and end events.\n   */\n  end(inputs) {\n    if (inputs.length !== this.numInputs) {\n      return null;\n    }\n\n    let startTime = Number.MAX_VALUE;\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() !== 'end') {\n        return null;\n      }\n\n      let progress = inputs[i].getGestureProgress(this.type);\n      if (!progress.start) {\n        return null;\n      }\n\n      // Find the most recent input's startTime\n      if (progress.start < startTime) {\n        startTime = progress.start;\n      }\n    }\n\n    let interval = new Date().getTime() - startTime;\n    if ((this.minDelay <= interval) && (this.maxDelay >= interval)) {\n      return {\n        interval: interval,\n      };\n    } else {\n      let type = this.type;\n      inputs.forEach(function(input) {\n        input.resetProgress(type);\n      });\n\n      return null;\n    }\n  }\n\n  /* end*/\n}\n\nexport default Tap;\n","/**\n * @file Binding.js\n */\n\n/**\n * Responsible for creating a binding between an element and a gesture.\n * @class Binding\n */\nclass Binding {\n  /**\n   * Constructor function for the Binding class.\n   * @param {Element} element - The element to associate the gesture to.\n   * @param {Gesture} gesture - A instance of the Gesture type.\n   * @param {Function} handler - The function handler to execute when a\n   * gesture is recognized\n   * on the associated element.\n   * @param {Boolean} [capture=false] - A boolean signifying if the event is\n   * to be emitted during\n   * the capture or bubble phase.\n   * @param {Boolean} [bindOnce=false] - A boolean flag\n   * used for the bindOnce syntax.\n   */\n  constructor(element, gesture, handler, capture, bindOnce) {\n    /**\n     * The element to associate the gesture to.\n     * @type {Element}\n     */\n    this.element = element;\n    /**\n     * A instance of the Gesture type.\n     * @type {Gesture}\n     */\n    this.gesture = gesture;\n    /**\n     * The function handler to execute when a gesture is\n     * recognized on the associated element.\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * A boolean signifying if the event is to be\n     * emitted during the capture or bubble phase.\n     * @type {Boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * A boolean flag used for the bindOnce syntax.\n     * @type {Boolean}\n     */\n    this.bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n  }\n\n}\n\nexport default Binding;\n","/**\n * @file ZingEvent.js\n * Contains logic for ZingEvents\n */\n\nimport util from '../util.js';\n\nconst INITIAL_COORDINATE = 0;\n/**\n * An event wrapper that normalizes events across browsers and input devices\n * @class ZingEvent\n */\nclass ZingEvent {\n  /**\n   * @constructor\n   * @param {Event} event - The event object being wrapped.\n   * @param {Array} event.touches - The number of touches on\n   *  a screen (mobile only).\n   * @param {Object} event.changedTouches - The TouchList representing\n   * points that participated in the event.\n   * @param {Number} touchIdentifier - The index of touch if applicable\n   */\n  constructor(event, touchIdentifier) {\n    /**\n     * The original event object.\n     * @type {Event}\n     */\n    this.originalEvent = event;\n\n    /**\n     * The type of event or null if it is an event not predetermined.\n     * @see util.normalizeEvent\n     * @type {String | null}\n     */\n    this.type = util.normalizeEvent[ event.type ];\n\n    /**\n     * The X coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.x = INITIAL_COORDINATE;\n\n    /**\n     * The Y coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.y = INITIAL_COORDINATE;\n\n    let eventObj;\n    if (event.touches && event.changedTouches) {\n      eventObj = Array.from(event.changedTouches).find( t => {\n        return t.identifier === touchIdentifier;\n      });\n    } else {\n      eventObj = event;\n    }\n\n    this.x = this.clientX = eventObj.clientX;\n    this.y = this.clientY = eventObj.clientY;\n\n    this.pageX = eventObj.pageX;\n    this.pageY = eventObj.pageY;\n\n    this.screenX = eventObj.screenX;\n    this.screenY = eventObj.screenY;\n  }\n}\n\nexport default ZingEvent;\n","/**\n * @file Input.js\n */\n\nimport ZingEvent from './ZingEvent.js';\n\n/**\n * Tracks a single input and contains information about the\n * current, previous, and initial events.\n * Contains the progress of each Input and it's associated gestures.\n * @class Input\n */\nclass Input {\n\n  /**\n   * Constructor function for the Input class.\n   * @param {Event} event - The Event object from the window\n   * @param {Number} [identifier=0] - The identifier for each input event\n   * (taken from event.changedTouches)\n   */\n  constructor(event, identifier) {\n    let currentEvent = new ZingEvent(event, identifier);\n\n    /**\n     * Holds the initial event object. A touchstart/mousedown event.\n     * @type {ZingEvent}\n     */\n    this.initial = currentEvent;\n\n    /**\n     * Holds the most current event for this Input, disregarding any other past,\n     * current, and future events that other Inputs participate in.\n     * e.g. This event ended in an 'end' event, but another Input is still\n     * participating in events -- this will not be updated in such cases.\n     * @type {ZingEvent}\n     */\n    this.current = currentEvent;\n\n    /**\n     * Holds the previous event that took place.\n     * @type {ZingEvent}\n     */\n    this.previous = currentEvent;\n\n    /**\n     * Refers to the event.touches index, or 0 if a simple mouse event occurred.\n     * @type {Number}\n     */\n    this.identifier = (typeof identifier !== 'undefined') ? identifier : 0;\n\n    /**\n     * Stores internal state between events for\n     * each gesture based off of the gesture's id.\n     * @type {Object}\n     */\n    this.progress = {};\n  }\n\n  /**\n   * Receives an input, updates the internal state of what the input has done.\n   * @param {Event} event - The event object to wrap with a ZingEvent.\n   * @param {Number} touchIdentifier - The index of inputs, from event.touches\n   */\n  update(event, touchIdentifier) {\n    this.previous = this.current;\n    this.current = new ZingEvent(event, touchIdentifier);\n  }\n\n  /**\n   * Returns the progress of the specified gesture.\n   * @param {String} id - The identifier for each unique Gesture's progress.\n   * @return {Object} - The progress of the gesture.\n   * Creates an empty object if no progress has begun.\n   */\n  getGestureProgress(id) {\n    if (!this.progress[id]) {\n      this.progress[id] = {};\n    }\n    return this.progress[id];\n  }\n\n  /**\n   * Returns the normalized current Event's type.\n   * @return {String} The current event's type ( start | move | end )\n   */\n  getCurrentEventType() {\n    return this.current.type;\n  }\n\n  /**\n   * Resets a progress/state object of the specified gesture.\n   * @param {String} id - The identifier of the specified gesture\n   */\n  resetProgress(id) {\n    this.progress[id] = {};\n  }\n\n}\n\nexport default Input;\n","/**\n * @file State.js\n */\n\nimport Gesture from './../../gestures/Gesture.js';\nimport Pan from './../../gestures/Pan.js';\nimport Distance from './../../gestures/Distance.js';\nimport Rotate from './../../gestures/Rotate.js';\nimport Swipe from './../../gestures/Swipe.js';\nimport Tap from './../../gestures/Tap.js';\nimport Binding from './Binding.js';\nimport Input from './Input.js';\nimport util from './../util.js';\n\nconst DEFAULT_MOUSE_ID = 0;\n\n/**\n * Creates an object related to a Region's state,\n * and contains helper methods to update and clean up different states.\n */\nclass State {\n\n  /**\n   * Constructor for the State class.\n   * @param {String} regionId - The id the region this state is bound to.\n   */\n  constructor(regionId) {\n    /**\n     * The id for the region this state is bound to.\n     * @type {String}\n     */\n    this.regionId = regionId;\n\n    /**\n     * An array of current and recently inactive\n     *  Input objects related to a gesture.\n     * @type {Input}\n     */\n    this.inputs = [];\n\n    /**\n     * An array of Binding objects; The list of relations between elements,\n     *   their gestures, and the handlers.\n     * @type {Binding}\n     */\n    this.bindings = [];\n\n    /**\n     * The number of gestures that have been registered with this state\n     * @type {Number}\n     */\n    this.numGestures = 0;\n\n    /**\n     * A key/value map all the registered gestures for the listener.\n     *  Note: Can only have one gesture registered to one key.\n     * @type {Object}\n     */\n    this.registeredGestures = {};\n\n    this.registerGesture(new Pan(), 'pan');\n    this.registerGesture(new Rotate(), 'rotate');\n    this.registerGesture(new Distance(), 'distance');\n    this.registerGesture(new Swipe(), 'swipe');\n    this.registerGesture(new Tap(), 'tap');\n  }\n\n  /**\n   * Creates a new binding with the given element and gesture object.\n   * If the gesture object provided is unregistered, it's reference\n   * will be saved in as a binding to be later referenced.\n   * @param  {Element} element - The element the gesture is bound to.\n   * @param {String|Object} gesture  - Either a name of a registered gesture,\n   *  or an unregistered  Gesture object.\n   * @param {Function} handler - The function handler to be called\n   *  when the event is emitted. Used to bind/unbind.\n   * @param {Boolean} capture - Whether the gesture is to be\n   *  detected in the capture of bubble phase. Used to bind/unbind.\n   * @param {Boolean} bindOnce - Option to bind once and\n   *  only emit the event once.\n   */\n  addBinding(element, gesture, handler, capture, bindOnce) {\n    let boundGesture;\n\n    // Error type checking.\n    if (element && typeof element.tagName === 'undefined') {\n      throw new Error('Parameter element is an invalid object.');\n    }\n\n    if (typeof handler !== 'function') {\n      throw new Error('Parameter handler is invalid.');\n    }\n\n    if (typeof gesture === 'string' &&\n      Object.keys(this.registeredGestures).indexOf(gesture) === -1) {\n      throw new Error('Parameter ' + gesture + ' is not a registered gesture');\n    } else if (typeof gesture === 'object' && !(gesture instanceof Gesture)) {\n      throw new Error('Parameter for the gesture is not of a Gesture type');\n    }\n\n    if (typeof gesture === 'string') {\n      boundGesture = this.registeredGestures[gesture];\n    } else {\n      boundGesture = gesture;\n      if (boundGesture.id === '') {\n        this.assignGestureId(boundGesture);\n      }\n    }\n\n    this.bindings.push(new Binding(element, boundGesture,\n      handler, capture, bindOnce));\n    element.addEventListener(boundGesture.getId(), handler, capture);\n  }\n\n  /**\n   * Retrieves the Binding by which an element is associated to.\n   * @param {Element} element - The element to find bindings to.\n   * @return {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByElement(element) {\n    return this.bindings.filter( b => b.element === element );\n  }\n\n  /**\n   * Retrieves all bindings based upon the initial X/Y position of the inputs.\n   * e.g. if gesture started on the correct target element,\n   *  but diverted away into the correct region, this would still be valid.\n   * @return {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByInitialPos() {\n    return this.bindings.filter( binding => {\n      return this.inputs.some( input => {\n        return util.isInside(input.initial.x, input.initial.y, binding.element);\n      });\n    });\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   * @param {Event} event - The event being captured.\n   * @param {Element} regionElement - The element where\n   *  this current Region is bound to.\n   * @return {boolean} - returns true for a successful update,\n   *  false if the event is invalid.\n   */\n  updateInputs(event, regionElement) {\n    let eventType = (event.touches) ?\n      'TouchEvent' : ((event.pointerType) ? 'PointerEvent' : 'MouseEvent');\n    switch (eventType) {\n      case 'TouchEvent':\n        Array.from(event.changedTouches).forEach( touch => {\n          update(event, this, touch.identifier, regionElement);\n        });\n        break;\n\n      case 'PointerEvent':\n        update(event, this, event.pointerId, regionElement);\n        break;\n\n      case 'MouseEvent':\n      default:\n        update(event, this, DEFAULT_MOUSE_ID, regionElement);\n        break;\n    }\n    return true;\n\n    function update(event, state, identifier, regionElement) {\n      const eventType = util.normalizeEvent[ event.type ];\n      const input = findInputById(state.inputs, identifier);\n\n      // A starting input was not cleaned up properly and still exists.\n      if (eventType === 'start' && input) {\n        state.resetInputs();\n        return;\n      }\n\n      // An input has moved outside the region.\n      if (eventType !== 'start' &&\n        input &&\n        !util.isInside(input.current.x, input.current.y, regionElement)) {\n         state.resetInputs();\n        return;\n      }\n\n      if (eventType !== 'start' && !input) {\n        state.resetInputs();\n        return;\n      }\n\n      if (eventType === 'start') {\n        state.inputs.push(new Input(event, identifier));\n      } else {\n        input.update(event, identifier);\n      }\n    }\n  }\n\n  /**\n   * Removes all inputs from the state, allowing for a new gesture.\n   */\n  resetInputs() {\n    this.inputs = [];\n  }\n\n  /**\n   * Counts the number of active inputs at any given time.\n   * @return {Number} - The number of active inputs.\n   */\n  numActiveInputs() {\n    const endType = this.inputs.filter((input) => {\n      return input.current.type !== 'end';\n    });\n    return endType.length;\n  }\n\n  /**\n   * Register the gesture to the current region.\n   * @param {Object} gesture - The gesture to register\n   * @param {String} key - The key to define the new gesture as.\n   */\n  registerGesture(gesture, key) {\n    this.assignGestureId(gesture);\n    this.registeredGestures[key] = gesture;\n  }\n\n  /**\n   * Tracks the gesture to this state object to become uniquely identifiable.\n   * Useful for nested Regions.\n   * @param {Gesture} gesture - The gesture to track\n   */\n  assignGestureId(gesture) {\n    gesture.setId(this.regionId + '-' + this.numGestures++);\n  }\n\n}\n/**\n * Searches through each input, comparing the browser's identifier key\n *  for touches, to the stored one in each input\n * @param {Array} inputs - The array of inputs in state.\n * @param {String} identifier - The identifier the browser has assigned.\n * @return {Input} - The input object with the corresponding identifier,\n *  null if it did not find any.\n */\nfunction findInputById(inputs, identifier) {\n  return inputs.find( i => i.identifier === identifier );\n}\n\nexport default State;\n","/**\n * @file Region.js\n */\n\nimport Binder from './Binder.js';\nimport Gesture from './../../gestures/Gesture.js';\nimport arbiter from './../arbiter.js';\nimport State from './State.js';\n\n/**\n * Allows the user to specify a region to capture all events to feed ZingTouch\n * into. This can be as narrow as the element itself, or as big as the document\n * itself. The more specific an area, the better performant the overall\n * application will perform. Contains API methods to bind/unbind specific\n * elements to corresponding gestures. Also contains the ability to\n * register/unregister new gestures.\n * @class Region\n */\nclass Region {\n\n  /**\n   * Constructor function for the Region class.\n   * @param {Element} element - The element to capture all\n   *  window events in that region to feed into ZingTouch.\n   * @param {boolean} [capture=false] - Whether the region listens for\n   *  captures or bubbles.\n   * @param {boolean} [preventDefault=true] - Whether the default browser\n   *  functionality should be disabled;\n   * @param {Number} id - The id of the region, assigned by the ZingTouch object\n   */\n  constructor(element, capture, preventDefault, id) {\n    /**\n     * The identifier for the Region. This is assigned by the ZingTouch object\n     * and is used to hash gesture id for uniqueness.\n     * @type {Number}\n     */\n    this.id = id;\n\n    /**\n     * The element being bound to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Whether the region listens for captures or bubbles.\n     * @type {boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * Boolean to disable browser functionality such as scrolling and zooming\n     * over the region\n     * @type {boolean}\n     */\n    this.preventDefault = (typeof preventDefault !== 'undefined') ?\n      preventDefault : true;\n\n    /**\n     * The internal state object for a Region.\n     * Keeps track of registered gestures, inputs, and events.\n     * @type {State}\n     */\n    this.state = new State(id);\n\n    let eventNames = [];\n    if (window.PointerEvent && !window.TouchEvent) {\n      eventNames = [\n        'pointerdown',\n        'pointermove',\n        'pointerup',\n      ];\n    } else {\n      eventNames = [\n        'mousedown',\n        'mousemove',\n        'mouseup',\n        'touchstart',\n        'touchmove',\n        'touchend',\n      ];\n    }\n\n    // Bind detected browser events to the region element.\n    eventNames.forEach((name) => {\n      element.addEventListener(name, (e) => {\n        arbiter(e, this);\n      }, this.capture);\n    });\n  }\n\n  /**\n   * Bind an element to a registered/unregistered gesture with\n   * multiple function signatures.\n   * @example\n   * bind(element) - chainable\n   * @example\n   * bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} [gesture] - Gesture key, or a Gesture object.\n   * @param {Function} [handler] - The function to execute when an event is\n   *  emitted.\n   * @param {Boolean} [capture] - capture/bubble\n   * @param {Boolean} [bindOnce = false] - Option to bind once and\n   *  only emit the event once.\n   * @return {Object} - a chainable object that has the same function as bind.\n   */\n  bind(element, gesture, handler, capture, bindOnce) {\n    if (!element || (element && !element.tagName)) {\n      throw 'Bind must contain an element';\n    }\n\n    bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n    if (!gesture) {\n      return new Binder(element, bindOnce, this.state);\n    } else {\n      this.state.addBinding(element, gesture, handler, capture, bindOnce);\n    }\n  }\n\n  /**\n   * Bind an element and sets up actions to remove the binding once\n   * it has been emitted for the first time.\n   * 1. bind(element) - chainable\n   * 2. bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} gesture - Gesture key, or a Gesture object.\n   * @param {Function} handler - The function to execute when an\n   *  event is emitted.\n   * @param {Boolean} capture - capture/bubble\n   * @return {Object} - a chainable object that has the same function as bind.\n   */\n  bindOnce(element, gesture, handler, capture) {\n    this.bind(element, gesture, handler, capture, true);\n  }\n\n  /**\n   * Unbinds an element from either the specified gesture\n   *  or all if no element is specified.\n   * @param {Element} element -The element to remove.\n   * @param {String | Object} [gesture] - A String representing the gesture,\n   *   or the actual object being used.\n   * @return {Array} - An array of Bindings that were unbound to the element;\n   */\n  unbind(element, gesture) {\n    let bindings = this.state.retrieveBindingsByElement(element);\n    let unbound = [];\n\n    bindings.forEach((binding) => {\n      if (gesture) {\n        if (typeof gesture === 'string' &&\n          this.state.registeredGestures[gesture]) {\n          let registeredGesture = this.state.registeredGestures[gesture];\n          if (registeredGesture.id === binding.gesture.id) {\n            element.removeEventListener(\n              binding.gesture.getId(),\n              binding.handler, binding.capture);\n            unbound.push(binding);\n          }\n        }\n      } else {\n        element.removeEventListener(\n          binding.gesture.getId(),\n          binding.handler,\n          binding.capture);\n        unbound.push(binding);\n      }\n    });\n\n    return unbound;\n  }\n\n  /* unbind*/\n\n  /**\n   * Registers a new gesture with an assigned key\n   * @param {String} key - The key used to register an element to that gesture\n   * @param {Gesture} gesture - A gesture object\n   */\n  register(key, gesture) {\n    if (typeof key !== 'string') {\n      throw new Error('Parameter key is an invalid string');\n    }\n\n    if (!gesture instanceof Gesture) {\n      throw new Error('Parameter gesture is an invalid Gesture object');\n    }\n\n    gesture.setType(key);\n    this.state.registerGesture(gesture, key);\n  }\n\n  /* register*/\n\n  /**\n   * Un-registers a gesture from the Region's state such that\n   * it is no longer emittable.\n   * Unbinds all events that were registered with the type.\n   * @param {String|Object} key - Gesture key that was used to\n   *  register the object\n   * @return {Object} - The Gesture object that was unregistered\n   *  or null if it could not be found.\n   */\n  unregister(key) {\n    this.state.bindings.forEach((binding) => {\n      if (binding.gesture.getType() === key) {\n        binding.element.removeEventListener(binding.gesture.getId(),\n          binding.handler, binding.capture);\n      }\n    });\n\n    let registeredGesture = this.state.registeredGestures[key];\n    delete this.state.registeredGestures[key];\n    return registeredGesture;\n  }\n}\n\nexport default Region;\n","/**\n * @file ZingTouch.js\n * Main object containing API methods and Gesture constructors\n */\n\nimport Region from './core/classes/Region.js';\nimport Gesture from './gestures/Gesture.js';\nimport Pan from './gestures/Pan.js';\nimport Distance from './gestures/Distance.js';\nimport Rotate from './gestures/Rotate.js';\nimport Swipe from './gestures/Swipe.js';\nimport Tap from './gestures/Tap.js';\n\n/**\n * The global API interface for ZingTouch. Contains a constructor for the\n * Region Object, and constructors for each predefined Gesture.\n * @type {Object}\n * @namespace ZingTouch\n */\nlet ZingTouch = {\n  _regions: [],\n\n  // Constructors\n  Gesture,\n  Pan,\n  Distance,\n  Rotate,\n  Swipe,\n  Tap,\n  Region: function(element, capture, preventDefault) {\n    let id = ZingTouch._regions.length;\n    let region = new Region(element, capture, preventDefault, id);\n    ZingTouch._regions.push(region);\n    return region;\n  },\n};\n\nexport default ZingTouch;\n","/**\n * @file main.js\n * Main file to setup event listeners on the document,\n * and to expose the ZingTouch object\n */\n\nimport ZingTouch from './../ZingTouch.js';\nwindow.ZingTouch = ZingTouch;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ZingTouch.js","webpack:///./src/core/arbiter.js","webpack:///./src/core/classes/Binder.js","webpack:///./src/core/classes/Binding.js","webpack:///./src/core/classes/Input.js","webpack:///./src/core/classes/Region.js","webpack:///./src/core/classes/State.js","webpack:///./src/core/classes/ZingEvent.js","webpack:///./src/core/dispatcher.js","webpack:///./src/core/interpreter.js","webpack:///./src/core/main.js","webpack:///./src/core/util.js","webpack:///./src/gestures/Distance.js","webpack:///./src/gestures/Gesture.js","webpack:///./src/gestures/Pan.js","webpack:///./src/gestures/Rotate.js","webpack:///./src/gestures/Swipe.js","webpack:///./src/gestures/Tap.js"],"names":["ZingTouch","_regions","Gesture","Pan","Distance","Rotate","Swipe","Tap","Region","element","capture","preventDefault","id","length","region","push","arbiter","event","state","eventType","normalizeEvent","type","inputs","buttons","resetInputs","updateInputs","bindings","retrieveBindingsByInitialPos","util","setMSPreventDefault","removeMSPreventDefault","toBeDispatched","gestures","path","getPropagationPath","forEach","gesture","binding","getId","getPathIndex","Object","keys","index","dispatcher","data","events","endCount","input","getCurrentEventType","Binder","bindOnce","registeredGestures","key","handler","addBinding","Binding","Input","identifier","currentEvent","initial","current","previous","progress","touchIdentifier","eventNames","window","PointerEvent","TouchEvent","name","addEventListener","e","tagName","bind","retrieveBindingsByElement","unbound","registeredGesture","removeEventListener","Error","setType","registerGesture","getType","DEFAULT_MOUSE_ID","State","regionId","numGestures","boundGesture","indexOf","assignGestureId","filter","b","some","isInside","x","y","regionElement","touches","pointerType","Array","from","changedTouches","touch","update","pointerId","findInputById","endType","setId","find","i","INITIAL_COORDINATE","ZingEvent","originalEvent","eventObj","t","clientX","clientY","pageX","pageY","screenX","screenY","newEvent","CustomEvent","detail","bubbles","cancelable","emitEvent","target","dispatchEvent","unbind","interpreter","evType","map","candidates","reduce","accumulator","CIRCLE_DEGREES","HALF_CIRCLE_DEGREES","freeze","mousedown","touchstart","pointerdown","mousemove","touchmove","pointermove","mouseup","touchend","pointerup","isWithin","currentX","currentY","previousX","previousY","tolerance","Math","abs","distanceBetweenTwoPoints","x0","x1","y0","y1","dist","sqrt","round","getMidpoint","getAngle","originX","originY","projectionX","projectionY","angle","atan2","PI","getAngularDistance","start","end","sign","getVelocity","startX","startY","startTime","endX","endY","endTime","distance","getRightMostInput","rightMost","Number","MIN_VALUE","isInteger","value","rect","getBoundingClientRect","left","width","top","height","node","document","parentNode","obj","style","returnValue","DEFAULT_INPUTS","DEFAULT_MIN_THRESHOLD","options","threshold","isValid","getGestureProgress","lastEmittedDistance","numActiveInputs","currentDistance","centerPoint","change","center","object","every","numInputs","active","lastEmitted","output","distanceFromLastEmit","reachedThreshold","packData","distanceFromOrigin","directionFromOrigin","currentDirection","currentPivot","initialPivot","bRect","currentAngle","initialAngle","previousAngle","distanceFromLast","DEFAULT_MAX_REST_TIME","DEFAULT_ESCAPE_VELOCITY","DEFAULT_TIME_DISTORTION","DEFAULT_MAX_PROGRESS_STACK","maxRestTime","escapeVelocity","timeDistortion","maxProgressStack","moves","time","Date","getTime","shift","currentMove","pop","lastMove","velocity","duration","DEFAULT_MIN_DELAY_MS","DEFAULT_MAX_DELAY_MS","DEFAULT_MOVE_PX_TOLERANCE","minDelay","maxDelay","resetProgress","MAX_VALUE","interval"],"mappings":"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","file":"zingtouch.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/core/main.js\");\n","/**\n * @file ZingTouch.js\n * Main object containing API methods and Gesture constructors\n */\n\nimport Region from './core/classes/Region.js';\nimport Gesture from './gestures/Gesture.js';\nimport Pan from './gestures/Pan.js';\nimport Distance from './gestures/Distance.js';\nimport Rotate from './gestures/Rotate.js';\nimport Swipe from './gestures/Swipe.js';\nimport Tap from './gestures/Tap.js';\n\n/**\n * The global API interface for ZingTouch. Contains a constructor for the\n * Region Object, and constructors for each predefined Gesture.\n * @type {Object}\n * @namespace ZingTouch\n */\nlet ZingTouch = {\n  _regions: [],\n\n  // Constructors\n  Gesture,\n  Pan,\n  Distance,\n  Rotate,\n  Swipe,\n  Tap,\n  Region: function(element, capture, preventDefault) {\n    let id = ZingTouch._regions.length;\n    let region = new Region(element, capture, preventDefault, id);\n    ZingTouch._regions.push(region);\n    return region;\n  },\n};\n\nexport default ZingTouch;\n","/**\n * @file arbiter.js\n * Contains logic for the dispatcher\n */\n\nimport dispatcher from './dispatcher.js';\nimport interpreter from './interpreter.js';\nimport util from './util.js';\n\n/**\n * Function that handles event flow, negotiating with the interpreter,\n * and dispatcher.\n * 1. Receiving all touch events in the window.\n * 2. Determining which gestures are linked to the target element.\n * 3. Negotiating with the Interpreter what event should occur.\n * 4. Sending events to the dispatcher to emit events to the target.\n * @param {Event} event - The event emitted from the window object.\n * @param {Object} region - The region object of the current listener.\n */\nfunction arbiter(event, region) {\n  const state = region.state;\n  const eventType = util.normalizeEvent[ event.type ];\n\n  /*\n   Return if a gesture is not in progress and won't be. Also catches the case\n   where a previous event is in a partial state (2 finger pan, waits for both\n   inputs to reach touchend)\n   */\n  if (state.inputs.length === 0 && eventType !== 'start') {\n    return;\n  }\n\n  /*\n   Check for 'stale' or events that lost focus\n   (e.g. a pan goes off screen/off region.)\n   Does not affect mobile devices.\n   */\n  if (typeof event.buttons !== 'undefined' &&\n    eventType !== 'end' &&\n    event.buttons === 0) {\n    state.resetInputs();\n    return;\n  }\n\n  // Update the state with the new events. If the event is stopped, return;\n  if (!state.updateInputs(event, region.element)) {\n    return;\n  }\n\n  // Retrieve the initial target from any one of the inputs\n  const bindings = state.retrieveBindingsByInitialPos();\n  if (bindings.length > 0) {\n    if (region.preventDefault) {\n      util.setMSPreventDefault(region.element);\n      util.preventDefault(event);\n    } else {\n      util.removeMSPreventDefault(region.element);\n    }\n\n    const toBeDispatched = {};\n    const gestures = interpreter(bindings, event, state);\n\n    /* Determine the deepest path index to emit the event\n     from, to avoid duplicate events being fired. */\n\n    const path = util.getPropagationPath(event);\n    gestures.forEach((gesture) => {\n      const id = gesture.binding.gesture.getId();\n      if (toBeDispatched[id]) {\n        if (util.getPathIndex(path, gesture.binding.element) <\n          util.getPathIndex(path, toBeDispatched[id].binding.element)) {\n          toBeDispatched[id] = gesture;\n        }\n      } else {\n        toBeDispatched[id] = gesture;\n      }\n    });\n\n    Object.keys(toBeDispatched).forEach((index) => {\n      const gesture = toBeDispatched[index];\n      dispatcher(gesture.binding, gesture.data, gesture.events);\n    });\n  }\n\n  let endCount = 0;\n  state.inputs.forEach((input) => {\n    if (input.getCurrentEventType() === 'end') {\n      endCount++;\n    }\n  });\n\n  if (endCount === state.inputs.length) {\n    state.resetInputs();\n  }\n}\n\nexport default arbiter;\n","/**\n * @file Binder.js\n */\n\n/**\n * A chainable object that contains a single element to be bound upon.\n * Called from ZingTouch.bind(), and is used to chain over gesture callbacks.\n * @class\n */\nclass Binder {\n  /**\n   * Constructor function for the Binder class.\n   * @param {Element} element - The element to bind gestures to.\n   * @param {Boolean} bindOnce - Option to bind once and only emit\n   * the event once.\n   * @param {Object} state - The state of the Region that is being bound to.\n   * @return {Object} - Returns 'this' to be chained over and over again.\n   */\n  constructor(element, bindOnce, state) {\n    /**\n     * The element to bind gestures to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    Object.keys(state.registeredGestures).forEach((key) => {\n      this[key] = (handler, capture) => {\n        state.addBinding(this.element, key, handler, capture, bindOnce);\n        return this;\n      };\n    });\n  }\n\n}\n\nexport default Binder;\n","/**\n * @file Binding.js\n */\n\n/**\n * Responsible for creating a binding between an element and a gesture.\n * @class Binding\n */\nclass Binding {\n  /**\n   * Constructor function for the Binding class.\n   * @param {Element} element - The element to associate the gesture to.\n   * @param {Gesture} gesture - A instance of the Gesture type.\n   * @param {Function} handler - The function handler to execute when a\n   * gesture is recognized\n   * on the associated element.\n   * @param {Boolean} [capture=false] - A boolean signifying if the event is\n   * to be emitted during\n   * the capture or bubble phase.\n   * @param {Boolean} [bindOnce=false] - A boolean flag\n   * used for the bindOnce syntax.\n   */\n  constructor(element, gesture, handler, capture, bindOnce) {\n    /**\n     * The element to associate the gesture to.\n     * @type {Element}\n     */\n    this.element = element;\n    /**\n     * A instance of the Gesture type.\n     * @type {Gesture}\n     */\n    this.gesture = gesture;\n    /**\n     * The function handler to execute when a gesture is\n     * recognized on the associated element.\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * A boolean signifying if the event is to be\n     * emitted during the capture or bubble phase.\n     * @type {Boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * A boolean flag used for the bindOnce syntax.\n     * @type {Boolean}\n     */\n    this.bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n  }\n\n}\n\nexport default Binding;\n","/**\n * @file Input.js\n */\n\nimport ZingEvent from './ZingEvent.js';\n\n/**\n * Tracks a single input and contains information about the\n * current, previous, and initial events.\n * Contains the progress of each Input and it's associated gestures.\n * @class Input\n */\nclass Input {\n\n  /**\n   * Constructor function for the Input class.\n   * @param {Event} event - The Event object from the window\n   * @param {Number} [identifier=0] - The identifier for each input event\n   * (taken from event.changedTouches)\n   */\n  constructor(event, identifier) {\n    let currentEvent = new ZingEvent(event, identifier);\n\n    /**\n     * Holds the initial event object. A touchstart/mousedown event.\n     * @type {ZingEvent}\n     */\n    this.initial = currentEvent;\n\n    /**\n     * Holds the most current event for this Input, disregarding any other past,\n     * current, and future events that other Inputs participate in.\n     * e.g. This event ended in an 'end' event, but another Input is still\n     * participating in events -- this will not be updated in such cases.\n     * @type {ZingEvent}\n     */\n    this.current = currentEvent;\n\n    /**\n     * Holds the previous event that took place.\n     * @type {ZingEvent}\n     */\n    this.previous = currentEvent;\n\n    /**\n     * Refers to the event.touches index, or 0 if a simple mouse event occurred.\n     * @type {Number}\n     */\n    this.identifier = (typeof identifier !== 'undefined') ? identifier : 0;\n\n    /**\n     * Stores internal state between events for\n     * each gesture based off of the gesture's id.\n     * @type {Object}\n     */\n    this.progress = {};\n  }\n\n  /**\n   * Receives an input, updates the internal state of what the input has done.\n   * @param {Event} event - The event object to wrap with a ZingEvent.\n   * @param {Number} touchIdentifier - The index of inputs, from event.touches\n   */\n  update(event, touchIdentifier) {\n    this.previous = this.current;\n    this.current = new ZingEvent(event, touchIdentifier);\n  }\n\n  /**\n   * Returns the progress of the specified gesture.\n   * @param {String} id - The identifier for each unique Gesture's progress.\n   * @return {Object} - The progress of the gesture.\n   * Creates an empty object if no progress has begun.\n   */\n  getGestureProgress(id) {\n    if (!this.progress[id]) {\n      this.progress[id] = {};\n    }\n    return this.progress[id];\n  }\n\n  /**\n   * Returns the normalized current Event's type.\n   * @return {String} The current event's type ( start | move | end )\n   */\n  getCurrentEventType() {\n    return this.current.type;\n  }\n\n  /**\n   * Resets a progress/state object of the specified gesture.\n   * @param {String} id - The identifier of the specified gesture\n   */\n  resetProgress(id) {\n    this.progress[id] = {};\n  }\n\n}\n\nexport default Input;\n","/**\n * @file Region.js\n */\n\nimport Binder from './Binder.js';\nimport Gesture from './../../gestures/Gesture.js';\nimport arbiter from './../arbiter.js';\nimport State from './State.js';\n\n/**\n * Allows the user to specify a region to capture all events to feed ZingTouch\n * into. This can be as narrow as the element itself, or as big as the document\n * itself. The more specific an area, the better performant the overall\n * application will perform. Contains API methods to bind/unbind specific\n * elements to corresponding gestures. Also contains the ability to\n * register/unregister new gestures.\n * @class Region\n */\nclass Region {\n\n  /**\n   * Constructor function for the Region class.\n   * @param {Element} element - The element to capture all\n   *  window events in that region to feed into ZingTouch.\n   * @param {boolean} [capture=false] - Whether the region listens for\n   *  captures or bubbles.\n   * @param {boolean} [preventDefault=true] - Whether the default browser\n   *  functionality should be disabled;\n   * @param {Number} id - The id of the region, assigned by the ZingTouch object\n   */\n  constructor(element, capture, preventDefault, id) {\n    /**\n     * The identifier for the Region. This is assigned by the ZingTouch object\n     * and is used to hash gesture id for uniqueness.\n     * @type {Number}\n     */\n    this.id = id;\n\n    /**\n     * The element being bound to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Whether the region listens for captures or bubbles.\n     * @type {boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * Boolean to disable browser functionality such as scrolling and zooming\n     * over the region\n     * @type {boolean}\n     */\n    this.preventDefault = (typeof preventDefault !== 'undefined') ?\n      preventDefault : true;\n\n    /**\n     * The internal state object for a Region.\n     * Keeps track of registered gestures, inputs, and events.\n     * @type {State}\n     */\n    this.state = new State(id);\n\n    let eventNames = [];\n    if (window.PointerEvent && !window.TouchEvent) {\n      eventNames = [\n        'pointerdown',\n        'pointermove',\n        'pointerup',\n      ];\n    } else {\n      eventNames = [\n        'mousedown',\n        'mousemove',\n        'mouseup',\n        'touchstart',\n        'touchmove',\n        'touchend',\n      ];\n    }\n\n    // Bind detected browser events to the region element.\n    eventNames.forEach((name) => {\n      element.addEventListener(name, (e) => {\n        arbiter(e, this);\n      }, this.capture);\n    });\n  }\n\n  /**\n   * Bind an element to a registered/unregistered gesture with\n   * multiple function signatures.\n   * @example\n   * bind(element) - chainable\n   * @example\n   * bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} [gesture] - Gesture key, or a Gesture object.\n   * @param {Function} [handler] - The function to execute when an event is\n   *  emitted.\n   * @param {Boolean} [capture] - capture/bubble\n   * @param {Boolean} [bindOnce = false] - Option to bind once and\n   *  only emit the event once.\n   * @return {Object} - a chainable object that has the same function as bind.\n   */\n  bind(element, gesture, handler, capture, bindOnce) {\n    if (!element || (element && !element.tagName)) {\n      throw 'Bind must contain an element';\n    }\n\n    bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n    if (!gesture) {\n      return new Binder(element, bindOnce, this.state);\n    } else {\n      this.state.addBinding(element, gesture, handler, capture, bindOnce);\n    }\n  }\n\n  /**\n   * Bind an element and sets up actions to remove the binding once\n   * it has been emitted for the first time.\n   * 1. bind(element) - chainable\n   * 2. bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} gesture - Gesture key, or a Gesture object.\n   * @param {Function} handler - The function to execute when an\n   *  event is emitted.\n   * @param {Boolean} capture - capture/bubble\n   * @return {Object} - a chainable object that has the same function as bind.\n   */\n  bindOnce(element, gesture, handler, capture) {\n    this.bind(element, gesture, handler, capture, true);\n  }\n\n  /**\n   * Unbinds an element from either the specified gesture\n   *  or all if no element is specified.\n   * @param {Element} element -The element to remove.\n   * @param {String | Object} [gesture] - A String representing the gesture,\n   *   or the actual object being used.\n   * @return {Array} - An array of Bindings that were unbound to the element;\n   */\n  unbind(element, gesture) {\n    let bindings = this.state.retrieveBindingsByElement(element);\n    let unbound = [];\n\n    bindings.forEach((binding) => {\n      if (gesture) {\n        if (typeof gesture === 'string' &&\n          this.state.registeredGestures[gesture]) {\n          let registeredGesture = this.state.registeredGestures[gesture];\n          if (registeredGesture.id === binding.gesture.id) {\n            element.removeEventListener(\n              binding.gesture.getId(),\n              binding.handler, binding.capture);\n            unbound.push(binding);\n          }\n        }\n      } else {\n        element.removeEventListener(\n          binding.gesture.getId(),\n          binding.handler,\n          binding.capture);\n        unbound.push(binding);\n      }\n    });\n\n    return unbound;\n  }\n\n  /* unbind*/\n\n  /**\n   * Registers a new gesture with an assigned key\n   * @param {String} key - The key used to register an element to that gesture\n   * @param {Gesture} gesture - A gesture object\n   */\n  register(key, gesture) {\n    if (typeof key !== 'string') {\n      throw new Error('Parameter key is an invalid string');\n    }\n\n    if (!gesture instanceof Gesture) {\n      throw new Error('Parameter gesture is an invalid Gesture object');\n    }\n\n    gesture.setType(key);\n    this.state.registerGesture(gesture, key);\n  }\n\n  /* register*/\n\n  /**\n   * Un-registers a gesture from the Region's state such that\n   * it is no longer emittable.\n   * Unbinds all events that were registered with the type.\n   * @param {String|Object} key - Gesture key that was used to\n   *  register the object\n   * @return {Object} - The Gesture object that was unregistered\n   *  or null if it could not be found.\n   */\n  unregister(key) {\n    this.state.bindings.forEach((binding) => {\n      if (binding.gesture.getType() === key) {\n        binding.element.removeEventListener(binding.gesture.getId(),\n          binding.handler, binding.capture);\n      }\n    });\n\n    let registeredGesture = this.state.registeredGestures[key];\n    delete this.state.registeredGestures[key];\n    return registeredGesture;\n  }\n}\n\nexport default Region;\n","/**\n * @file State.js\n */\n\nimport Gesture from './../../gestures/Gesture.js';\nimport Pan from './../../gestures/Pan.js';\nimport Distance from './../../gestures/Distance.js';\nimport Rotate from './../../gestures/Rotate.js';\nimport Swipe from './../../gestures/Swipe.js';\nimport Tap from './../../gestures/Tap.js';\nimport Binding from './Binding.js';\nimport Input from './Input.js';\nimport util from './../util.js';\n\nconst DEFAULT_MOUSE_ID = 0;\n\n/**\n * Creates an object related to a Region's state,\n * and contains helper methods to update and clean up different states.\n */\nclass State {\n\n  /**\n   * Constructor for the State class.\n   * @param {String} regionId - The id the region this state is bound to.\n   */\n  constructor(regionId) {\n    /**\n     * The id for the region this state is bound to.\n     * @type {String}\n     */\n    this.regionId = regionId;\n\n    /**\n     * An array of current and recently inactive\n     *  Input objects related to a gesture.\n     * @type {Input}\n     */\n    this.inputs = [];\n\n    /**\n     * An array of Binding objects; The list of relations between elements,\n     *   their gestures, and the handlers.\n     * @type {Binding}\n     */\n    this.bindings = [];\n\n    /**\n     * The number of gestures that have been registered with this state\n     * @type {Number}\n     */\n    this.numGestures = 0;\n\n    /**\n     * A key/value map all the registered gestures for the listener.\n     *  Note: Can only have one gesture registered to one key.\n     * @type {Object}\n     */\n    this.registeredGestures = {};\n\n    this.registerGesture(new Pan(), 'pan');\n    this.registerGesture(new Rotate(), 'rotate');\n    this.registerGesture(new Distance(), 'distance');\n    this.registerGesture(new Swipe(), 'swipe');\n    this.registerGesture(new Tap(), 'tap');\n  }\n\n  /**\n   * Creates a new binding with the given element and gesture object.\n   * If the gesture object provided is unregistered, it's reference\n   * will be saved in as a binding to be later referenced.\n   * @param  {Element} element - The element the gesture is bound to.\n   * @param {String|Object} gesture  - Either a name of a registered gesture,\n   *  or an unregistered  Gesture object.\n   * @param {Function} handler - The function handler to be called\n   *  when the event is emitted. Used to bind/unbind.\n   * @param {Boolean} capture - Whether the gesture is to be\n   *  detected in the capture of bubble phase. Used to bind/unbind.\n   * @param {Boolean} bindOnce - Option to bind once and\n   *  only emit the event once.\n   */\n  addBinding(element, gesture, handler, capture, bindOnce) {\n    let boundGesture;\n\n    // Error type checking.\n    if (element && typeof element.tagName === 'undefined') {\n      throw new Error('Parameter element is an invalid object.');\n    }\n\n    if (typeof handler !== 'function') {\n      throw new Error('Parameter handler is invalid.');\n    }\n\n    if (typeof gesture === 'string' &&\n      Object.keys(this.registeredGestures).indexOf(gesture) === -1) {\n      throw new Error('Parameter ' + gesture + ' is not a registered gesture');\n    } else if (typeof gesture === 'object' && !(gesture instanceof Gesture)) {\n      throw new Error('Parameter for the gesture is not of a Gesture type');\n    }\n\n    if (typeof gesture === 'string') {\n      boundGesture = this.registeredGestures[gesture];\n    } else {\n      boundGesture = gesture;\n      if (boundGesture.id === '') {\n        this.assignGestureId(boundGesture);\n      }\n    }\n\n    this.bindings.push(new Binding(element, boundGesture,\n      handler, capture, bindOnce));\n    element.addEventListener(boundGesture.getId(), handler, capture);\n  }\n\n  /**\n   * Retrieves the Binding by which an element is associated to.\n   * @param {Element} element - The element to find bindings to.\n   * @return {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByElement(element) {\n    return this.bindings.filter( b => b.element === element );\n  }\n\n  /**\n   * Retrieves all bindings based upon the initial X/Y position of the inputs.\n   * e.g. if gesture started on the correct target element,\n   *  but diverted away into the correct region, this would still be valid.\n   * @return {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByInitialPos() {\n    return this.bindings.filter( binding => {\n      return this.inputs.some( input => {\n        return util.isInside(input.initial.x, input.initial.y, binding.element);\n      });\n    });\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   * @param {Event} event - The event being captured.\n   * @param {Element} regionElement - The element where\n   *  this current Region is bound to.\n   * @return {boolean} - returns true for a successful update,\n   *  false if the event is invalid.\n   */\n  updateInputs(event, regionElement) {\n    let eventType = (event.touches) ?\n      'TouchEvent' : ((event.pointerType) ? 'PointerEvent' : 'MouseEvent');\n    switch (eventType) {\n      case 'TouchEvent':\n        Array.from(event.changedTouches).forEach( touch => {\n          update(event, this, touch.identifier, regionElement);\n        });\n        break;\n\n      case 'PointerEvent':\n        update(event, this, event.pointerId, regionElement);\n        break;\n\n      case 'MouseEvent':\n      default:\n        update(event, this, DEFAULT_MOUSE_ID, regionElement);\n        break;\n    }\n    return true;\n\n    function update(event, state, identifier, regionElement) {\n      const eventType = util.normalizeEvent[ event.type ];\n      const input = findInputById(state.inputs, identifier);\n\n      // A starting input was not cleaned up properly and still exists.\n      if (eventType === 'start' && input) {\n        state.resetInputs();\n        return;\n      }\n\n      // An input has moved outside the region.\n      if (eventType !== 'start' &&\n        input &&\n        !util.isInside(input.current.x, input.current.y, regionElement)) {\n         state.resetInputs();\n        return;\n      }\n\n      if (eventType !== 'start' && !input) {\n        state.resetInputs();\n        return;\n      }\n\n      if (eventType === 'start') {\n        state.inputs.push(new Input(event, identifier));\n      } else {\n        input.update(event, identifier);\n      }\n    }\n  }\n\n  /**\n   * Removes all inputs from the state, allowing for a new gesture.\n   */\n  resetInputs() {\n    this.inputs = [];\n  }\n\n  /**\n   * Counts the number of active inputs at any given time.\n   * @return {Number} - The number of active inputs.\n   */\n  numActiveInputs() {\n    const endType = this.inputs.filter((input) => {\n      return input.current.type !== 'end';\n    });\n    return endType.length;\n  }\n\n  /**\n   * Register the gesture to the current region.\n   * @param {Object} gesture - The gesture to register\n   * @param {String} key - The key to define the new gesture as.\n   */\n  registerGesture(gesture, key) {\n    this.assignGestureId(gesture);\n    this.registeredGestures[key] = gesture;\n  }\n\n  /**\n   * Tracks the gesture to this state object to become uniquely identifiable.\n   * Useful for nested Regions.\n   * @param {Gesture} gesture - The gesture to track\n   */\n  assignGestureId(gesture) {\n    gesture.setId(this.regionId + '-' + this.numGestures++);\n  }\n\n}\n/**\n * Searches through each input, comparing the browser's identifier key\n *  for touches, to the stored one in each input\n * @param {Array} inputs - The array of inputs in state.\n * @param {String} identifier - The identifier the browser has assigned.\n * @return {Input} - The input object with the corresponding identifier,\n *  null if it did not find any.\n */\nfunction findInputById(inputs, identifier) {\n  return inputs.find( i => i.identifier === identifier );\n}\n\nexport default State;\n","/**\n * @file ZingEvent.js\n * Contains logic for ZingEvents\n */\n\nimport util from '../util.js';\n\nconst INITIAL_COORDINATE = 0;\n/**\n * An event wrapper that normalizes events across browsers and input devices\n * @class ZingEvent\n */\nclass ZingEvent {\n  /**\n   * @constructor\n   * @param {Event} event - The event object being wrapped.\n   * @param {Array} event.touches - The number of touches on\n   *  a screen (mobile only).\n   * @param {Object} event.changedTouches - The TouchList representing\n   * points that participated in the event.\n   * @param {Number} touchIdentifier - The index of touch if applicable\n   */\n  constructor(event, touchIdentifier) {\n    /**\n     * The original event object.\n     * @type {Event}\n     */\n    this.originalEvent = event;\n\n    /**\n     * The type of event or null if it is an event not predetermined.\n     * @see util.normalizeEvent\n     * @type {String | null}\n     */\n    this.type = util.normalizeEvent[ event.type ];\n\n    /**\n     * The X coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.x = INITIAL_COORDINATE;\n\n    /**\n     * The Y coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.y = INITIAL_COORDINATE;\n\n    let eventObj;\n    if (event.touches && event.changedTouches) {\n      eventObj = Array.from(event.changedTouches).find( t => {\n        return t.identifier === touchIdentifier;\n      });\n    } else {\n      eventObj = event;\n    }\n\n    this.x = this.clientX = eventObj.clientX;\n    this.y = this.clientY = eventObj.clientY;\n\n    this.pageX = eventObj.pageX;\n    this.pageY = eventObj.pageY;\n\n    this.screenX = eventObj.screenX;\n    this.screenY = eventObj.screenY;\n  }\n}\n\nexport default ZingEvent;\n","/**\n * @file dispatcher.js\n * Contains logic for the dispatcher\n */\n\n/**\n * Emits data at the target element if available, and bubbles up from\n * the target to the parent until the document has been reached.\n * Called from the arbiter.\n * @param {Binding} binding - An object of type Binding\n * @param {Object} data - The metadata computed by the gesture being emitted.\n * @param {Array} events - An array of ZingEvents\n *  corresponding to the inputs on the screen.\n */\nfunction dispatcher(binding, data, events) {\n  data.events = events;\n\n  const newEvent = new CustomEvent(binding.gesture.getId(), {\n    detail: data,\n    bubbles: true,\n    cancelable: true,\n  });\n  emitEvent(binding.element, newEvent, binding);\n}\n\n/**\n * Emits the new event. Unbinds the event if the event was registered\n * at bindOnce.\n * @param {Element} target - Element object to emit the event to.\n * @param {Event} event - The CustomEvent to emit.\n * @param {Binding} binding - An object of type Binding\n */\nfunction emitEvent(target, event, binding) {\n  target.dispatchEvent(event);\n  if (binding.bindOnce) {\n    ZingTouch.unbind(binding.element, binding.gesture.getType());\n  }\n}\n\nexport default dispatcher;\n","/**\n * @file interpreter.js\n * Contains logic for the interpreter\n */\n\nimport util from './util.js';\n\n/**\n * Receives an event and an array of Bindings (element -> gesture handler)\n * to determine what event will be emitted. Called from the arbiter.\n * @param {Array} bindings - An array containing Binding objects\n * that associate the element to an event handler.\n * @param {Object} event - The event emitted from the window.\n * @param {Object} state - The state object of the current listener.\n * @return {Object | null} - Returns an object containing a binding and\n * metadata, or null if a gesture will not be emitted.\n */\nfunction interpreter(bindings, event, state) {\n  const evType = util.normalizeEvent[ event.type ];\n  const events = state.inputs.map( input => input.current );\n\n  const candidates = bindings.reduce( (accumulator, binding) => {\n    const data = binding.gesture[evType](state.inputs, state, binding.element);\n    if (data) accumulator.push({ binding, data, events });\n    return accumulator;\n  }, []);\n\n  return candidates;\n}\n\nexport default interpreter;\n","/**\n * @file main.js\n * Main file to setup event listeners on the document,\n * and to expose the ZingTouch object\n */\n\nimport ZingTouch from './../ZingTouch.js';\nwindow.ZingTouch = ZingTouch;\n","/**\n * @file util.js\n * Various accessor and mutator functions to handle state and validation.\n */\n\nconst CIRCLE_DEGREES = 360;\nconst HALF_CIRCLE_DEGREES = 180;\n\n/**\n *  Contains generic helper functions\n * @type {Object}\n * @namespace util\n */\nlet util = {\n\n  /**\n   * Normalizes window events to be either of type start, move, or end.\n   * @param {String} type - The event type emitted by the browser\n   * @return {null|String} - The normalized event, or null if it is an\n   * event not predetermined.\n   */\n  normalizeEvent: Object.freeze({\n      mousedown:   'start',\n      touchstart:  'start',\n      pointerdown: 'start',\n\n      mousemove:   'move',\n      touchmove:   'move',\n      pointermove: 'move',\n\n      mouseup:   'end',\n      touchend:  'end',\n      pointerup: 'end',\n  }),\n  /* normalizeEvent*/\n\n  /**\n   * Determines if the current and previous coordinates are within or\n   * up to a certain tolerance.\n   * @param {Number} currentX - Current event's x coordinate\n   * @param {Number} currentY - Current event's y coordinate\n   * @param {Number} previousX - Previous event's x coordinate\n   * @param {Number} previousY - Previous event's y coordinate\n   * @param {Number} tolerance - The tolerance in pixel value.\n   * @return {boolean} - true if the current coordinates are\n   * within the tolerance, false otherwise\n   */\n  isWithin(currentX, currentY, previousX, previousY, tolerance) {\n    return ((Math.abs(currentY - previousY) <= tolerance) &&\n    (Math.abs(currentX - previousX) <= tolerance));\n  },\n  /* isWithin*/\n\n  /**\n   * Calculates the distance between two points.\n   * @param {Number} x0\n   * @param {Number} x1\n   * @param {Number} y0\n   * @param {Number} y1\n   * @return {number} The numerical value between two points\n   */\n  distanceBetweenTwoPoints(x0, x1, y0, y1) {\n    let dist = (Math.sqrt(((x1 - x0) * (x1 - x0)) + ((y1 - y0) * (y1 - y0))));\n    return Math.round(dist * 100) / 100;\n  },\n\n  /**\n   * Calculates the midpoint coordinates between two points.\n   * @param {Number} x0\n   * @param {Number} x1\n   * @param {Number} y0\n   * @param {Number} y1\n   * @return {Object} The coordinates of the midpoint.\n   */\n  getMidpoint(x0, x1, y0, y1) {\n    return {\n      x: ((x0 + x1) / 2),\n      y: ((y0 + y1) / 2),\n    };\n  },\n  /**\n   * Calculates the angle between the projection and an origin point.\n   *   |                (projectionX,projectionY)\n   *   |             /°\n   *   |          /\n   *   |       /\n   *   |    / θ\n   *   | /__________\n   *   ° (originX, originY)\n   * @param {number} originX\n   * @param {number} originY\n   * @param {number} projectionX\n   * @param {number} projectionY\n   * @return {number} - Degree along the unit circle where the project lies\n   */\n  getAngle(originX, originY, projectionX, projectionY) {\n    let angle = Math.atan2(projectionY - originY, projectionX - originX) *\n      ((HALF_CIRCLE_DEGREES) / Math.PI);\n    return CIRCLE_DEGREES - ((angle < 0) ? (CIRCLE_DEGREES + angle) : angle);\n  },\n  /**\n   * Calculates the angular distance in degrees between two angles\n   *  along the unit circle\n   * @param {number} start - The starting point in degrees\n   * @param {number} end - The ending point in degrees\n   * @return {number} The number of degrees between the\n   * starting point and ending point. Negative degrees denote a clockwise\n   * direction, and positive a counter-clockwise direction.\n   */\n  getAngularDistance(start, end) {\n    let angle = (end - start) % CIRCLE_DEGREES;\n    let sign = (angle < 0) ? 1 : -1;\n    angle = Math.abs(angle);\n    return (angle > HALF_CIRCLE_DEGREES) ?\n    sign * (CIRCLE_DEGREES - angle) : sign * angle;\n  },\n\n  /**\n   * Calculates the velocity of pixel/milliseconds between two points\n   * @param {Number} startX\n   * @param {Number} startY\n   * @param {Number} startTime\n   * @param {Number} endX\n   * @param {Number} endY\n   * @param {Number} endTime\n   * @return {Number} velocity of px/time\n   */\n  getVelocity(startX, startY, startTime, endX, endY, endTime) {\n    let distance = this.distanceBetweenTwoPoints(startX, endX, startY, endY);\n    return (distance / (endTime - startTime));\n  },\n\n  /**\n   * Returns the farthest right input\n   * @param {Array} inputs\n   * @return {Object}\n   */\n  getRightMostInput(inputs) {\n    let rightMost = null;\n    let distance = Number.MIN_VALUE;\n    inputs.forEach((input) => {\n      if (input.initial.x > distance) {\n        rightMost = input;\n      }\n    });\n    return rightMost;\n  },\n\n  /**\n   * Determines is the value is an integer and not a floating point\n   * @param {Mixed} value\n   * @return {boolean}\n   */\n  isInteger(value) {\n    return (typeof value === 'number') && (value % 1 === 0);\n  },\n\n  /**\n   * Determines if the x,y position of the input is within then target.\n   * @param {Number} x -clientX\n   * @param {Number} y -clientY\n   * @param {Element} target\n   * @return {Boolean}\n   */\n  isInside(x, y, target) {\n    const rect = target.getBoundingClientRect();\n    return ((x > rect.left && x < rect.left + rect.width) &&\n    (y > rect.top && y < rect.top + rect.height));\n  },\n  /**\n   * Polyfill for event.propagationPath\n   * @param {Event} event\n   * @return {Array}\n   */\n  getPropagationPath(event) {\n    if (event.path) {\n      return event.path;\n    } else {\n      let path = [];\n      let node = event.target;\n      while (node != document) {\n        path.push(node);\n        node = node.parentNode;\n      }\n\n      return path;\n    }\n  },\n\n  /**\n   * Retrieve the index inside the path array\n   * @param {Array} path\n   * @param {Element} element\n   * @return {Element}\n   */\n  getPathIndex(path, element) {\n    let index = path.length;\n\n    path.forEach((obj, i) => {\n      if (obj === element) {\n        index = i;\n      }\n    });\n\n    return index;\n  },\n\n  setMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = 'none';\n    element.style['touch-action'] = 'none';\n  },\n\n  removeMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = '';\n    element.style['touch-action'] = '';\n  },\n\n  preventDefault(event) {\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n  }\n};\n\nexport default util;\n","/**\n * @file Distance.js\n * Contains the abstract Distance class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 2;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Distance is defined as two inputs moving either together or apart.\n * @class Distance\n */\nclass Distance extends Gesture {\n  /**\n   * Constructor function for the Distance class.\n   * @param {Object} options\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'distance';\n\n    /**\n     * The minimum amount in pixels the inputs must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ?\n      options.threshold : DEFAULT_MIN_THRESHOLD;\n  }\n\n  /**\n   * Event hook for the start of a gesture. Initialized the lastEmitted\n   * gesture and stores it in the first input for reference events.\n   * @param {Array} inputs\n   */\n  start(inputs, state, element) {\n    if(!this.isValid(inputs, state, element)) {\n      return null;\n    }\n    if (inputs.length === DEFAULT_INPUTS) {\n      // Store the progress in the first input.\n      const progress = inputs[0].getGestureProgress(this.type);\n      progress.lastEmittedDistance = util.distanceBetweenTwoPoints(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n    }\n  }\n\n  /**\n   * Event hook for the move of a gesture.\n   *  Determines if the two points are moved in the expected direction relative\n   *  to the current distance and the last distance.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {Object | null} - Returns the distance in pixels between two inputs\n   */\n  move(inputs, state, element) {\n    if (state.numActiveInputs() === DEFAULT_INPUTS) {\n      const currentDistance = util.distanceBetweenTwoPoints(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n      const centerPoint = util.getMidpoint(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n\n      // Progress is stored in the first input.\n      const progress = inputs[0].getGestureProgress(this.type);\n      const change = currentDistance - progress.lastEmittedDistance;\n\n      if (Math.abs(change) >= this.threshold) {\n        progress.lastEmittedDistance = currentDistance;\n        return {\n          distance: currentDistance,\n          center: centerPoint,\n          change,\n        };\n      }\n    }\n\n    return null;\n  }\n}\n\nexport default Distance;\n","/**\n * @file Gesture.js\n * Contains the Gesture class\n */\n\nimport util from './../core/util.js';\n\n/**\n * The Gesture class that all gestures inherit from.\n */\nclass Gesture {\n  /**\n   * Constructor function for the Gesture class.\n   * @class Gesture\n   */\n  constructor() {\n    /**\n     * The generic string type of gesture ('expand'|'distance'|\n     *  'rotate'|'swipe'|'tap').\n     * @type {String}\n     */\n    this.type = null;\n\n    /**\n     * The unique identifier for each gesture determined at bind time by the\n     * state object. This allows for distinctions across instance variables of\n     * Gestures that are created on the fly (e.g. Tap-1, Tap-2, etc).\n     * @type {String|null}\n     */\n    this.id = null;\n  }\n\n  /**\n   * Set the type of the gesture to be called during an event\n   * @param {String} type - The unique identifier of the gesture being created.\n   */\n  setType(type) {\n    this.type = type;\n  }\n\n  /**\n   * getType() - Returns the generic type of the gesture\n   * @return {String} - The type of gesture\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Set the id of the gesture to be called during an event\n   * @param {String} id - The unique identifier of the gesture being created.\n   */\n  setId(id) {\n    this.id = id;\n  }\n\n  /**\n   * Return the id of the event. If the id does not exist, return the type.\n   * @return {String}\n   */\n  getId() {\n    return (this.id !== null) ? this.id : this.type;\n  }\n\n  /**\n   * Updates internal properties with new ones, only if the properties exist.\n   * @param {Object} object\n   */\n  update(object) {\n    Object.keys(object).forEach( key => {\n      this[key] = object[key];\n    });\n  }\n\n  /**\n   * start() - Event hook for the start of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n\t * @param {Object} state - The state object of the current region.\n\t * @param {Element} element - The element associated to the binding.\n   * @return {null|Object}  - Default of null\n   */\n  start(inputs, state, element) {\n    return null;\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null|Object} - Default of null\n   */\n  move(inputs, state, element) {\n    return null;\n  }\n\n  /**\n   * end() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null|Object}  - Default of null\n   */\n  end(inputs) {\n    return null;\n  }\n\n\t/**\n\t* isValid() - Pre-checks to ensure the invariants of a gesture are satisfied.\n\t* @param {Array} inputs - The array of Inputs on the screen\n\t* @param {Object} state - The state object of the current region.\n\t* @param {Element} element - The element associated to the binding.\n\t* @return {boolean} - If the gesture is valid\n\t*/\n\tisValid(inputs, state, element) {\n    return inputs.every( input => {\n        return util.isInside(input.initial.x, input.initial.y, element);\n    });\n  }\n\n}\n\nexport default Gesture;\n","/**\n * @file Pan.js\n * Contains the Pan class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Pan is defined as a normal movement in any direction on a screen.\n * Pan gestures do not track start events and can interact with distance gestures\n * @class Pan\n */\nclass Pan extends Gesture {\n  /**\n   * Constructor function for the Pan class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs=1] - Number of inputs for the\n   *  Pan gesture.\n   * @param {Number} [options.threshold=1] - The minimum number of\n   * pixels the input has to move to trigger this gesture.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'pan';\n\n    /**\n     * The number of inputs to trigger a Pan can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The minimum amount in pixels the pan must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ?\n      options.threshold : DEFAULT_MIN_THRESHOLD;\n  }\n\n  /**\n   * Event hook for the start of a gesture. Marks each input as active,\n   * so it can invalidate any end events.\n   * @param {Array} inputs\n   */\n  start(inputs) {\n    inputs.forEach((input) => {\n      const progress = input.getGestureProgress(this.getId());\n      progress.active = true;\n      progress.lastEmitted = {\n        x: input.current.x,\n        y: input.current.y,\n      };\n    });\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture.\n   * Fired whenever the input length is met, and keeps a boolean flag that\n   * the gesture has fired at least once.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {Object} - Returns the distance in pixels between the two inputs.\n   */\n  move(inputs, state, element) {\n    if (this.numInputs !== inputs.length) return null;\n\n    const output = {\n      data: [],\n    };\n\n    inputs.forEach( (input, index) => {\n      const progress = input.getGestureProgress(this.getId());\n      const distanceFromLastEmit = util.distanceBetweenTwoPoints(\n        progress.lastEmitted.x,\n        progress.lastEmitted.y,\n        input.current.x,\n        input.current.y\n      );\n      const reachedThreshold = distanceFromLastEmit >= this.threshold;\n\n      if (progress.active && reachedThreshold) {\n        output.data[index] = packData( input, progress );\n        progress.lastEmitted.x = input.current.x;\n        progress.lastEmitted.y = input.current.y;\n      }\n    });\n\n    return output;\n\n    function packData( input, progress ) {\n      const distanceFromOrigin = util.distanceBetweenTwoPoints(\n        input.initial.x,\n        input.current.x,\n        input.initial.y,\n        input.current.y\n      );\n      const directionFromOrigin = util.getAngle(\n        input.initial.x,\n        input.initial.y,\n        input.current.x,\n        input.current.y\n      );\n      const currentDirection = util.getAngle(\n        progress.lastEmitted.x,\n        progress.lastEmitted.y,\n        input.current.x,\n        input.current.y\n      );\n      const change = {\n        x: input.current.x - progress.lastEmitted.x,\n        y: input.current.y - progress.lastEmitted.y,\n      };\n\n      return {\n        distanceFromOrigin,\n        directionFromOrigin,\n        currentDirection,\n        change,\n      };\n    }\n  }\n\n  /* move*/\n\n  /**\n   * end() - Event hook for the end of a gesture. If the gesture has at least\n   * fired once, then it ends on the first end event such that any remaining\n   * inputs will not trigger the event until all inputs have reached the\n   * touchend event. Any touchend->touchstart events that occur before all\n   * inputs are fully off the screen should not fire.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null} - null if the gesture is not to be emitted,\n   *  Object with information otherwise.\n   */\n  end(inputs) {\n    inputs.forEach((input) => {\n      const progress = input.getGestureProgress(this.getId());\n      progress.active = false;\n    });\n    return null;\n  }\n\n  /* end*/\n}\n\nexport default Pan;\n","/**\n * @file Rotate.js\n * Contains the Rotate class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 2;\n\n/**\n * A Rotate is defined as two inputs moving about a circle,\n * maintaining a relatively equal radius.\n * @class Rotate\n */\nclass Rotate extends Gesture {\n  /**\n   * Constructor function for the Rotate class.\n   */\n  constructor(options = {}) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'rotate';\n\n    /**\n     * The number of touches required to emit Rotate events.\n     * @type {Number}\n     */\n    this.numInputs = options.numInputs || DEFAULT_INPUTS;\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture. Obtains the midpoint of two\n   * the two inputs and calculates the projection of the right most input along\n   * a unit circle to obtain an angle. This angle is compared to the previously\n   * calculated angle to output the change of distance, and is compared to the\n   * initial angle to output the distance from the initial angle to the current\n   * angle.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current listener.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - null if this event did not occur\n   * @return {Object} obj.angle - The current angle along the unit circle\n   * @return {Object} obj.distanceFromOrigin - The angular distance travelled\n   * from the initial right most point.\n   * @return {Object} obj.distanceFromLast - The change of angle between the\n   * last position and the current position.\n   */\n  move(inputs, state, element) {\n    const numActiveInputs = state.numActiveInputs();\n    if (this.numInputs !== numActiveInputs) return null;\n\n    let currentPivot, initialPivot;\n    let input;\n    if (numActiveInputs === 1) {\n      const bRect = element.getBoundingClientRect();\n      currentPivot = {\n        x: bRect.left + bRect.width / 2,\n        y: bRect.top + bRect.height / 2,\n      };\n      initialPivot = currentPivot;\n      input = inputs[0];\n    } else {\n      currentPivot = util.getMidpoint(\n        inputs[0].current.x,\n        inputs[1].current.x,\n        inputs[0].current.y,\n        inputs[1].current.y);\n      input = util.getRightMostInput(inputs);\n    }\n\n    // Translate the current pivot point.\n    const currentAngle = util.getAngle(\n      currentPivot.x, \n      currentPivot.y,\n      input.current.x,\n      input.current.y);\n\n    const progress = input.getGestureProgress(this.getId());\n    if (!progress.initialAngle) {\n      progress.initialAngle = progress.previousAngle = currentAngle;\n      progress.distance = progress.change = 0;\n    } else {\n      progress.change = util.getAngularDistance(\n        progress.previousAngle,\n        currentAngle);\n      progress.distance = progress.distance + progress.change;\n    }\n\n    progress.previousAngle = currentAngle;\n\n    return {\n      angle: currentAngle,\n      distanceFromOrigin: progress.distance,\n      distanceFromLast: progress.change,\n    };\n  }\n\n  /* move*/\n}\n\nexport default Rotate;\n","/**\n * @file Swipe.js\n * Contains the Swipe class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MAX_REST_TIME = 100;\nconst DEFAULT_ESCAPE_VELOCITY = 0.2;\nconst DEFAULT_TIME_DISTORTION = 100;\nconst DEFAULT_MAX_PROGRESS_STACK = 10;\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n * @class Swipe\n */\nclass Swipe extends Gesture {\n\n  /**\n   * Constructor function for the Swipe class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs] - The number of inputs to trigger a\n   * Swipe can be variable, and the maximum number being a factor of the browser\n   *  move and current move events.\n   * @param {Number} [options.maxRestTime] - The maximum resting time a point\n   *  has between it's last\n   * @param {Number} [options.escapeVelocity] - The minimum velocity the input\n   *  has to be at to emit a swipe.\n   * @param {Number} [options.timeDistortion] - (EXPERIMENTAL) A value of time\n   *  in milliseconds to distort between events.\n   * @param {Number} [options.maxProgressStack] - (EXPERIMENTAL)The maximum\n   *  amount of move events to keep\n   * track of for a swipe.\n   */\n  constructor(options) {\n    super();\n    /**\n     * The type of the Gesture\n     * @type {String}\n     */\n    this.type = 'swipe';\n\n    /**\n     * The number of inputs to trigger a Swipe can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The maximum resting time a point has between it's last move and\n     * current move events.\n     * @type {Number}\n     */\n    this.maxRestTime = (options && options.maxRestTime) ?\n      options.maxRestTime : DEFAULT_MAX_REST_TIME;\n\n    /**\n     * The minimum velocity the input has to be at to emit a swipe.\n     * This is useful for determining the difference between\n     * a swipe and a pan gesture.\n     * @type {number}\n     */\n    this.escapeVelocity = (options && options.escapeVelocity) ?\n      options.escapeVelocity : DEFAULT_ESCAPE_VELOCITY;\n\n    /**\n     * (EXPERIMENTAL) A value of time in milliseconds to distort between events.\n     * Browsers do not accurately measure time with the Date constructor in\n     * milliseconds, so consecutive events sometimes display the same timestamp\n     * but different x/y coordinates. This will distort a previous time\n     * in such cases by the timeDistortion's value.\n     * @type {number}\n     */\n    this.timeDistortion = (options && options.timeDistortion) ?\n      options.timeDistortion : DEFAULT_TIME_DISTORTION;\n\n    /**\n     * (EXPERIMENTAL) The maximum amount of move events to keep track of for a\n     * swipe. This helps give a more accurate estimate of the user's velocity.\n     * @type {number}\n     */\n    this.maxProgressStack = (options && options.maxProgressStack) ?\n      options.maxProgressStack : DEFAULT_MAX_PROGRESS_STACK;\n  }\n\n  /**\n   * Event hook for the move of a gesture. Captures an input's x/y coordinates\n   * and the time of it's event on a stack.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - Swipe does not emit from a move.\n   */\n  move(inputs, state, element) {\n    if (this.numInputs === inputs.length) {\n      for (let i = 0; i < inputs.length; i++) {\n        let progress = inputs[i].getGestureProgress(this.getId());\n        if (!progress.moves) {\n          progress.moves = [];\n        }\n\n        progress.moves.push({\n          time: new Date().getTime(),\n          x: inputs[i].current.x,\n          y: inputs[i].current.y,\n        });\n\n        if (progress.length > this.maxProgressStack) {\n          progress.moves.shift();\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /* move*/\n\n  /**\n   * Determines if the input's history validates a swipe motion.\n   * Determines if it did not come to a complete stop (maxRestTime), and if it\n   * had enough of a velocity to be considered (ESCAPE_VELOCITY).\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @return {null|Object} - null if the gesture is not to be emitted,\n   *  Object with information otherwise.\n   */\n  end(inputs) {\n    if (this.numInputs === inputs.length) {\n      let output = {\n        data: [],\n      };\n\n      for (var i = 0; i < inputs.length; i++) {\n        // Determine if all input events are on the 'end' event.\n        if (inputs[i].current.type !== 'end') {\n          return;\n        }\n\n        let progress = inputs[i].getGestureProgress(this.getId());\n        if (progress.moves && progress.moves.length > 2) {\n          // CHECK : Return if the input has not moved in maxRestTime ms.\n\n          let currentMove = progress.moves.pop();\n          if ((new Date().getTime()) - currentMove.time > this.maxRestTime) {\n            return null;\n          }\n\n          let lastMove;\n          let index = progress.moves.length - 1;\n\n          /* Date is unreliable, so we retrieve the last move event where\n           the time is not the same. */\n          while (index !== -1) {\n            if (progress.moves[index].time !== currentMove.time) {\n              lastMove = progress.moves[index];\n              break;\n            }\n\n            index--;\n          }\n\n          /* If the date is REALLY unreliable, we apply a time distortion\n           to the last event.\n           */\n          if (!lastMove) {\n            lastMove = progress.moves.pop();\n            lastMove.time += this.timeDistortion;\n          }\n\n          var velocity = util.getVelocity(lastMove.x, lastMove.y, lastMove.time,\n            currentMove.x, currentMove.y, currentMove.time);\n\n          output.data[i] = {\n            velocity: velocity,\n            distance: util.distanceBetweenTwoPoints(lastMove.x, currentMove.x, lastMove.y, currentMove.y),\n            duration:  currentMove.time - lastMove.time,\n            currentDirection: util.getAngle(\n              lastMove.x,\n              lastMove.y,\n              currentMove.x,\n              currentMove.y),\n          };\n        }\n      }\n\n      for (var i = 0; i < output.data.length; i++) {\n        if (velocity < this.escapeVelocity) {\n          return null;\n        }\n      }\n\n      if (output.data.length > 0) {\n        return output;\n      }\n    }\n\n    return null;\n  }\n\n  /* end*/\n}\n\nexport default Swipe;\n","/**\n * @file Tap.js\n * Contains the Tap class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_MIN_DELAY_MS = 0;\nconst DEFAULT_MAX_DELAY_MS = 300;\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MOVE_PX_TOLERANCE = 10;\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n * @class Tap\n */\nclass Tap extends Gesture {\n  /**\n   * Constructor function for the Tap class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.minDelay=0] - The minimum delay between a\n   * touchstart and touchend can be configured in milliseconds.\n   * @param {Number} [options.maxDelay=300] - The maximum delay between a\n   * touchstart and touchend can be configured in milliseconds.\n   * @param {Number} [options.numInputs=1] - Number of inputs for Tap gesture.\n   * @param {Number} [options.tolerance=10] - The tolerance in pixels\n   *  a user can move.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'tap';\n\n    /**\n     * The minimum amount between a touchstart and a touchend can be configured\n     * in milliseconds. The minimum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     * @type {Number}\n     */\n    this.minDelay = (options && options.minDelay) ?\n      options.minDelay : DEFAULT_MIN_DELAY_MS;\n\n    /**\n     * The maximum delay between a touchstart and touchend can be configured in\n     * milliseconds. The maximum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     * @type {Number}\n     */\n    this.maxDelay = (options && options.maxDelay) ?\n      options.maxDelay : DEFAULT_MAX_DELAY_MS;\n\n    /**\n     * The number of inputs to trigger a Tap can be variable,\n     * and the maximum number being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ?\n      options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Tap gesture to be triggered more easily.\n     * @type {number}\n     */\n    this.tolerance = (options && options.tolerance) ?\n      options.tolerance : DEFAULT_MOVE_PX_TOLERANCE;\n  }\n\n  /* constructor*/\n\n  /**\n   * Event hook for the start of a gesture. Keeps track of when the inputs\n   * trigger the start event.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @return {null} - Tap does not trigger on a start event.\n   */\n  start(inputs) {\n    if (inputs.length === this.numInputs) {\n      inputs.forEach((input) => {\n        let progress = input.getGestureProgress(this.type);\n        progress.start = new Date().getTime();\n      });\n    }\n\n    return null;\n  }\n\n  /* start*/\n\n  /**\n   * Event hook for the move of a gesture. The Tap event reaches here if the\n   * user starts to move their input before an 'end' event is reached.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @param {Element} element - The element associated to the binding.\n   * @return {null} - Tap does not trigger on a move event.\n   */\n  move(inputs, state, element) {\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() === 'move') {\n        let current = inputs[i].current;\n        let previous = inputs[i].previous;\n        if (!util.isWithin(\n            current.x,\n            current.y,\n            previous.x,\n            previous.y,\n            this.tolerance)) {\n          let type = this.type;\n          inputs.forEach(function(input) {\n            input.resetProgress(type);\n          });\n\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /* move*/\n\n  /**\n   * Event hook for the end of a gesture.\n   * Determines if this the tap event can be fired if the delay and tolerance\n   * constraints are met. Also waits for all of the inputs to be off the screen\n   * before determining if the gesture is triggered.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @return {null|Object} - null if the gesture is not to be emitted,\n   * Object with information otherwise. Returns the interval time between start\n   * and end events.\n   */\n  end(inputs) {\n    if (inputs.length !== this.numInputs) {\n      return null;\n    }\n\n    let startTime = Number.MAX_VALUE;\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() !== 'end') {\n        return null;\n      }\n\n      let progress = inputs[i].getGestureProgress(this.type);\n      if (!progress.start) {\n        return null;\n      }\n\n      // Find the most recent input's startTime\n      if (progress.start < startTime) {\n        startTime = progress.start;\n      }\n    }\n\n    let interval = new Date().getTime() - startTime;\n    if ((this.minDelay <= interval) && (this.maxDelay >= interval)) {\n      return {\n        interval: interval,\n      };\n    } else {\n      let type = this.type;\n      inputs.forEach(function(input) {\n        input.resetProgress(type);\n      });\n\n      return null;\n    }\n  }\n\n  /* end*/\n}\n\nexport default Tap;\n"],"sourceRoot":""}